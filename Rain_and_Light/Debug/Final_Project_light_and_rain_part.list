
Final_Project_light_and_rain_part.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000357c  080001a0  080001a0  000101a0  2**4
||||||| 7f56823
  1 .text         00003358  080001a0  080001a0  000101a0  2**4
=======
  1 .text         00003c74  080001a0  080001a0  000101a0  2**4
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
<<<<<<< HEAD
  2 .rodata       00000054  0800371c  0800371c  0001371c  2**2
||||||| 7f56823
  2 .rodata       00000054  080034f8  080034f8  000134f8  2**2
=======
  2 .rodata       00000054  08003e14  08003e14  00013e14  2**2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  3 .ARM.extab    00000000  08003770  08003770  00020070  2**0
||||||| 7f56823
  3 .ARM.extab    00000000  0800354c  0800354c  00020070  2**0
=======
  3 .ARM.extab    00000000  08003e68  08003e68  00020070  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS
<<<<<<< HEAD
  4 .ARM          00000008  08003770  08003770  00013770  2**2
||||||| 7f56823
  4 .ARM          00000008  0800354c  0800354c  0001354c  2**2
=======
  4 .ARM          00000008  08003e68  08003e68  00013e68  2**2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  5 .preinit_array 00000000  08003778  08003778  00020070  2**0
||||||| 7f56823
  5 .preinit_array 00000000  08003554  08003554  00020070  2**0
=======
  5 .preinit_array 00000000  08003e70  08003e70  00020070  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  6 .init_array   00000004  08003778  08003778  00013778  2**2
||||||| 7f56823
  6 .init_array   00000004  08003554  08003554  00013554  2**2
=======
  6 .init_array   00000004  08003e70  08003e70  00013e70  2**2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  7 .fini_array   00000004  0800377c  0800377c  0001377c  2**2
||||||| 7f56823
  7 .fini_array   00000004  08003558  08003558  00013558  2**2
=======
  7 .fini_array   00000004  08003e74  08003e74  00013e74  2**2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  8 .data         00000070  20000000  08003780  00020000  2**2
||||||| 7f56823
  8 .data         00000070  20000000  0800355c  00020000  2**2
=======
  8 .data         00000070  20000000  08003e78  00020000  2**2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  9 .bss          00000140  20000070  080037f0  00020070  2**2
||||||| 7f56823
  9 .bss          000000c0  20000070  080035cc  00020070  2**2
=======
  9 .bss          00000140  20000070  08003ee8  00020070  2**2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  ALLOC
<<<<<<< HEAD
 10 ._user_heap_stack 00000600  200001b0  080037f0  000201b0  2**0
||||||| 7f56823
 10 ._user_heap_stack 00000600  20000130  080035cc  00020130  2**0
=======
 10 ._user_heap_stack 00000600  200001b0  08003ee8  000201b0  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   000073dd  00000000  00000000  000200a0  2**0
||||||| 7f56823
 12 .debug_info   00007317  00000000  00000000  000200a0  2**0
=======
 12 .debug_info   00008352  00000000  00000000  000200a0  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 13 .debug_abbrev 0000147b  00000000  00000000  0002747d  2**0
||||||| 7f56823
 13 .debug_abbrev 0000147b  00000000  00000000  000273b7  2**0
=======
 13 .debug_abbrev 00001707  00000000  00000000  000283f2  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 14 .debug_aranges 00000718  00000000  00000000  000288f8  2**3
||||||| 7f56823
 14 .debug_aranges 00000708  00000000  00000000  00028838  2**3
=======
 14 .debug_aranges 000007b0  00000000  00000000  00029b00  2**3
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 15 .debug_ranges 00000660  00000000  00000000  00029010  2**3
||||||| 7f56823
 15 .debug_ranges 00000650  00000000  00000000  00028f40  2**3
=======
 15 .debug_ranges 000006e8  00000000  00000000  0002a2b0  2**3
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 16 .debug_macro  000152f8  00000000  00000000  00029670  2**0
||||||| 7f56823
 16 .debug_macro  000152f8  00000000  00000000  00029590  2**0
=======
 16 .debug_macro  000154d1  00000000  00000000  0002a998  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 17 .debug_line   000061da  00000000  00000000  0003e968  2**0
||||||| 7f56823
 17 .debug_line   00006167  00000000  00000000  0003e888  2**0
=======
 17 .debug_line   00006b93  00000000  00000000  0003fe69  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 18 .debug_str    00087a59  00000000  00000000  00044b42  2**0
||||||| 7f56823
 18 .debug_str    00087a23  00000000  00000000  000449ef  2**0
=======
 18 .debug_str    00087d62  00000000  00000000  000469fc  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 19 .comment      0000007b  00000000  00000000  000cc59b  2**0
||||||| 7f56823
 19 .comment      0000007b  00000000  00000000  000cc412  2**0
=======
 19 .comment      0000007b  00000000  00000000  000ce75e  2**0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY
<<<<<<< HEAD
 20 .debug_frame  00001f1c  00000000  00000000  000cc618  2**2
||||||| 7f56823
 20 .debug_frame  00001ee4  00000000  00000000  000cc490  2**2
=======
 20 .debug_frame  00002188  00000000  00000000  000ce7dc  2**2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c0:	08003704 	.word	0x08003704
||||||| 7f56823
 80001c0:	080034e0 	.word	0x080034e0
=======
 80001c0:	08003dfc 	.word	0x08003dfc
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
<<<<<<< HEAD
 80001dc:	08003704 	.word	0x08003704
||||||| 7f56823
 80001dc:	080034e0 	.word	0x080034e0
=======
 80001dc:	08003dfc 	.word	0x08003dfc
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ADC_Select_CH0>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adcValue0 = 0;
uint16_t adcValue1 = 0;

void ADC_Select_CH0(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
   	 ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
	 /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
<<<<<<< HEAD
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80005aa:	2304      	movs	r3, #4
||||||| 7f56823
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005aa:	2300      	movs	r3, #0
=======
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005aa:	2302      	movs	r3, #2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
 80005ac:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <ADC_Select_CH0+0x3c>)
<<<<<<< HEAD
 80005b4:	f000 feb0 	bl	8001318 <HAL_ADC_ConfigChannel>
||||||| 7f56823
 80005b4:	f000 fd9e 	bl	80010f4 <HAL_ADC_ConfigChannel>
=======
 80005b4:	f000 fef8 	bl	80013a8 <HAL_ADC_ConfigChannel>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
<<<<<<< HEAD
 80005be:	f000 faa7 	bl	8000b10 <Error_Handler>
||||||| 7f56823
 80005be:	f000 f9ff 	bl	80009c0 <Error_Handler>
=======
 80005be:	f000 fadd 	bl	8000b7c <Error_Handler>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  }
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000a0 	.word	0x200000a0

080005d0 <ADC_Select_CH1>:

void ADC_Select_CH1(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	607b      	str	r3, [r7, #4]
<<<<<<< HEAD
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
=======
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80005ea:	2304      	movs	r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
<<<<<<< HEAD
 80005ee:	463b      	mov	r3, r7
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <ADC_Select_CH1+0x3c>)
 80005f4:	f000 fe90 	bl	8001318 <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <ADC_Select_CH1+0x32>
||||||| 7f56823
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <ADC_Select_CH1+0x38>)
 80005f0:	f000 fd80 	bl	80010f4 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <ADC_Select_CH1+0x2e>
=======
 80005ee:	463b      	mov	r3, r7
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <ADC_Select_CH1+0x30>)
 80005f4:	f000 fed8 	bl	80013a8 <HAL_ADC_ConfigChannel>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  {
<<<<<<< HEAD
	    Error_Handler();
 80005fe:	f000 fa87 	bl	8000b10 <Error_Handler>
||||||| 7f56823
	    Error_Handler();
 80005fa:	f000 f9e1 	bl	80009c0 <Error_Handler>
=======
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  }
}
<<<<<<< HEAD
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000a0 	.word	0x200000a0

08000610 <main>:
||||||| 7f56823
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000a0 	.word	0x200000a0

0800060c <main>:
=======
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000a0 	.word	0x200000a0

08000604 <main>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000610:	b580      	push	{r7, lr}
 8000612:	b092      	sub	sp, #72	; 0x48
 8000614:	af00      	add	r7, sp, #0
||||||| 7f56823
 800060c:	b580      	push	{r7, lr}
 800060e:	b092      	sub	sp, #72	; 0x48
 8000610:	af00      	add	r7, sp, #0
=======
 8000604:	b580      	push	{r7, lr}
 8000606:	b092      	sub	sp, #72	; 0x48
 8000608:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000616:	f000 fc3d 	bl	8000e94 <HAL_Init>
||||||| 7f56823
 8000612:	f000 fb2d 	bl	8000c70 <HAL_Init>
=======
 800060a:	f000 fc8b 	bl	8000f24 <HAL_Init>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800061a:	f000 f8c1 	bl	80007a0 <SystemClock_Config>
||||||| 7f56823
 8000616:	f000 f88d 	bl	8000734 <SystemClock_Config>
=======
 800060e:	f000 f8fd 	bl	800080c <SystemClock_Config>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800061e:	f000 fa07 	bl	8000a30 <MX_GPIO_Init>
||||||| 7f56823
 800061a:	f000 f961 	bl	80008e0 <MX_GPIO_Init>
=======
 8000612:	f000 fa43 	bl	8000a9c <MX_GPIO_Init>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  MX_USART2_UART_Init();
<<<<<<< HEAD
 8000622:	f000 f9b1 	bl	8000988 <MX_USART2_UART_Init>
||||||| 7f56823
 800061e:	f000 f935 	bl	800088c <MX_USART2_UART_Init>
=======
 8000616:	f000 f9ed 	bl	80009f4 <MX_USART2_UART_Init>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  MX_ADC1_Init();
<<<<<<< HEAD
 8000626:	f000 f925 	bl	8000874 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800062a:	f000 f983 	bl	8000934 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800062e:	f000 f9d5 	bl	80009dc <MX_USART6_UART_Init>
  {
||||||| 7f56823
 8000622:	f000 f8f1 	bl	8000808 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int isActive=1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  while (1)
  {
=======
 800061a:	f000 f961 	bl	80008e0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800061e:	f000 f9bf 	bl	80009a0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000622:	f000 fa11 	bl	8000a48 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  int isUserRequestClose=0; // 1 mean close 0 mean open
 8000626:	2300      	movs	r3, #0
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
<<<<<<< HEAD

||||||| 7f56823
=======

	  //get data from node mcu
	  if (HAL_UART_Receive(&huart6, decision, 1, 1000) == HAL_OK){
 800062a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	2201      	movs	r2, #1
 8000634:	486e      	ldr	r0, [pc, #440]	; (80007f0 <main+0x1ec>)
 8000636:	f002 f8fd 	bl	8002834 <HAL_UART_Receive>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10c      	bne.n	800065a <main+0x56>
	         if(decision[0]=='1'){
 8000640:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000644:	2b31      	cmp	r3, #49	; 0x31
 8000646:	d102      	bne.n	800064e <main+0x4a>
	        	 isUserRequestClose=1;
 8000648:	2301      	movs	r3, #1
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
 800064c:	e005      	b.n	800065a <main+0x56>
	         }else if(decision[0]=='0'){
 800064e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000652:	2b30      	cmp	r3, #48	; 0x30
 8000654:	d101      	bne.n	800065a <main+0x56>
	        	 isUserRequestClose=0;
 8000656:	2300      	movs	r3, #0
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
	         }
	  }

>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  ADC_Select_CH0();
<<<<<<< HEAD
 8000632:	f7ff ffad 	bl	8000590 <ADC_Select_CH0>
||||||| 7f56823
 800062a:	f7ff ffb1 	bl	8000590 <ADC_Select_CH0>
=======
 800065a:	f7ff ff99 	bl	8000590 <ADC_Select_CH0>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  HAL_ADC_Start(&hadc1);
<<<<<<< HEAD
 8000636:	4853      	ldr	r0, [pc, #332]	; (8000784 <main+0x174>)
 8000638:	f000 fd04 	bl	8001044 <HAL_ADC_Start>
||||||| 7f56823
 800062e:	483b      	ldr	r0, [pc, #236]	; (800071c <main+0x110>)
 8000630:	f000 fbf6 	bl	8000e20 <HAL_ADC_Start>
=======
 800065e:	4865      	ldr	r0, [pc, #404]	; (80007f4 <main+0x1f0>)
 8000660:	f000 fd38 	bl	80010d4 <HAL_ADC_Start>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
<<<<<<< HEAD
 800063c:	2164      	movs	r1, #100	; 0x64
 800063e:	4851      	ldr	r0, [pc, #324]	; (8000784 <main+0x174>)
 8000640:	f000 fdd9 	bl	80011f6 <HAL_ADC_PollForConversion>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d105      	bne.n	8000656 <main+0x46>
||||||| 7f56823
 8000634:	2164      	movs	r1, #100	; 0x64
 8000636:	4839      	ldr	r0, [pc, #228]	; (800071c <main+0x110>)
 8000638:	f000 fccb 	bl	8000fd2 <HAL_ADC_PollForConversion>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d105      	bne.n	800064e <main+0x42>
=======
 8000664:	2164      	movs	r1, #100	; 0x64
 8000666:	4863      	ldr	r0, [pc, #396]	; (80007f4 <main+0x1f0>)
 8000668:	f000 fe0d 	bl	8001286 <HAL_ADC_PollForConversion>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d105      	bne.n	800067e <main+0x7a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	 	   adcValue0 = HAL_ADC_GetValue(&hadc1);
<<<<<<< HEAD
 800064a:	484e      	ldr	r0, [pc, #312]	; (8000784 <main+0x174>)
 800064c:	f000 fe57 	bl	80012fe <HAL_ADC_GetValue>
 8000650:	4602      	mov	r2, r0
 8000652:	4b4d      	ldr	r3, [pc, #308]	; (8000788 <main+0x178>)
 8000654:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8000642:	4836      	ldr	r0, [pc, #216]	; (800071c <main+0x110>)
 8000644:	f000 fd49 	bl	80010da <HAL_ADC_GetValue>
 8000648:	4602      	mov	r2, r0
 800064a:	4b35      	ldr	r3, [pc, #212]	; (8000720 <main+0x114>)
 800064c:	601a      	str	r2, [r3, #0]
=======
 8000672:	4860      	ldr	r0, [pc, #384]	; (80007f4 <main+0x1f0>)
 8000674:	f000 fe8b 	bl	800138e <HAL_ADC_GetValue>
 8000678:	4602      	mov	r2, r0
 800067a:	4b5f      	ldr	r3, [pc, #380]	; (80007f8 <main+0x1f4>)
 800067c:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  }
	  char buffer[32];
	  sprintf(buffer,"%d \n \r",adcValue0);
<<<<<<< HEAD
 8000656:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <main+0x178>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	494b      	ldr	r1, [pc, #300]	; (800078c <main+0x17c>)
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fc4a 	bl	8002ef8 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdba 	bl	80001e0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	4846      	ldr	r0, [pc, #280]	; (8000790 <main+0x180>)
 8000676:	f001 ffae 	bl	80025d6 <HAL_UART_Transmit>
||||||| 7f56823
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <main+0x114>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4933      	ldr	r1, [pc, #204]	; (8000724 <main+0x118>)
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fb3c 	bl	8002cd4 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdbe 	bl	80001e0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	482e      	ldr	r0, [pc, #184]	; (8000728 <main+0x11c>)
 800066e:	f001 fea0 	bl	80023b2 <HAL_UART_Transmit>
=======
 800067e:	4b5e      	ldr	r3, [pc, #376]	; (80007f8 <main+0x1f4>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	463b      	mov	r3, r7
 8000684:	495d      	ldr	r1, [pc, #372]	; (80007fc <main+0x1f8>)
 8000686:	4618      	mov	r0, r3
 8000688:	f002 ffb2 	bl	80035f0 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 800068c:	463b      	mov	r3, r7
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fda6 	bl	80001e0 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	4639      	mov	r1, r7
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	4858      	ldr	r0, [pc, #352]	; (8000800 <main+0x1fc>)
 800069e:	f002 f830 	bl	8002702 <HAL_UART_Transmit>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  HAL_ADC_Stop(&hadc1);
<<<<<<< HEAD
 800067a:	4842      	ldr	r0, [pc, #264]	; (8000784 <main+0x174>)
 800067c:	f000 fd88 	bl	8001190 <HAL_ADC_Stop>
||||||| 7f56823
 8000672:	482a      	ldr	r0, [pc, #168]	; (800071c <main+0x110>)
 8000674:	f000 fc7a 	bl	8000f6c <HAL_ADC_Stop>
=======
 80006a2:	4854      	ldr	r0, [pc, #336]	; (80007f4 <main+0x1f0>)
 80006a4:	f000 fdbc 	bl	8001220 <HAL_ADC_Stop>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

	  ADC_Select_CH1();
<<<<<<< HEAD
 8000680:	f7ff ffa6 	bl	80005d0 <ADC_Select_CH1>
||||||| 7f56823
 8000678:	f7ff ffaa 	bl	80005d0 <ADC_Select_CH1>
=======
 80006a8:	f7ff ff92 	bl	80005d0 <ADC_Select_CH1>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  HAL_ADC_Start(&hadc1);
<<<<<<< HEAD
 8000684:	483f      	ldr	r0, [pc, #252]	; (8000784 <main+0x174>)
 8000686:	f000 fcdd 	bl	8001044 <HAL_ADC_Start>
||||||| 7f56823
 800067c:	4827      	ldr	r0, [pc, #156]	; (800071c <main+0x110>)
 800067e:	f000 fbcf 	bl	8000e20 <HAL_ADC_Start>
=======
 80006ac:	4851      	ldr	r0, [pc, #324]	; (80007f4 <main+0x1f0>)
 80006ae:	f000 fd11 	bl	80010d4 <HAL_ADC_Start>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
<<<<<<< HEAD
 800068a:	2164      	movs	r1, #100	; 0x64
 800068c:	483d      	ldr	r0, [pc, #244]	; (8000784 <main+0x174>)
 800068e:	f000 fdb2 	bl	80011f6 <HAL_ADC_PollForConversion>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d106      	bne.n	80006a6 <main+0x96>
||||||| 7f56823
 8000682:	2164      	movs	r1, #100	; 0x64
 8000684:	4825      	ldr	r0, [pc, #148]	; (800071c <main+0x110>)
 8000686:	f000 fca4 	bl	8000fd2 <HAL_ADC_PollForConversion>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d106      	bne.n	800069e <main+0x92>
=======
 80006b2:	2164      	movs	r1, #100	; 0x64
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <main+0x1f0>)
 80006b6:	f000 fde6 	bl	8001286 <HAL_ADC_PollForConversion>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d106      	bne.n	80006ce <main+0xca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  	 	   adcValue1 = HAL_ADC_GetValue(&hadc1);
<<<<<<< HEAD
 8000698:	483a      	ldr	r0, [pc, #232]	; (8000784 <main+0x174>)
 800069a:	f000 fe30 	bl	80012fe <HAL_ADC_GetValue>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <main+0x184>)
 80006a4:	801a      	strh	r2, [r3, #0]
||||||| 7f56823
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <main+0x110>)
 8000692:	f000 fd22 	bl	80010da <HAL_ADC_GetValue>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <main+0x120>)
 800069c:	801a      	strh	r2, [r3, #0]
=======
 80006c0:	484c      	ldr	r0, [pc, #304]	; (80007f4 <main+0x1f0>)
 80006c2:	f000 fe64 	bl	800138e <HAL_ADC_GetValue>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b4e      	ldr	r3, [pc, #312]	; (8000804 <main+0x200>)
 80006cc:	801a      	strh	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  	  }
<<<<<<< HEAD
	  char buffer2[32];
	  sprintf(buffer2,"%d \n \r",adcValue1);
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <main+0x184>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b0:	4936      	ldr	r1, [pc, #216]	; (800078c <main+0x17c>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fc20 	bl	8002ef8 <siprintf>
||||||| 7f56823
	  	  char buffer2[32];
	  	  sprintf(buffer2,"%d \n \r",adcValue1);
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <main+0x120>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	491e      	ldr	r1, [pc, #120]	; (8000724 <main+0x118>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fb12 	bl	8002cd4 <siprintf>
=======
	  	  char buffer2[32];
	  	  sprintf(buffer2,"%d \n \r",adcValue1);
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <main+0x200>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4948      	ldr	r1, [pc, #288]	; (80007fc <main+0x1f8>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ff88 	bl	80035f0 <siprintf>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  HAL_UART_Transmit(&huart2, buffer2, strlen(buffer2), 100);
<<<<<<< HEAD
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd8f 	bl	80001e0 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006ca:	2364      	movs	r3, #100	; 0x64
 80006cc:	4830      	ldr	r0, [pc, #192]	; (8000790 <main+0x180>)
 80006ce:	f001 ff82 	bl	80025d6 <HAL_UART_Transmit>
||||||| 7f56823
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fd93 	bl	80001e0 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <main+0x11c>)
 80006c6:	f001 fe74 	bl	80023b2 <HAL_UART_Transmit>
=======
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd7b 	bl	80001e0 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f107 0120 	add.w	r1, r7, #32
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	4842      	ldr	r0, [pc, #264]	; (8000800 <main+0x1fc>)
 80006f6:	f002 f804 	bl	8002702 <HAL_UART_Transmit>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  HAL_ADC_Stop(&hadc1);
<<<<<<< HEAD
 80006d2:	482c      	ldr	r0, [pc, #176]	; (8000784 <main+0x174>)
 80006d4:	f000 fd5c 	bl	8001190 <HAL_ADC_Stop>
||||||| 7f56823
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <main+0x110>)
 80006cc:	f000 fc4e 	bl	8000f6c <HAL_ADC_Stop>
=======
 80006fa:	483e      	ldr	r0, [pc, #248]	; (80007f4 <main+0x1f0>)
 80006fc:	f000 fd90 	bl	8001220 <HAL_ADC_Stop>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	  HAL_Delay(100);
<<<<<<< HEAD
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f000 fc4d 	bl	8000f78 <HAL_Delay>

	  //value0 is ldr, the more, the darker. value1 is rain, the more, the heavier rain. //rain green led lit, sun shine and rain stop green led out, no sun shine green led lit
	  if(adcValue1<=3600 && adcValue0<1000){ //no rain and sun shine
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <main+0x184>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80006e6:	d821      	bhi.n	800072c <main+0x11c>
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <main+0x178>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006f0:	d21c      	bcs.n	800072c <main+0x11c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 , GPIO_PIN_RESET); // roof open
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	4828      	ldr	r0, [pc, #160]	; (8000798 <main+0x188>)
 80006f8:	f001 faa4 	bl	8001c44 <HAL_GPIO_WritePin>
		  //HAL_UART_Transmit(&huart1, "1", 1, 100); //roof open
		  HAL_UART_Transmit(&huart6, buffer, strlen(buffer), 100); //roof open , rain
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd6e 	bl	80001e0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	1d39      	adds	r1, r7, #4
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	4823      	ldr	r0, [pc, #140]	; (800079c <main+0x18c>)
 800070e:	f001 ff62 	bl	80025d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart6, buffer2, strlen(buffer2), 100);// light
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd62 	bl	80001e0 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	b29a      	uxth	r2, r3
 8000720:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	481d      	ldr	r0, [pc, #116]	; (800079c <main+0x18c>)
 8000728:	f001 ff55 	bl	80025d6 <HAL_UART_Transmit>
	  }
	  if(adcValue0>=1000 || adcValue1>3600){//no sun shine or rain
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <main+0x178>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000734:	d204      	bcs.n	8000740 <main+0x130>
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <main+0x184>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800073e:	d91c      	bls.n	800077a <main+0x16a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 , GPIO_PIN_SET); // roof close
 8000740:	2201      	movs	r2, #1
 8000742:	2120      	movs	r1, #32
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <main+0x188>)
 8000746:	f001 fa7d 	bl	8001c44 <HAL_GPIO_WritePin>
		  //HAL_UART_Transmit(&huart1, "0", 1, 100); //roof close
		  HAL_UART_Transmit(&huart6, buffer, strlen(buffer), 100); //roof close , rain
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fd47 	bl	80001e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	1d39      	adds	r1, r7, #4
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	4810      	ldr	r0, [pc, #64]	; (800079c <main+0x18c>)
 800075c:	f001 ff3b 	bl	80025d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart6, buffer2, strlen(buffer2), 100);// light
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fd3b 	bl	80001e0 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <main+0x18c>)
 8000776:	f001 ff2e 	bl	80025d6 <HAL_UART_Transmit>
	  }

	  HAL_Delay(1000);
 800077a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077e:	f000 fbfb 	bl	8000f78 <HAL_Delay>
||||||| 7f56823
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f000 fb3f 	bl	8000d54 <HAL_Delay>

	  //value0 is ldr, the more, the darker. value1 is rain, the more, the heavier rain.
	  if(isActive==1){ //rain green led lit, sun shine and rain stop green led out, no sun shine green led lit
 80006d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d1a6      	bne.n	800062a <main+0x1e>
		  if(adcValue0<=3600 && adcValue1<1000){ //sun shine and no rain
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <main+0x114>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80006e4:	d809      	bhi.n	80006fa <main+0xee>
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0x120>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006ee:	d204      	bcs.n	80006fa <main+0xee>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 , GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <main+0x124>)
 80006f6:	f001 f993 	bl	8001a20 <HAL_GPIO_WritePin>
	  	  }
		  if(adcValue1>=1000 || adcValue0>3600){// rain or no sun shine
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <main+0x120>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000702:	d204      	bcs.n	800070e <main+0x102>
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <main+0x114>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800070c:	d98d      	bls.n	800062a <main+0x1e>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 , GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <main+0x124>)
 8000714:	f001 f984 	bl	8001a20 <HAL_GPIO_WritePin>
=======
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f000 fc81 	bl	8001008 <HAL_Delay>

	  //led on -> roof close
	  //value0 is ldr, the more, the darker. value1 is rain, the more, the heavier rain.
	  if(isUserRequestClose==0){ //rain green led lit, sun shine and rain stop green led out, no sun shine green led lit
 8000706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000708:	2b00      	cmp	r3, #0
 800070a:	d14e      	bne.n	80007aa <main+0x1a6>
		  if(adcValue1<=3600 && adcValue0<1000){ // no rain and sun shine
 800070c:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <main+0x200>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000714:	d821      	bhi.n	800075a <main+0x156>
 8000716:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <main+0x1f4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800071e:	d21c      	bcs.n	800075a <main+0x156>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 , GPIO_PIN_RESET); // roof open
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	4838      	ldr	r0, [pc, #224]	; (8000808 <main+0x204>)
 8000726:	f001 fb23 	bl	8001d70 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart6, buffer, strlen(buffer), 100); //roof open , rain
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd57 	bl	80001e0 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	4639      	mov	r1, r7
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	482d      	ldr	r0, [pc, #180]	; (80007f0 <main+0x1ec>)
 800073c:	f001 ffe1 	bl	8002702 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart6, buffer2, strlen(buffer2), 100);// light
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd4b 	bl	80001e0 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	f107 0120 	add.w	r1, r7, #32
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	4826      	ldr	r0, [pc, #152]	; (80007f0 <main+0x1ec>)
 8000756:	f001 ffd4 	bl	8002702 <HAL_UART_Transmit>
	  	  }
		  if(adcValue0>=1000 || adcValue1>3600){// rain or no sun shine
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <main+0x1f4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000762:	d204      	bcs.n	800076e <main+0x16a>
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <main+0x200>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800076c:	d93a      	bls.n	80007e4 <main+0x1e0>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 , GPIO_PIN_SET); // roof close
 800076e:	2201      	movs	r2, #1
 8000770:	2120      	movs	r1, #32
 8000772:	4825      	ldr	r0, [pc, #148]	; (8000808 <main+0x204>)
 8000774:	f001 fafc 	bl	8001d70 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart6, buffer, strlen(buffer), 100); //roof close , rain
 8000778:	463b      	mov	r3, r7
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fd30 	bl	80001e0 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	4639      	mov	r1, r7
 8000786:	2364      	movs	r3, #100	; 0x64
 8000788:	4819      	ldr	r0, [pc, #100]	; (80007f0 <main+0x1ec>)
 800078a:	f001 ffba 	bl	8002702 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart6, buffer2, strlen(buffer2), 100);// light
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd24 	bl	80001e0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	f107 0120 	add.w	r1, r7, #32
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	4813      	ldr	r0, [pc, #76]	; (80007f0 <main+0x1ec>)
 80007a4:	f001 ffad 	bl	8002702 <HAL_UART_Transmit>
 80007a8:	e01c      	b.n	80007e4 <main+0x1e0>
		  }
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 , GPIO_PIN_SET); // roof close
 80007aa:	2201      	movs	r2, #1
 80007ac:	2120      	movs	r1, #32
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <main+0x204>)
 80007b0:	f001 fade 	bl	8001d70 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart6, buffer, strlen(buffer), 100); //roof close , rain
 80007b4:	463b      	mov	r3, r7
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd12 	bl	80001e0 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4639      	mov	r1, r7
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <main+0x1ec>)
 80007c6:	f001 ff9c 	bl	8002702 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart6, buffer2, strlen(buffer2), 100);// light
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd06 	bl	80001e0 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f107 0120 	add.w	r1, r7, #32
 80007dc:	2364      	movs	r3, #100	; 0x64
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <main+0x1ec>)
 80007e0:	f001 ff8f 	bl	8002702 <HAL_UART_Transmit>
	  }

	  HAL_Delay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e8:	f000 fc0e 	bl	8001008 <HAL_Delay>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
<<<<<<< HEAD
 8000782:	e756      	b.n	8000632 <main+0x22>
 8000784:	200000a0 	.word	0x200000a0
 8000788:	2000008c 	.word	0x2000008c
 800078c:	0800371c 	.word	0x0800371c
 8000790:	20000168 	.word	0x20000168
 8000794:	20000090 	.word	0x20000090
 8000798:	40020000 	.word	0x40020000
 800079c:	20000128 	.word	0x20000128

080007a0 <SystemClock_Config>:
||||||| 7f56823
 8000718:	e787      	b.n	800062a <main+0x1e>
 800071a:	bf00      	nop
 800071c:	200000a0 	.word	0x200000a0
 8000720:	2000008c 	.word	0x2000008c
 8000724:	080034f8 	.word	0x080034f8
 8000728:	200000e8 	.word	0x200000e8
 800072c:	20000090 	.word	0x20000090
 8000730:	40020000 	.word	0x40020000

08000734 <SystemClock_Config>:
=======
 80007ec:	e71d      	b.n	800062a <main+0x26>
 80007ee:	bf00      	nop
 80007f0:	20000128 	.word	0x20000128
 80007f4:	200000a0 	.word	0x200000a0
 80007f8:	2000008c 	.word	0x2000008c
 80007fc:	08003e14 	.word	0x08003e14
 8000800:	20000168 	.word	0x20000168
 8000804:	20000090 	.word	0x20000090
 8000808:	40020000 	.word	0x40020000

0800080c <SystemClock_Config>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
=======
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2230      	movs	r2, #48	; 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fb9a 	bl	8002ee8 <memset>
||||||| 7f56823
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fabe 	bl	8002cc4 <memset>
=======
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fee0 	bl	80035e0 <memset>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
<<<<<<< HEAD
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
=======
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a27      	ldr	r2, [pc, #156]	; (800086c <SystemClock_Config+0xcc>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <SystemClock_Config+0xcc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
||||||| 7f56823
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <SystemClock_Config+0xcc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
=======
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
<<<<<<< HEAD
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SystemClock_Config+0xd0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <SystemClock_Config+0xd0>)
 80007ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <SystemClock_Config+0xd0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
||||||| 7f56823
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <SystemClock_Config+0xd0>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
=======
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <SystemClock_Config+0xd0>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
||||||| 7f56823
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
=======
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
<<<<<<< HEAD
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
||||||| 7f56823
 8000794:	2301      	movs	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
<<<<<<< HEAD
 8000804:	2310      	movs	r3, #16
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
||||||| 7f56823
 8000798:	2310      	movs	r3, #16
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8000870:	2310      	movs	r3, #16
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
<<<<<<< HEAD
 8000808:	2302      	movs	r3, #2
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
||||||| 7f56823
 800079c:	2302      	movs	r3, #2
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
=======
 8000874:	2302      	movs	r3, #2
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
<<<<<<< HEAD
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
||||||| 7f56823
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
=======
 8000878:	2300      	movs	r3, #0
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.PLL.PLLM = 16;
<<<<<<< HEAD
 8000810:	2310      	movs	r3, #16
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
||||||| 7f56823
 80007a4:	2310      	movs	r3, #16
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
=======
 800087c:	2310      	movs	r3, #16
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.PLL.PLLN = 336;
<<<<<<< HEAD
 8000814:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000818:	647b      	str	r3, [r7, #68]	; 0x44
||||||| 7f56823
 80007a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
=======
 8000880:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
<<<<<<< HEAD
 800081a:	2304      	movs	r3, #4
 800081c:	64bb      	str	r3, [r7, #72]	; 0x48
||||||| 7f56823
 80007ae:	2304      	movs	r3, #4
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48
=======
 8000886:	2304      	movs	r3, #4
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_OscInitStruct.PLL.PLLQ = 4;
<<<<<<< HEAD
 800081e:	2304      	movs	r3, #4
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
||||||| 7f56823
 80007b2:	2304      	movs	r3, #4
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
=======
 800088a:	2304      	movs	r3, #4
 800088c:	64fb      	str	r3, [r7, #76]	; 0x4c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fa26 	bl	8001c78 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x96>
||||||| 7f56823
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f94a 	bl	8001a54 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x96>
=======
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fa86 	bl	8001da4 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x96>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    Error_Handler();
<<<<<<< HEAD
 8000832:	f000 f96d 	bl	8000b10 <Error_Handler>
||||||| 7f56823
 80007c6:	f000 f8fb 	bl	80009c0 <Error_Handler>
=======
 800089e:	f000 f96d 	bl	8000b7c <Error_Handler>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000836:	230f      	movs	r3, #15
 8000838:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
=======
 80008a2:	230f      	movs	r3, #15
 80008a4:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
<<<<<<< HEAD
 800083a:	2302      	movs	r3, #2
 800083c:	613b      	str	r3, [r7, #16]
||||||| 7f56823
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
=======
 80008a6:	2302      	movs	r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
<<<<<<< HEAD
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
=======
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
<<<<<<< HEAD
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	61bb      	str	r3, [r7, #24]
=======
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
<<<<<<< HEAD
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
||||||| 7f56823
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
=======
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
<<<<<<< HEAD
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2102      	movs	r1, #2
 8000852:	4618      	mov	r0, r3
 8000854:	f001 fc80 	bl	8002158 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc2>
||||||| 7f56823
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fba4 	bl	8001f34 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc2>
=======
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2102      	movs	r1, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fce0 	bl	8002284 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xc2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    Error_Handler();
<<<<<<< HEAD
 800085e:	f000 f957 	bl	8000b10 <Error_Handler>
||||||| 7f56823
 80007f2:	f000 f8e5 	bl	80009c0 <Error_Handler>
=======
 80008ca:	f000 f957 	bl	8000b7c <Error_Handler>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
}
<<<<<<< HEAD
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	; 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_ADC1_Init>:
||||||| 7f56823
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_ADC1_Init>:
=======
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_ADC1_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
=======
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
||||||| 7f56823
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
=======
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_ADC1_Init+0xb4>)
 8000888:	4a28      	ldr	r2, [pc, #160]	; (800092c <MX_ADC1_Init+0xb8>)
 800088a:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0x78>)
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <MX_ADC1_Init+0x7c>)
 800081e:	601a      	str	r2, [r3, #0]
=======
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <MX_ADC1_Init+0xb4>)
 80008f4:	4a28      	ldr	r2, [pc, #160]	; (8000998 <MX_ADC1_Init+0xb8>)
 80008f6:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
<<<<<<< HEAD
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_ADC1_Init+0xb4>)
 800088e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000892:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_ADC1_Init+0x78>)
 8000822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000826:	605a      	str	r2, [r3, #4]
=======
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <MX_ADC1_Init+0xb4>)
 80008fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008fe:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
<<<<<<< HEAD
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_ADC1_Init+0xb4>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_ADC1_Init+0x78>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
=======
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.ScanConvMode = ENABLE;
<<<<<<< HEAD
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_ADC1_Init+0xb4>)
 800089c:	2201      	movs	r2, #1
 800089e:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_ADC1_Init+0x78>)
 8000830:	2201      	movs	r2, #1
 8000832:	611a      	str	r2, [r3, #16]
=======
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000908:	2201      	movs	r2, #1
 800090a:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.ContinuousConvMode = ENABLE;
<<<<<<< HEAD
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	761a      	strb	r2, [r3, #24]
||||||| 7f56823
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_ADC1_Init+0x78>)
 8000836:	2201      	movs	r2, #1
 8000838:	761a      	strb	r2, [r3, #24]
=======
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_ADC1_Init+0xb4>)
 800090e:	2201      	movs	r2, #1
 8000910:	761a      	strb	r2, [r3, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.DiscontinuousConvMode = DISABLE;
<<<<<<< HEAD
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2020 	strb.w	r2, [r3, #32]
||||||| 7f56823
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_ADC1_Init+0x78>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2020 	strb.w	r2, [r3, #32]
=======
 8000912:	4b20      	ldr	r3, [pc, #128]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2020 	strb.w	r2, [r3, #32]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
<<<<<<< HEAD
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
||||||| 7f56823
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_ADC1_Init+0x78>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_ADC1_Init+0xb4>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
<<<<<<< HEAD
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
||||||| 7f56823
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_ADC1_Init+0x78>)
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <MX_ADC1_Init+0x80>)
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <MX_ADC1_Init+0xbc>)
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
<<<<<<< HEAD
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	61da      	str	r2, [r3, #28]
||||||| 7f56823
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_ADC1_Init+0x78>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_ADC1_Init+0x78>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
=======
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_ADC1_Init+0xb4>)
 800092e:	2202      	movs	r2, #2
 8000930:	61da      	str	r2, [r3, #28]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.DMAContinuousRequests = DISABLE;
<<<<<<< HEAD
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
||||||| 7f56823
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_ADC1_Init+0x78>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
=======
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
<<<<<<< HEAD
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	615a      	str	r2, [r3, #20]
||||||| 7f56823
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_ADC1_Init+0x78>)
 8000864:	2201      	movs	r2, #1
 8000866:	615a      	str	r2, [r3, #20]
=======
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_ADC1_Init+0xb4>)
 800093c:	2201      	movs	r2, #1
 800093e:	615a      	str	r2, [r3, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
<<<<<<< HEAD
 80008d4:	4814      	ldr	r0, [pc, #80]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008d6:	f000 fb71 	bl	8000fbc <HAL_ADC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f916 	bl	8000b10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ADC1_Init+0xb4>)
 80008f6:	f000 fd0f 	bl	8001318 <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x90>
||||||| 7f56823
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_ADC1_Init+0x78>)
 800086a:	f000 fa95 	bl	8000d98 <HAL_ADC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x70>
=======
 8000940:	4814      	ldr	r0, [pc, #80]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000942:	f000 fb83 	bl	800104c <HAL_ADC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800094c:	f000 f916 	bl	8000b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000950:	2300      	movs	r3, #0
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_ADC1_Init+0xb4>)
 8000962:	f000 fd21 	bl	80013a8 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800096c:	f000 f906 	bl	8000b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000970:	2301      	movs	r3, #1
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_ADC1_Init+0xb4>)
 800097e:	f000 fd13 	bl	80013a8 <HAL_ADC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC1_Init+0xac>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    Error_Handler();
<<<<<<< HEAD
 8000900:	f000 f906 	bl	8000b10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000904:	2301      	movs	r3, #1
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_ADC1_Init+0xb4>)
 8000912:	f000 fd01 	bl	8001318 <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800091c:	f000 f8f8 	bl	8000b10 <Error_Handler>
  }
||||||| 7f56823
 8000874:	f000 f8a4 	bl	80009c0 <Error_Handler>
//  }
=======
 8000988:	f000 f8f8 	bl	8000b7c <Error_Handler>
  }
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000a0 	.word	0x200000a0
 800092c:	40012000 	.word	0x40012000
 8000930:	0f000001 	.word	0x0f000001

08000934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART1_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800096c:	f001 fde6 	bl	800253c <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f8cb 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000e8 	.word	0x200000e8
 8000984:	40011000 	.word	0x40011000

08000988 <MX_USART2_UART_Init>:
||||||| 7f56823
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000a0 	.word	0x200000a0
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_USART2_UART_Init>:
=======
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000a0 	.word	0x200000a0
 8000998:	40012000 	.word	0x40012000
 800099c:	0f000001 	.word	0x0f000001

080009a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART1_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d8:	f001 fe46 	bl	8002668 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 f8cb 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000e8 	.word	0x200000e8
 80009f0:	40011000 	.word	0x40011000

080009f4 <MX_USART2_UART_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
||||||| 7f56823
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
=======
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART2_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
=======
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart2.Init.BaudRate = 115200;
<<<<<<< HEAD
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
=======
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
<<<<<<< HEAD
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
=======
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart2.Init.StopBits = UART_STOPBITS_1;
<<<<<<< HEAD
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
||||||| 7f56823
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
=======
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart2.Init.Parity = UART_PARITY_NONE;
<<<<<<< HEAD
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
=======
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart2.Init.Mode = UART_MODE_TX_RX;
<<<<<<< HEAD
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
||||||| 7f56823
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
=======
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
<<<<<<< HEAD
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
||||||| 7f56823
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
=======
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
<<<<<<< HEAD
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
||||||| 7f56823
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
=======
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if (HAL_UART_Init(&huart2) != HAL_OK)
<<<<<<< HEAD
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f001 fdbc 	bl	800253c <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x46>
||||||| 7f56823
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f001 fd28 	bl	8002318 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
=======
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f001 fe1c 	bl	8002668 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    Error_Handler();
<<<<<<< HEAD
 80009ca:	f000 f8a1 	bl	8000b10 <Error_Handler>
||||||| 7f56823
 80008ce:	f000 f877 	bl	80009c0 <Error_Handler>
=======
 8000a36:	f000 f8a1 	bl	8000b7c <Error_Handler>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000168 	.word	0x20000168
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART6_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART6_UART_Init+0x4c>)
 8000a14:	f001 fd92 	bl	800253c <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f877 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
||||||| 7f56823
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000e8 	.word	0x200000e8
 80008dc:	40004400 	.word	0x40004400
=======
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000168 	.word	0x20000168
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_USART6_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART6_UART_Init+0x4c>)
 8000a80:	f001 fdf2 	bl	8002668 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 f877 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000128 	.word	0x20000128
 8000a2c:	40011400 	.word	0x40011400

08000a30 <MX_GPIO_Init>:
||||||| 7f56823
080008e0 <MX_GPIO_Init>:
=======
  /* USER CODE END USART6_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000128 	.word	0x20000128
 8000a98:	40011400 	.word	0x40011400

08000a9c <MX_GPIO_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
||||||| 7f56823
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
=======
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
=======
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a2c      	ldr	r2, [pc, #176]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
||||||| 7f56823
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a2c      	ldr	r2, [pc, #176]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
=======
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a2c      	ldr	r2, [pc, #176]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  __HAL_RCC_GPIOH_CLK_ENABLE();
<<<<<<< HEAD
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
||||||| 7f56823
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
=======
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
||||||| 7f56823
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
=======
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
||||||| 7f56823
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
=======
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2120      	movs	r1, #32
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000abc:	f001 f8c2 	bl	8001c44 <HAL_GPIO_WritePin>
||||||| 7f56823
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <MX_GPIO_Init+0xd4>)
 800096c:	f001 f858 	bl	8001a20 <HAL_GPIO_WritePin>
=======
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	4812      	ldr	r0, [pc, #72]	; (8000b70 <MX_GPIO_Init+0xd4>)
 8000b28:	f001 f922 	bl	8001d70 <HAL_GPIO_WritePin>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
<<<<<<< HEAD
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	617b      	str	r3, [r7, #20]
=======
 8000b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b30:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
<<<<<<< HEAD
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_GPIO_Init+0xd8>)
 8000ac8:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_GPIO_Init+0xd8>)
 8000978:	61bb      	str	r3, [r7, #24]
=======
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_GPIO_Init+0xd8>)
 8000b34:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
||||||| 7f56823
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
=======
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_GPIO_Init+0xdc>)
 8000ad6:	f000 ff33 	bl	8001940 <HAL_GPIO_Init>
||||||| 7f56823
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_GPIO_Init+0xdc>)
 8000986:	f000 fec9 	bl	800171c <HAL_GPIO_Init>
=======
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_GPIO_Init+0xdc>)
 8000b42:	f000 ff93 	bl	8001a6c <HAL_GPIO_Init>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
<<<<<<< HEAD
 8000ada:	2320      	movs	r3, #32
 8000adc:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 800098a:	2320      	movs	r3, #32
 800098c:	617b      	str	r3, [r7, #20]
=======
 8000b46:	2320      	movs	r3, #32
 8000b48:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
<<<<<<< HEAD
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
=======
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
||||||| 7f56823
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
=======
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
||||||| 7f56823
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
=======
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000af2:	f000 ff25 	bl	8001940 <HAL_GPIO_Init>
||||||| 7f56823
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0xd4>)
 80009a2:	f000 febb 	bl	800171c <HAL_GPIO_Init>
=======
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_GPIO_Init+0xd4>)
 8000b5e:	f000 ff85 	bl	8001a6c <HAL_GPIO_Init>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

}
<<<<<<< HEAD
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	40020800 	.word	0x40020800

08000b10 <Error_Handler>:
||||||| 7f56823
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	10210000 	.word	0x10210000
 80009bc:	40020800 	.word	0x40020800

080009c0 <Error_Handler>:
=======
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	10210000 	.word	0x10210000
 8000b78:	40020800 	.word	0x40020800

08000b7c <Error_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
||||||| 7f56823
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
=======
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000b14:	b672      	cpsid	i
||||||| 7f56823
 80009c4:	b672      	cpsid	i
=======
 8000b80:	b672      	cpsid	i
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000b16:	e7fe      	b.n	8000b16 <Error_Handler+0x6>
||||||| 7f56823
 80009c6:	e7fe      	b.n	80009c6 <Error_Handler+0x6>
=======
 8000b82:	e7fe      	b.n	8000b82 <Error_Handler+0x6>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000b18 <HAL_MspInit>:
||||||| 7f56823
080009c8 <HAL_MspInit>:
=======
08000b84 <HAL_MspInit>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
||||||| 7f56823
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
=======
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
||||||| 7f56823
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
=======
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
||||||| 7f56823
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
=======
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
<<<<<<< HEAD
 8000b56:	2007      	movs	r0, #7
 8000b58:	f000 febe 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>
||||||| 7f56823
 8000a06:	2007      	movs	r0, #7
 8000a08:	f000 fe54 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>
=======
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f000 feee 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
||||||| 7f56823
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
=======
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000b68 <HAL_ADC_MspInit>:
||||||| 7f56823
08000a18 <HAL_ADC_MspInit>:
=======
08000bd4 <HAL_ADC_MspInit>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
=======
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
=======
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if(hadc->Instance==ADC1)
<<<<<<< HEAD
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_ADC_MspInit+0x7c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d127      	bne.n	8000bda <HAL_ADC_MspInit+0x72>
||||||| 7f56823
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_ADC_MspInit+0x7c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d127      	bne.n	8000a8a <HAL_ADC_MspInit+0x72>
=======
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <HAL_ADC_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d127      	bne.n	8000c46 <HAL_ADC_MspInit+0x72>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
||||||| 7f56823
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
=======
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_ADC_MspInit+0x80>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
||||||| 7f56823
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
=======
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
<<<<<<< HEAD
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 8000a72:	2303      	movs	r3, #3
 8000a74:	617b      	str	r3, [r7, #20]
=======
 8000c2e:	2303      	movs	r3, #3
 8000c30:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
<<<<<<< HEAD
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8000a76:	2303      	movs	r3, #3
 8000a78:	61bb      	str	r3, [r7, #24]
=======
 8000c32:	2303      	movs	r3, #3
 8000c34:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
||||||| 7f56823
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
=======
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_ADC_MspInit+0x84>)
 8000bd6:	f000 feb3 	bl	8001940 <HAL_GPIO_Init>
||||||| 7f56823
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a86:	f000 fe49 	bl	800171c <HAL_GPIO_Init>
=======
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_ADC_MspInit+0x84>)
 8000c42:	f000 ff13 	bl	8001a6c <HAL_GPIO_Init>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40012000 	.word	0x40012000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_UART_MspInit>:
||||||| 7f56823
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40012000 	.word	0x40012000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_UART_MspInit>:
=======
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012000 	.word	0x40012000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_UART_MspInit>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
=======
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	; 0x38
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a4b      	ldr	r2, [pc, #300]	; (8000d3c <HAL_UART_MspInit+0x14c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12d      	bne.n	8000c6e <HAL_UART_MspInit+0x7e>
||||||| 7f56823
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_UART_MspInit+0x84>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12b      	bne.n	8000b1a <HAL_UART_MspInit+0x7a>
=======
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a4f      	ldr	r2, [pc, #316]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12d      	bne.n	8000cda <HAL_UART_MspInit+0x7e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
<<<<<<< HEAD
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
 8000c16:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	623b      	str	r3, [r7, #32]
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
||||||| 7f56823
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
=======
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a4d      	ldr	r2, [pc, #308]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	6a3b      	ldr	r3, [r7, #32]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
||||||| 7f56823
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
=======
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    */
<<<<<<< HEAD
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
||||||| 7f56823
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000afa:	230c      	movs	r3, #12
 8000afc:	617b      	str	r3, [r7, #20]
=======
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
<<<<<<< HEAD
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
||||||| 7f56823
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
=======
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
||||||| 7f56823
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
=======
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
<<<<<<< HEAD
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
||||||| 7f56823
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4837      	ldr	r0, [pc, #220]	; (8000d44 <HAL_UART_MspInit+0x154>)
 8000c68:	f000 fe6a 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */
||||||| 7f56823
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <HAL_UART_MspInit+0x8c>)
 8000b16:	f000 fe01 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */
=======
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	483b      	ldr	r0, [pc, #236]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000cd4:	f000 feca 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* USER CODE END USART6_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000c6c:	e062      	b.n	8000d34 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a35      	ldr	r2, [pc, #212]	; (8000d48 <HAL_UART_MspInit+0x158>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d12c      	bne.n	8000cd2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481e      	ldr	r0, [pc, #120]	; (8000d44 <HAL_UART_MspInit+0x154>)
 8000ccc:	f000 fe38 	bl	8001940 <HAL_GPIO_Init>
}
 8000cd0:	e030      	b.n	8000d34 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a1d      	ldr	r2, [pc, #116]	; (8000d4c <HAL_UART_MspInit+0x15c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d12b      	bne.n	8000d34 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000ce6:	f043 0320 	orr.w	r3, r3, #32
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 0320 	and.w	r3, r3, #32
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_UART_MspInit+0x150>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d24:	2308      	movs	r3, #8
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <HAL_UART_MspInit+0x160>)
 8000d30:	f000 fe06 	bl	8001940 <HAL_GPIO_Init>
}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40011400 	.word	0x40011400
 8000d50:	40020800 	.word	0x40020800

08000d54 <NMI_Handler>:
||||||| 7f56823
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40004400 	.word	0x40004400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <NMI_Handler>:
=======
 8000cd8:	e06a      	b.n	8000db0 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <HAL_UART_MspInit+0x168>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d12c      	bne.n	8000d3e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4822      	ldr	r0, [pc, #136]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d38:	f000 fe98 	bl	8001a6c <HAL_GPIO_Init>
}
 8000d3c:	e038      	b.n	8000db0 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_UART_MspInit+0x16c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d133      	bne.n	8000db0 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6453      	str	r3, [r2, #68]	; 0x44
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d80:	23c0      	movs	r3, #192	; 0xc0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d90:	2308      	movs	r3, #8
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <HAL_UART_MspInit+0x170>)
 8000d9c:	f000 fe66 	bl	8001a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	2047      	movs	r0, #71	; 0x47
 8000da6:	f000 fe08 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000daa:	2047      	movs	r0, #71	; 0x47
 8000dac:	f000 fe21 	bl	80019f2 <HAL_NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	3738      	adds	r7, #56	; 0x38
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40011400 	.word	0x40011400
 8000dcc:	40020800 	.word	0x40020800

08000dd0 <NMI_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
=======
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>
||||||| 7f56823
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>
=======
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d5a <HardFault_Handler>:
||||||| 7f56823
08000b36 <HardFault_Handler>:
=======
08000dd6 <HardFault_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
=======
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>
||||||| 7f56823
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>
=======
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d60 <MemManage_Handler>:
||||||| 7f56823
08000b3c <MemManage_Handler>:
=======
08000ddc <MemManage_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
=======
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>
||||||| 7f56823
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>
=======
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d66 <BusFault_Handler>:
||||||| 7f56823
08000b42 <BusFault_Handler>:
=======
08000de2 <BusFault_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
=======
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>
||||||| 7f56823
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>
=======
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d6c <UsageFault_Handler>:
||||||| 7f56823
08000b48 <UsageFault_Handler>:
=======
08000de8 <UsageFault_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
=======
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>
||||||| 7f56823
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>
=======
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d72 <SVC_Handler>:
||||||| 7f56823
08000b4e <SVC_Handler>:
=======
08000dee <SVC_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
=======
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
||||||| 7f56823
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
=======
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d80 <DebugMon_Handler>:
||||||| 7f56823
08000b5c <DebugMon_Handler>:
=======
08000dfc <DebugMon_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
=======
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
||||||| 7f56823
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
=======
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d8e <PendSV_Handler>:
||||||| 7f56823
08000b6a <PendSV_Handler>:
=======
08000e0a <PendSV_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
=======
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
||||||| 7f56823
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
=======
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000d9c <SysTick_Handler>:
||||||| 7f56823
08000b78 <SysTick_Handler>:
=======
08000e18 <SysTick_Handler>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
=======
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000da0:	f000 f8ca 	bl	8000f38 <HAL_IncTick>
||||||| 7f56823
 8000b7c:	f000 f8ca 	bl	8000d14 <HAL_IncTick>
=======
 8000e1c:	f000 f8d4 	bl	8000fc8 <HAL_IncTick>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_sbrk>:
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
 8000dd8:	f002 f85c 	bl	8002e94 <__errno>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	230c      	movs	r3, #12
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000094 	.word	0x20000094
 8000e10:	200001b0 	.word	0x200001b0

08000e14 <SystemInit>:
||||||| 7f56823
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_sbrk>:
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
 8000bb4:	f002 f85c 	bl	8002c70 <__errno>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	230c      	movs	r3, #12
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20020000 	.word	0x20020000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	20000094 	.word	0x20000094
 8000bec:	20000130 	.word	0x20000130

08000bf0 <SystemInit>:
=======
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USART6_IRQHandler+0x10>)
 8000e2a:	f001 fda9 	bl	8002980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000128 	.word	0x20000128

08000e38 <_sbrk>:
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
 8000e68:	f002 fb90 	bl	800358c <__errno>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	230c      	movs	r3, #12
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	20000094 	.word	0x20000094
 8000ea0:	200001b0 	.word	0x200001b0

08000ea4 <SystemInit>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
=======
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <SystemInit+0x28>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <SystemInit+0x28>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
||||||| 7f56823
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <SystemInit+0x28>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <SystemInit+0x28>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <SystemInit+0x28>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <SystemInit+0x28>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SystemInit+0x28>)
 8000e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2e:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SystemInit+0x28>)
 8000c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0a:	609a      	str	r2, [r3, #8]
=======
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SystemInit+0x28>)
 8000eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ebe:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
#endif
}
<<<<<<< HEAD
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x14>
 8000e44:	2100      	movs	r1, #0
 8000e46:	e003      	b.n	8000e50 <LoopCopyDataInit>

08000e48 <CopyDataInit>:
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopFillZerobss+0x18>)
 8000e4a:	585b      	ldr	r3, [r3, r1]
 8000e4c:	5043      	str	r3, [r0, r1]
 8000e4e:	3104      	adds	r1, #4

08000e50 <LoopCopyDataInit>:
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <LoopFillZerobss+0x1c>)
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <LoopFillZerobss+0x20>)
 8000e54:	1842      	adds	r2, r0, r1
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3f6      	bcc.n	8000e48 <CopyDataInit>
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x24>)
 8000e5c:	e002      	b.n	8000e64 <LoopFillZerobss>

08000e5e <FillZerobss>:
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f842 3b04 	str.w	r3, [r2], #4

08000e64 <LoopFillZerobss>:
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <LoopFillZerobss+0x28>)
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d3f9      	bcc.n	8000e5e <FillZerobss>
 8000e6a:	f7ff ffd3 	bl	8000e14 <SystemInit>
 8000e6e:	f002 f817 	bl	8002ea0 <__libc_init_array>
 8000e72:	f7ff fbcd 	bl	8000610 <main>
 8000e76:	4770      	bx	lr
 8000e78:	20020000 	.word	0x20020000
 8000e7c:	08003780 	.word	0x08003780
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000070 	.word	0x20000070
 8000e88:	20000070 	.word	0x20000070
 8000e8c:	200001b0 	.word	0x200001b0

08000e90 <ADC_IRQHandler>:
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
||||||| 7f56823
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x14>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e003      	b.n	8000c2c <LoopCopyDataInit>

08000c24 <CopyDataInit>:
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <LoopFillZerobss+0x18>)
 8000c26:	585b      	ldr	r3, [r3, r1]
 8000c28:	5043      	str	r3, [r0, r1]
 8000c2a:	3104      	adds	r1, #4

08000c2c <LoopCopyDataInit>:
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <LoopFillZerobss+0x1c>)
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <LoopFillZerobss+0x20>)
 8000c30:	1842      	adds	r2, r0, r1
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3f6      	bcc.n	8000c24 <CopyDataInit>
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x24>)
 8000c38:	e002      	b.n	8000c40 <LoopFillZerobss>

08000c3a <FillZerobss>:
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f842 3b04 	str.w	r3, [r2], #4

08000c40 <LoopFillZerobss>:
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <LoopFillZerobss+0x28>)
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3f9      	bcc.n	8000c3a <FillZerobss>
 8000c46:	f7ff ffd3 	bl	8000bf0 <SystemInit>
 8000c4a:	f002 f817 	bl	8002c7c <__libc_init_array>
 8000c4e:	f7ff fcdd 	bl	800060c <main>
 8000c52:	4770      	bx	lr
 8000c54:	20020000 	.word	0x20020000
 8000c58:	0800355c 	.word	0x0800355c
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000070 	.word	0x20000070
 8000c64:	20000070 	.word	0x20000070
 8000c68:	20000130 	.word	0x20000130

08000c6c <ADC_IRQHandler>:
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
=======
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x14>
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x18>)
 8000eda:	585b      	ldr	r3, [r3, r1]
 8000edc:	5043      	str	r3, [r0, r1]
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoopFillZerobss+0x1c>)
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopFillZerobss+0x20>)
 8000ee4:	1842      	adds	r2, r0, r1
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x24>)
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <LoopFillZerobss+0x28>)
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>
 8000efa:	f7ff ffd3 	bl	8000ea4 <SystemInit>
 8000efe:	f002 fb4b 	bl	8003598 <__libc_init_array>
 8000f02:	f7ff fb7f 	bl	8000604 <main>
 8000f06:	4770      	bx	lr
 8000f08:	20020000 	.word	0x20020000
 8000f0c:	08003e78 	.word	0x08003e78
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000070 	.word	0x20000070
 8000f18:	20000070 	.word	0x20000070
 8000f1c:	200001b0 	.word	0x200001b0

08000f20 <ADC_IRQHandler>:
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	...

<<<<<<< HEAD
08000e94 <HAL_Init>:
||||||| 7f56823
08000c70 <HAL_Init>:
=======
08000f24 <HAL_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
=======
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
<<<<<<< HEAD
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
=======
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
=======
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
=======
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 fd0b 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>
||||||| 7f56823
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fd0b 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>
=======
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 fd29 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
<<<<<<< HEAD
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>
||||||| 7f56823
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>
=======
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Init the low level hardware */
  HAL_MspInit();
<<<<<<< HEAD
 8000ec8:	f7ff fe26 	bl	8000b18 <HAL_MspInit>
||||||| 7f56823
 8000ca4:	f7ff fe90 	bl	80009c8 <HAL_MspInit>
=======
 8000f58:	f7ff fe14 	bl	8000b84 <HAL_MspInit>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000ecc:	2300      	movs	r3, #0
||||||| 7f56823
 8000ca8:	2300      	movs	r3, #0
=======
 8000f5c:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00
||||||| 7f56823
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00
=======
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000ed8 <HAL_InitTick>:
||||||| 7f56823
08000cb4 <HAL_InitTick>:
=======
08000f68 <HAL_InitTick>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
=======
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
<<<<<<< HEAD
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fd15 	bl	8001926 <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
||||||| 7f56823
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fd15 	bl	8001702 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
=======
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fd41 	bl	8001a0e <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
||||||| 7f56823
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
=======
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
||||||| 7f56823
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
=======
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
<<<<<<< HEAD
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 fceb 	bl	80018ee <HAL_NVIC_SetPriority>
||||||| 7f56823
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 fceb 	bl	80016ca <HAL_NVIC_SetPriority>
=======
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 fd09 	bl	80019ba <HAL_NVIC_SetPriority>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    uwTickPrio = TickPriority;
<<<<<<< HEAD
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
=======
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
||||||| 7f56823
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
=======
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    return HAL_ERROR;
<<<<<<< HEAD
 8000f22:	2301      	movs	r3, #1
||||||| 7f56823
 8000cfe:	2301      	movs	r3, #1
=======
 8000fb2:	2301      	movs	r3, #1
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
||||||| 7f56823
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
=======
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
=======
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uwTick += uwTickFreq;
<<<<<<< HEAD
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
=======
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200001a8 	.word	0x200001a8

08000f60 <HAL_GetTick>:
||||||| 7f56823
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000128 	.word	0x20000128

08000d3c <HAL_GetTick>:
=======
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200001a8 	.word	0x200001a8

08000ff0 <HAL_GetTick>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
||||||| 7f56823
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
=======
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  return uwTick;
<<<<<<< HEAD
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
||||||| 7f56823
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
=======
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200001a8 	.word	0x200001a8

08000f78 <HAL_Delay>:
||||||| 7f56823
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000128 	.word	0x20000128

08000d54 <HAL_Delay>:
=======
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200001a8 	.word	0x200001a8

08001008 <HAL_Delay>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
=======
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
||||||| 7f56823
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
=======
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t wait = Delay;
<<<<<<< HEAD
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]
=======
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
<<<<<<< HEAD
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
||||||| 7f56823
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
=======
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    wait += (uint32_t)(uwTickFreq);
<<<<<<< HEAD
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_Delay+0x40>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_Delay+0x40>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
=======
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_Delay+0x40>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  while((HAL_GetTick() - tickstart) < wait)
<<<<<<< HEAD
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
||||||| 7f56823
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
=======
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
  }
}
<<<<<<< HEAD
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000008 	.word	0x20000008
||||||| 7f56823
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000008 	.word	0x20000008
=======
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000008 	.word	0x20000008
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08000fbc <HAL_ADC_Init>:
||||||| 7f56823
08000d98 <HAL_ADC_Init>:
=======
0800104c <HAL_ADC_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
=======
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
<<<<<<< HEAD
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
||||||| 7f56823
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
=======
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Check ADC handle */
  if(hadc == NULL)
<<<<<<< HEAD
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x16>
||||||| 7f56823
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_ADC_Init+0x16>
=======
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x16>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e033      	b.n	800103a <HAL_ADC_Init+0x7e>
||||||| 7f56823
 8000daa:	2301      	movs	r3, #1
 8000dac:	e033      	b.n	8000e16 <HAL_ADC_Init+0x7e>
=======
 800105e:	2301      	movs	r3, #1
 8001060:	e033      	b.n	80010ca <HAL_ADC_Init+0x7e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <HAL_ADC_Init+0x32>
||||||| 7f56823
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <HAL_ADC_Init+0x32>
=======
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	2b00      	cmp	r3, #0
 8001068:	d109      	bne.n	800107e <HAL_ADC_Init+0x32>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fdc4 	bl	8000b68 <HAL_ADC_MspInit>
||||||| 7f56823
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fe2e 	bl	8000a18 <HAL_ADC_MspInit>
=======
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fdb2 	bl	8000bd4 <HAL_ADC_MspInit>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
||||||| 7f56823
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_ADC_Init+0x70>
||||||| 7f56823
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d118      	bne.n	8000e08 <HAL_ADC_Init+0x70>
=======
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	d118      	bne.n	80010bc <HAL_ADC_Init+0x70>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001002:	f023 0302 	bic.w	r3, r3, #2
 8001006:	f043 0202 	orr.w	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dde:	f023 0302 	bic.w	r3, r3, #2
 8000de2:	f043 0202 	orr.w	r2, r3, #2
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001092:	f023 0302 	bic.w	r3, r3, #2
 8001096:	f043 0202 	orr.w	r2, r3, #2
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fab4 	bl	800157c <ADC_Init>
||||||| 7f56823
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fab4 	bl	8001358 <ADC_Init>
=======
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 fab4 	bl	800160c <ADC_Init>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	; 0x44
||||||| 7f56823
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
 800102a:	e001      	b.n	8001030 <HAL_ADC_Init+0x74>
||||||| 7f56823
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	f043 0201 	orr.w	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
 8000e06:	e001      	b.n	8000e0c <HAL_ADC_Init+0x74>
=======
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f023 0303 	bic.w	r3, r3, #3
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
 80010ba:	e001      	b.n	80010c0 <HAL_ADC_Init+0x74>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
||||||| 7f56823
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
=======
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8001038:	7bfb      	ldrb	r3, [r7, #15]
||||||| 7f56823
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
=======
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
||||||| 7f56823
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
=======
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	...

<<<<<<< HEAD
08001044 <HAL_ADC_Start>:
||||||| 7f56823
08000e20 <HAL_ADC_Start>:
=======
080010d4 <HAL_ADC_Start>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
=======
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  __IO uint32_t counter = 0U;
<<<<<<< HEAD
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
=======
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_ADC_Start+0x1a>
 800105a:	2302      	movs	r3, #2
 800105c:	e08a      	b.n	8001174 <HAL_ADC_Start+0x130>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Start+0x1a>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e08a      	b.n	8000f50 <HAL_ADC_Start+0x130>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Start+0x1a>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e08a      	b.n	8001204 <HAL_ADC_Start+0x130>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d018      	beq.n	80010a6 <HAL_ADC_Start+0x62>
||||||| 7f56823
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d018      	beq.n	8000e82 <HAL_ADC_Start+0x62>
=======
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b01      	cmp	r3, #1
 8001102:	d018      	beq.n	8001136 <HAL_ADC_Start+0x62>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
<<<<<<< HEAD
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0201 	orr.w	r2, r2, #1
 8000e5e:	609a      	str	r2, [r3, #8]
=======
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001084:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <HAL_ADC_Start+0x13c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a3e      	ldr	r2, [pc, #248]	; (8001184 <HAL_ADC_Start+0x140>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9a      	lsrs	r2, r3, #18
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8000e60:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <HAL_ADC_Start+0x13c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a3e      	ldr	r2, [pc, #248]	; (8000f60 <HAL_ADC_Start+0x140>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9a      	lsrs	r2, r3, #18
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
=======
 8001114:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <HAL_ADC_Start+0x13c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <HAL_ADC_Start+0x140>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	0c9a      	lsrs	r2, r3, #18
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    while(counter != 0U)
<<<<<<< HEAD
 8001098:	e002      	b.n	80010a0 <HAL_ADC_Start+0x5c>
||||||| 7f56823
 8000e74:	e002      	b.n	8000e7c <HAL_ADC_Start+0x5c>
=======
 8001128:	e002      	b.n	8001130 <HAL_ADC_Start+0x5c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      counter--;
<<<<<<< HEAD
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	3b01      	subs	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
=======
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3b01      	subs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    while(counter != 0U)
<<<<<<< HEAD
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f9      	bne.n	800109a <HAL_ADC_Start+0x56>
||||||| 7f56823
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f9      	bne.n	8000e76 <HAL_ADC_Start+0x56>
=======
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f9      	bne.n	800112a <HAL_ADC_Start+0x56>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d15e      	bne.n	8001172 <HAL_ADC_Start+0x12e>
||||||| 7f56823
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d15e      	bne.n	8000f4e <HAL_ADC_Start+0x12e>
=======
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d15e      	bne.n	8001202 <HAL_ADC_Start+0x12e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_ADC_Start+0xa2>
||||||| 7f56823
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <HAL_ADC_Start+0xa2>
=======
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <HAL_ADC_Start+0xa2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
<<<<<<< HEAD
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800116e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010f2:	d106      	bne.n	8001102 <HAL_ADC_Start+0xbe>
||||||| 7f56823
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ece:	d106      	bne.n	8000ede <HAL_ADC_Start+0xbe>
=======
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001182:	d106      	bne.n	8001192 <HAL_ADC_Start+0xbe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
<<<<<<< HEAD
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	f023 0206 	bic.w	r2, r3, #6
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001100:	e002      	b.n	8001108 <HAL_ADC_Start+0xc4>
||||||| 7f56823
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	f023 0206 	bic.w	r2, r3, #6
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	645a      	str	r2, [r3, #68]	; 0x44
 8000edc:	e002      	b.n	8000ee4 <HAL_ADC_Start+0xc4>
=======
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	f023 0206 	bic.w	r2, r3, #6
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	645a      	str	r2, [r3, #68]	; 0x44
 8001190:	e002      	b.n	8001198 <HAL_ADC_Start+0xc4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	; 0x44
||||||| 7f56823
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_ADC_Start+0x144>)
 8001112:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_ADC_Start+0x144>)
 8000eee:	60fb      	str	r3, [r7, #12]
=======
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_ADC_Start+0x144>)
 80011a2:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800111c:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ef8:	601a      	str	r2, [r3, #0]
=======
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ac:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
<<<<<<< HEAD
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_ADC_Start+0x106>
||||||| 7f56823
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10f      	bne.n	8000f26 <HAL_ADC_Start+0x106>
=======
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <HAL_ADC_Start+0x106>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d11c      	bne.n	8001172 <HAL_ADC_Start+0x12e>
||||||| 7f56823
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11c      	bne.n	8000f4e <HAL_ADC_Start+0x12e>
=======
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d11c      	bne.n	8001202 <HAL_ADC_Start+0x12e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
<<<<<<< HEAD
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e013      	b.n	8001172 <HAL_ADC_Start+0x12e>
||||||| 7f56823
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	e013      	b.n	8000f4e <HAL_ADC_Start+0x12e>
=======
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	e013      	b.n	8001202 <HAL_ADC_Start+0x12e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_ADC_Start+0x148>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d10e      	bne.n	8001172 <HAL_ADC_Start+0x12e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d107      	bne.n	8001172 <HAL_ADC_Start+0x12e>
||||||| 7f56823
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_ADC_Start+0x148>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d10e      	bne.n	8000f4e <HAL_ADC_Start+0x12e>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d107      	bne.n	8000f4e <HAL_ADC_Start+0x12e>
=======
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_ADC_Start+0x148>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10e      	bne.n	8001202 <HAL_ADC_Start+0x12e>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d107      	bne.n	8001202 <HAL_ADC_Start+0x12e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
<<<<<<< HEAD
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001170:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f4c:	609a      	str	r2, [r3, #8]
=======
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001200:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001172:	2300      	movs	r3, #0
||||||| 7f56823
 8000f4e:	2300      	movs	r3, #0
=======
 8001202:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000000 	.word	0x20000000
 8001184:	431bde83 	.word	0x431bde83
 8001188:	40012300 	.word	0x40012300
 800118c:	40012000 	.word	0x40012000

08001190 <HAL_ADC_Stop>:
||||||| 7f56823
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	40012300 	.word	0x40012300
 8000f68:	40012000 	.word	0x40012000

08000f6c <HAL_ADC_Stop>:
=======
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000000 	.word	0x20000000
 8001214:	431bde83 	.word	0x431bde83
 8001218:	40012300 	.word	0x40012300
 800121c:	40012000 	.word	0x40012000

08001220 <HAL_ADC_Stop>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
=======
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Stop+0x16>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e021      	b.n	80011ea <HAL_ADC_Stop+0x5a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_Stop+0x16>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e021      	b.n	8000fc6 <HAL_ADC_Stop+0x5a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Stop+0x16>
 8001232:	2302      	movs	r3, #2
 8001234:	e021      	b.n	800127a <HAL_ADC_Stop+0x5a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
<<<<<<< HEAD
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0201 	bic.w	r2, r2, #1
 80011bc:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	609a      	str	r2, [r3, #8]
=======
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_Stop+0x50>
||||||| 7f56823
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d109      	bne.n	8000fbc <HAL_ADC_Stop+0x50>
=======
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_ADC_Stop+0x50>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80011e8:	2300      	movs	r3, #0
||||||| 7f56823
 8000fc4:	2300      	movs	r3, #0
=======
 8001278:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
||||||| 7f56823
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
=======
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
080011f6 <HAL_ADC_PollForConversion>:
||||||| 7f56823
08000fd2 <HAL_ADC_PollForConversion>:
=======
08001286 <HAL_ADC_PollForConversion>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
<<<<<<< HEAD
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
||||||| 7f56823
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
=======
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t tickstart = 0U;
<<<<<<< HEAD
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
=======
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< HEAD
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d113      	bne.n	800123c <HAL_ADC_PollForConversion+0x46>
||||||| 7f56823
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fee:	d113      	bne.n	8001018 <HAL_ADC_PollForConversion+0x46>
=======
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a2:	d113      	bne.n	80012cc <HAL_ADC_PollForConversion+0x46>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
<<<<<<< HEAD
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
||||||| 7f56823
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
=======
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< HEAD
 800121e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001222:	d10b      	bne.n	800123c <HAL_ADC_PollForConversion+0x46>
||||||| 7f56823
 8000ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_PollForConversion+0x46>
=======
 80012ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b2:	d10b      	bne.n	80012cc <HAL_ADC_PollForConversion+0x46>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f043 0220 	orr.w	r2, r3, #32
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f043 0220 	orr.w	r2, r3, #32
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f043 0220 	orr.w	r2, r3, #32
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    return HAL_ERROR;
<<<<<<< HEAD
 8001238:	2301      	movs	r3, #1
 800123a:	e05c      	b.n	80012f6 <HAL_ADC_PollForConversion+0x100>
||||||| 7f56823
 8001014:	2301      	movs	r3, #1
 8001016:	e05c      	b.n	80010d2 <HAL_ADC_PollForConversion+0x100>
=======
 80012c8:	2301      	movs	r3, #1
 80012ca:	e05c      	b.n	8001386 <HAL_ADC_PollForConversion+0x100>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 800123c:	f7ff fe90 	bl	8000f60 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]
||||||| 7f56823
 8001018:	f7ff fe90 	bl	8000d3c <HAL_GetTick>
 800101c:	60f8      	str	r0, [r7, #12]
=======
 80012cc:	f7ff fe90 	bl	8000ff0 <HAL_GetTick>
 80012d0:	60f8      	str	r0, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
<<<<<<< HEAD
 8001242:	e01a      	b.n	800127a <HAL_ADC_PollForConversion+0x84>
||||||| 7f56823
 800101e:	e01a      	b.n	8001056 <HAL_ADC_PollForConversion+0x84>
=======
 80012d2:	e01a      	b.n	800130a <HAL_ADC_PollForConversion+0x84>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124a:	d016      	beq.n	800127a <HAL_ADC_PollForConversion+0x84>
||||||| 7f56823
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001026:	d016      	beq.n	8001056 <HAL_ADC_PollForConversion+0x84>
=======
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012da:	d016      	beq.n	800130a <HAL_ADC_PollForConversion+0x84>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
<<<<<<< HEAD
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_ADC_PollForConversion+0x6c>
 8001252:	f7ff fe85 	bl	8000f60 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d20b      	bcs.n	800127a <HAL_ADC_PollForConversion+0x84>
||||||| 7f56823
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <HAL_ADC_PollForConversion+0x6c>
 800102e:	f7ff fe85 	bl	8000d3c <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d20b      	bcs.n	8001056 <HAL_ADC_PollForConversion+0x84>
=======
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_ADC_PollForConversion+0x6c>
 80012e2:	f7ff fe85 	bl	8000ff0 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d20b      	bcs.n	800130a <HAL_ADC_PollForConversion+0x84>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
<<<<<<< HEAD
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f043 0204 	orr.w	r2, r3, #4
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f043 0204 	orr.w	r2, r3, #4
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f043 0204 	orr.w	r2, r3, #4
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        
        return HAL_TIMEOUT;
<<<<<<< HEAD
 8001276:	2303      	movs	r3, #3
 8001278:	e03d      	b.n	80012f6 <HAL_ADC_PollForConversion+0x100>
||||||| 7f56823
 8001052:	2303      	movs	r3, #3
 8001054:	e03d      	b.n	80010d2 <HAL_ADC_PollForConversion+0x100>
=======
 8001306:	2303      	movs	r3, #3
 8001308:	e03d      	b.n	8001386 <HAL_ADC_PollForConversion+0x100>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
<<<<<<< HEAD
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d1dd      	bne.n	8001244 <HAL_ADC_PollForConversion+0x4e>
||||||| 7f56823
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b02      	cmp	r3, #2
 8001062:	d1dd      	bne.n	8001020 <HAL_ADC_PollForConversion+0x4e>
=======
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b02      	cmp	r3, #2
 8001316:	d1dd      	bne.n	80012d4 <HAL_ADC_PollForConversion+0x4e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0212 	mvn.w	r2, #18
 8001290:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f06f 0212 	mvn.w	r2, #18
 800106c:	601a      	str	r2, [r3, #0]
=======
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f06f 0212 	mvn.w	r2, #18
 8001320:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
<<<<<<< HEAD
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d123      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xfe>
||||||| 7f56823
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d123      	bne.n	80010d0 <HAL_ADC_PollForConversion+0xfe>
=======
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d123      	bne.n	8001384 <HAL_ADC_PollForConversion+0xfe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
<<<<<<< HEAD
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e1b      	ldrb	r3, [r3, #24]
||||||| 7f56823
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7e1b      	ldrb	r3, [r3, #24]
=======
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e1b      	ldrb	r3, [r3, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d11f      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xfe>
||||||| 7f56823
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11f      	bne.n	80010d0 <HAL_ADC_PollForConversion+0xfe>
=======
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11f      	bne.n	8001384 <HAL_ADC_PollForConversion+0xfe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
<<<<<<< HEAD
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
||||||| 7f56823
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
=======
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
<<<<<<< HEAD
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_ADC_PollForConversion+0xda>
||||||| 7f56823
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <HAL_ADC_PollForConversion+0xda>
=======
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_ADC_PollForConversion+0xda>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
<<<<<<< HEAD
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
||||||| 7f56823
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
=======
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
<<<<<<< HEAD
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xfe>
||||||| 7f56823
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d111      	bne.n	80010d0 <HAL_ADC_PollForConversion+0xfe>
=======
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <HAL_ADC_PollForConversion+0xfe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
<<<<<<< HEAD
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xfe>
||||||| 7f56823
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d105      	bne.n	80010d0 <HAL_ADC_PollForConversion+0xfe>
=======
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_ADC_PollForConversion+0xfe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
||||||| 7f56823
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
<<<<<<< HEAD
 80012f4:	2300      	movs	r3, #0
||||||| 7f56823
 80010d0:	2300      	movs	r3, #0
=======
 8001384:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
||||||| 7f56823
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
=======
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
080012fe <HAL_ADC_GetValue>:
||||||| 7f56823
080010da <HAL_ADC_GetValue>:
=======
0800138e <HAL_ADC_GetValue>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
<<<<<<< HEAD
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
=======
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
<<<<<<< HEAD
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
||||||| 7f56823
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
=======
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
||||||| 7f56823
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
=======
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08001318 <HAL_ADC_ConfigChannel>:
||||||| 7f56823
080010f4 <HAL_ADC_ConfigChannel>:
=======
080013a8 <HAL_ADC_ConfigChannel>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
||||||| 7f56823
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
=======
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  __IO uint32_t counter = 0U;
<<<<<<< HEAD
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
=======
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1c>
 8001330:	2302      	movs	r3, #2
 8001332:	e113      	b.n	800155c <HAL_ADC_ConfigChannel+0x244>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1c>
 800110c:	2302      	movs	r3, #2
 800110e:	e113      	b.n	8001338 <HAL_ADC_ConfigChannel+0x244>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1c>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e113      	b.n	80015ec <HAL_ADC_ConfigChannel+0x244>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
<<<<<<< HEAD
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d925      	bls.n	8001390 <HAL_ADC_ConfigChannel+0x78>
||||||| 7f56823
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b09      	cmp	r3, #9
 800111e:	d925      	bls.n	800116c <HAL_ADC_ConfigChannel+0x78>
=======
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b09      	cmp	r3, #9
 80013d2:	d925      	bls.n	8001420 <HAL_ADC_ConfigChannel+0x78>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
<<<<<<< HEAD
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	3b1e      	subs	r3, #30
 800135a:	2207      	movs	r2, #7
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43da      	mvns	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	400a      	ands	r2, r1
 8001368:	60da      	str	r2, [r3, #12]
||||||| 7f56823
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68d9      	ldr	r1, [r3, #12]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	3b1e      	subs	r3, #30
 8001136:	2207      	movs	r2, #7
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43da      	mvns	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	400a      	ands	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
=======
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68d9      	ldr	r1, [r3, #12]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	3b1e      	subs	r3, #30
 80013ea:	2207      	movs	r2, #7
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43da      	mvns	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	400a      	ands	r2, r1
 80013f8:	60da      	str	r2, [r3, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< HEAD
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68d9      	ldr	r1, [r3, #12]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4403      	add	r3, r0
 8001382:	3b1e      	subs	r3, #30
 8001384:	409a      	lsls	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	e022      	b.n	80013d6 <HAL_ADC_ConfigChannel+0xbe>
||||||| 7f56823
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68d9      	ldr	r1, [r3, #12]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	4603      	mov	r3, r0
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4403      	add	r3, r0
 800115e:	3b1e      	subs	r3, #30
 8001160:	409a      	lsls	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	e022      	b.n	80011b2 <HAL_ADC_ConfigChannel+0xbe>
=======
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68d9      	ldr	r1, [r3, #12]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	4603      	mov	r3, r0
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4403      	add	r3, r0
 8001412:	3b1e      	subs	r3, #30
 8001414:	409a      	lsls	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	e022      	b.n	8001466 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6919      	ldr	r1, [r3, #16]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	2207      	movs	r2, #7
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6919      	ldr	r1, [r3, #16]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	2207      	movs	r2, #7
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	611a      	str	r2, [r3, #16]
=======
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6919      	ldr	r1, [r3, #16]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	2207      	movs	r2, #7
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	400a      	ands	r2, r1
 8001442:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< HEAD
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	409a      	lsls	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6919      	ldr	r1, [r3, #16]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4403      	add	r3, r0
 80011a8:	409a      	lsls	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	611a      	str	r2, [r3, #16]
=======
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6919      	ldr	r1, [r3, #16]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	4603      	mov	r3, r0
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4403      	add	r3, r0
 800145c:	409a      	lsls	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d824      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0x110>
||||||| 7f56823
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d824      	bhi.n	8001204 <HAL_ADC_ConfigChannel+0x110>
=======
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b06      	cmp	r3, #6
 800146c:	d824      	bhi.n	80014b8 <HAL_ADC_ConfigChannel+0x110>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
<<<<<<< HEAD
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b05      	subs	r3, #5
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
||||||| 7f56823
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	3b05      	subs	r3, #5
 80011cc:	221f      	movs	r2, #31
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
=======
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	3b05      	subs	r3, #5
 8001480:	221f      	movs	r2, #31
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
<<<<<<< HEAD
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b05      	subs	r3, #5
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
 8001426:	e04c      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
||||||| 7f56823
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3b05      	subs	r3, #5
 80011f6:	fa00 f203 	lsl.w	r2, r0, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
 8001202:	e04c      	b.n	800129e <HAL_ADC_ConfigChannel+0x1aa>
=======
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	3b05      	subs	r3, #5
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
 80014b6:	e04c      	b.n	8001552 <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
<<<<<<< HEAD
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d824      	bhi.n	800147a <HAL_ADC_ConfigChannel+0x162>
||||||| 7f56823
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b0c      	cmp	r3, #12
 800120a:	d824      	bhi.n	8001256 <HAL_ADC_ConfigChannel+0x162>
=======
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d824      	bhi.n	800150a <HAL_ADC_ConfigChannel+0x162>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
<<<<<<< HEAD
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b23      	subs	r3, #35	; 0x23
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
||||||| 7f56823
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b23      	subs	r3, #35	; 0x23
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43da      	mvns	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b23      	subs	r3, #35	; 0x23
 80014d2:	221f      	movs	r2, #31
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43da      	mvns	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	400a      	ands	r2, r1
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
<<<<<<< HEAD
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b23      	subs	r3, #35	; 0x23
 800146c:	fa00 f203 	lsl.w	r2, r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
 8001478:	e023      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
||||||| 7f56823
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3b23      	subs	r3, #35	; 0x23
 8001248:	fa00 f203 	lsl.w	r2, r0, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	631a      	str	r2, [r3, #48]	; 0x30
 8001254:	e023      	b.n	800129e <HAL_ADC_ConfigChannel+0x1aa>
=======
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b23      	subs	r3, #35	; 0x23
 80014fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
 8001508:	e023      	b.n	8001552 <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b41      	subs	r3, #65	; 0x41
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
||||||| 7f56823
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	3b41      	subs	r3, #65	; 0x41
 8001268:	221f      	movs	r2, #31
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	400a      	ands	r2, r1
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b41      	subs	r3, #65	; 0x41
 800151c:	221f      	movs	r2, #31
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
<<<<<<< HEAD
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b41      	subs	r3, #65	; 0x41
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
||||||| 7f56823
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b41      	subs	r3, #65	; 0x41
 8001292:	fa00 f203 	lsl.w	r2, r0, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b41      	subs	r3, #65	; 0x41
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_ADC_ConfigChannel+0x250>)
 80014c4:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_ADC_ConfigChannel+0x250>)
 80012a0:	60fb      	str	r3, [r7, #12]
=======
 8001552:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_ADC_ConfigChannel+0x250>)
 8001554:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
<<<<<<< HEAD
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d10f      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b12      	cmp	r3, #18
 80014d6:	d10b      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
||||||| 7f56823
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_ADC_ConfigChannel+0x254>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d10f      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x1d8>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d10b      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x1d8>
=======
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_ADC_ConfigChannel+0x254>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d10f      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1d8>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b12      	cmp	r3, #18
 8001566:	d10b      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1d8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< HEAD
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	605a      	str	r2, [r3, #4]
=======
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	605a      	str	r2, [r3, #4]
=======
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12b      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_ADC_ConfigChannel+0x258>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d003      	beq.n	800150c <HAL_ADC_ConfigChannel+0x1f4>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b11      	cmp	r3, #17
 800150a:	d122      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
||||||| 7f56823
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_ADC_ConfigChannel+0x254>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12b      	bne.n	800132e <HAL_ADC_ConfigChannel+0x23a>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_ADC_ConfigChannel+0x258>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d003      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0x1f4>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b11      	cmp	r3, #17
 80012e6:	d122      	bne.n	800132e <HAL_ADC_ConfigChannel+0x23a>
=======
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_ADC_ConfigChannel+0x254>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12b      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x23a>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_ADC_ConfigChannel+0x258>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d003      	beq.n	800159c <HAL_ADC_ConfigChannel+0x1f4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b11      	cmp	r3, #17
 800159a:	d122      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< HEAD
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	605a      	str	r2, [r3, #4]
=======
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	605a      	str	r2, [r3, #4]
=======
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
<<<<<<< HEAD
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_ADC_ConfigChannel+0x258>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d111      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
||||||| 7f56823
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_ADC_ConfigChannel+0x258>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d111      	bne.n	800132e <HAL_ADC_ConfigChannel+0x23a>
=======
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_ADC_ConfigChannel+0x258>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d111      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_ADC_ConfigChannel+0x25c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_ADC_ConfigChannel+0x260>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_ADC_ConfigChannel+0x25c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_ADC_ConfigChannel+0x260>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	0c9a      	lsrs	r2, r3, #18
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
=======
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_ADC_ConfigChannel+0x25c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_ConfigChannel+0x260>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9a      	lsrs	r2, r3, #18
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      while(counter != 0U)
<<<<<<< HEAD
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x234>
||||||| 7f56823
 8001320:	e002      	b.n	8001328 <HAL_ADC_ConfigChannel+0x234>
=======
 80015d4:	e002      	b.n	80015dc <HAL_ADC_ConfigChannel+0x234>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        counter--;
<<<<<<< HEAD
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3b01      	subs	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
=======
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      while(counter != 0U)
<<<<<<< HEAD
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x22e>
||||||| 7f56823
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f9      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x22e>
=======
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x22e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800155a:	2300      	movs	r3, #0
||||||| 7f56823
 8001336:	2300      	movs	r3, #0
=======
 80015ea:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40012300 	.word	0x40012300
 800156c:	40012000 	.word	0x40012000
 8001570:	10000012 	.word	0x10000012
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83

0800157c <ADC_Init>:
||||||| 7f56823
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40012300 	.word	0x40012300
 8001348:	40012000 	.word	0x40012000
 800134c:	10000012 	.word	0x10000012
 8001350:	20000000 	.word	0x20000000
 8001354:	431bde83 	.word	0x431bde83

08001358 <ADC_Init>:
=======
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40012300 	.word	0x40012300
 80015fc:	40012000 	.word	0x40012000
 8001600:	10000012 	.word	0x10000012
 8001604:	20000000 	.word	0x20000000
 8001608:	431bde83 	.word	0x431bde83

0800160c <ADC_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
=======
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <ADC_Init+0x1f0>)
 8001586:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8001360:	4b79      	ldr	r3, [pc, #484]	; (8001548 <ADC_Init+0x1f0>)
 8001362:	60fb      	str	r3, [r7, #12]
=======
 8001614:	4b79      	ldr	r3, [pc, #484]	; (80017fc <ADC_Init+0x1f0>)
 8001616:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
<<<<<<< HEAD
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	605a      	str	r2, [r3, #4]
=======
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
<<<<<<< HEAD
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	431a      	orrs	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	605a      	str	r2, [r3, #4]
=======
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	431a      	orrs	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
<<<<<<< HEAD
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b0:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800138c:	605a      	str	r2, [r3, #4]
=======
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001640:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
<<<<<<< HEAD
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6859      	ldr	r1, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	021a      	lsls	r2, r3, #8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]
=======
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	021a      	lsls	r2, r3, #8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
<<<<<<< HEAD
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015d4:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013b0:	605a      	str	r2, [r3, #4]
=======
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001664:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
<<<<<<< HEAD
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
=======
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
<<<<<<< HEAD
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f6:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013d2:	609a      	str	r2, [r3, #8]
=======
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001686:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
<<<<<<< HEAD
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6899      	ldr	r1, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	609a      	str	r2, [r3, #8]
=======
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6899      	ldr	r1, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	4a58      	ldr	r2, [pc, #352]	; (8001770 <ADC_Init+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <ADC_Init+0xde>
||||||| 7f56823
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	4a58      	ldr	r2, [pc, #352]	; (800154c <ADC_Init+0x1f4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d022      	beq.n	8001436 <ADC_Init+0xde>
=======
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	4a58      	ldr	r2, [pc, #352]	; (8001800 <ADC_Init+0x1f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <ADC_Init+0xde>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001622:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013fe:	609a      	str	r2, [r3, #8]
=======
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b2:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
<<<<<<< HEAD
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6899      	ldr	r1, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	609a      	str	r2, [r3, #8]
=======
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
<<<<<<< HEAD
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001644:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001420:	609a      	str	r2, [r3, #8]
=======
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d4:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
<<<<<<< HEAD
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e00f      	b.n	800167a <ADC_Init+0xfe>
||||||| 7f56823
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6899      	ldr	r1, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e00f      	b.n	8001456 <ADC_Init+0xfe>
=======
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e00f      	b.n	800170a <ADC_Init+0xfe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001668:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001444:	609a      	str	r2, [r3, #8]
=======
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f8:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
<<<<<<< HEAD
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001678:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001454:	609a      	str	r2, [r3, #8]
=======
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001708:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0202 	bic.w	r2, r2, #2
 8001688:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0202 	bic.w	r2, r2, #2
 8001464:	609a      	str	r2, [r3, #8]
=======
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0202 	bic.w	r2, r2, #2
 8001718:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
<<<<<<< HEAD
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	005a      	lsls	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6899      	ldr	r1, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e1b      	ldrb	r3, [r3, #24]
 8001470:	005a      	lsls	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
=======
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e1b      	ldrb	r3, [r3, #24]
 8001724:	005a      	lsls	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
<<<<<<< HEAD
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <ADC_Init+0x164>
||||||| 7f56823
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01b      	beq.n	80014bc <ADC_Init+0x164>
=======
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <ADC_Init+0x164>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016b6:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001492:	605a      	str	r2, [r3, #4]
=======
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001746:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
<<<<<<< HEAD
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016c6:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014a2:	605a      	str	r2, [r3, #4]
=======
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001756:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
<<<<<<< HEAD
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	3b01      	subs	r3, #1
 80016d4:	035a      	lsls	r2, r3, #13
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	e007      	b.n	80016f0 <ADC_Init+0x174>
||||||| 7f56823
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	3b01      	subs	r3, #1
 80014b0:	035a      	lsls	r2, r3, #13
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	e007      	b.n	80014cc <ADC_Init+0x174>
=======
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	3b01      	subs	r3, #1
 8001764:	035a      	lsls	r2, r3, #13
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	e007      	b.n	8001780 <ADC_Init+0x174>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ee:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ca:	605a      	str	r2, [r3, #4]
=======
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177e:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
||||||| 7f56823
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
<<<<<<< HEAD
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	3b01      	subs	r3, #1
 800170c:	051a      	lsls	r2, r3, #20
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
||||||| 7f56823
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	051a      	lsls	r2, r3, #20
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	3b01      	subs	r3, #1
 800179c:	051a      	lsls	r2, r3, #20
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
<<<<<<< HEAD
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001724:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001500:	609a      	str	r2, [r3, #8]
=======
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017b4:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
<<<<<<< HEAD
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001732:	025a      	lsls	r2, r3, #9
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6899      	ldr	r1, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800150e:	025a      	lsls	r2, r3, #9
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	609a      	str	r2, [r3, #8]
=======
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c2:	025a      	lsls	r2, r3, #9
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
<<<<<<< HEAD
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800174a:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001526:	609a      	str	r2, [r3, #8]
=======
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017da:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
<<<<<<< HEAD
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	029a      	lsls	r2, r3, #10
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6899      	ldr	r1, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	029a      	lsls	r2, r3, #10
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
=======
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	0f000001 	.word	0x0f000001

08001774 <__NVIC_SetPriorityGrouping>:
||||||| 7f56823
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40012300 	.word	0x40012300
 800154c:	0f000001 	.word	0x0f000001

08001550 <__NVIC_SetPriorityGrouping>:
=======
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40012300 	.word	0x40012300
 8001800:	0f000001 	.word	0x0f000001

08001804 <__NVIC_SetPriorityGrouping>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
=======
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
<<<<<<< HEAD
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]
=======
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
<<<<<<< HEAD
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
=======
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
<<<<<<< HEAD
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
=======
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
<<<<<<< HEAD
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
||||||| 7f56823
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
=======
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
<<<<<<< HEAD
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
||||||| 7f56823
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
=======
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  reg_value  =  (reg_value                                   |
<<<<<<< HEAD
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
=======
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  SCB->AIRCR =  reg_value;
<<<<<<< HEAD
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
||||||| 7f56823
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
=======
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
||||||| 7f56823
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
=======
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
||||||| 7f56823
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
=======
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
<<<<<<< HEAD
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
||||||| 7f56823
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
=======
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_SetPriority>:
||||||| 7f56823
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_SetPriority>:
=======
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
||||||| 7f56823
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
=======
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if ((int32_t)(IRQn) >= 0)
<<<<<<< HEAD
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
||||||| 7f56823
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
=======
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
||||||| 7f56823
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
||||||| 7f56823
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
=======
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
||||||| 7f56823
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
=======
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
||||||| 7f56823
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
=======
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
||||||| 7f56823
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
=======
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
<<<<<<< HEAD
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
||||||| 7f56823
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
=======
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
=======
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
<<<<<<< HEAD
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
=======
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
||||||| 7f56823
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
=======
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
<<<<<<< HEAD
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
||||||| 7f56823
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
=======
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 8001884:	4313      	orrs	r3, r2
||||||| 7f56823
 8001660:	4313      	orrs	r3, r2
=======
 8001950:	4313      	orrs	r3, r2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
         );
}
<<<<<<< HEAD
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
||||||| 7f56823
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
=======
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	...

<<<<<<< HEAD
08001894 <SysTick_Config>:
||||||| 7f56823
08001670 <SysTick_Config>:
=======
08001960 <SysTick_Config>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
=======
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
<<<<<<< HEAD
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
||||||| 7f56823
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
=======
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    return (1UL);                                                   /* Reload value impossible */
<<<<<<< HEAD
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
||||||| 7f56823
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
=======
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
<<<<<<< HEAD
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
||||||| 7f56823
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
=======
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
<<<<<<< HEAD
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff8e 	bl	80017d8 <__NVIC_SetPriority>
||||||| 7f56823
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
=======
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
<<<<<<< HEAD
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
=======
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
<<<<<<< HEAD
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
=======
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
<<<<<<< HEAD
 80018c8:	2300      	movs	r3, #0
||||||| 7f56823
 80016a4:	2300      	movs	r3, #0
=======
 8001994:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
||||||| 7f56823
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
=======
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff47 	bl	8001774 <__NVIC_SetPriorityGrouping>
||||||| 7f56823
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff47 	bl	8001550 <__NVIC_SetPriorityGrouping>
=======
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
||||||| 7f56823
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
=======
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
080018ee <HAL_NVIC_SetPriority>:
||||||| 7f56823
080016ca <HAL_NVIC_SetPriority>:
=======
080019ba <HAL_NVIC_SetPriority>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]
||||||| 7f56823
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
=======
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t prioritygroup = 0x00U;
<<<<<<< HEAD
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
=======
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001900:	f7ff ff5c 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]
||||||| 7f56823
 80016dc:	f7ff ff5c 	bl	8001598 <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
=======
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
<<<<<<< HEAD
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff8e 	bl	800182c <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5d 	bl	80017d8 <__NVIC_SetPriority>
||||||| 7f56823
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
=======
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
||||||| 7f56823
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
=======
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08001926 <HAL_SYSTICK_Config>:
||||||| 7f56823
08001702 <HAL_SYSTICK_Config>:
=======
08001a0e <HAL_SYSTICK_Config>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
=======
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
   return SysTick_Config(TicksNumb);
<<<<<<< HEAD
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffb0 	bl	8001894 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
||||||| 7f56823
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffb0 	bl	8001670 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
=======
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
||||||| 7f56823
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
=======
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d004      	beq.n	8001a44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e00c      	b.n	8001a5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2205      	movs	r2, #5
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	...

<<<<<<< HEAD
08001940 <HAL_GPIO_Init>:
||||||| 7f56823
0800171c <HAL_GPIO_Init>:
=======
08001a6c <HAL_GPIO_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
||||||| 7f56823
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
=======
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t position;
  uint32_t ioposition = 0x00U;
<<<<<<< HEAD
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
=======
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t iocurrent = 0x00U;
<<<<<<< HEAD
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
||||||| 7f56823
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
=======
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t temp = 0x00U;
<<<<<<< HEAD
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
=======
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e159      	b.n	8001c10 <HAL_GPIO_Init+0x2d0>
||||||| 7f56823
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e159      	b.n	80019ec <HAL_GPIO_Init+0x2d0>
=======
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e159      	b.n	8001d3c <HAL_GPIO_Init+0x2d0>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
<<<<<<< HEAD
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
=======
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
<<<<<<< HEAD
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
||||||| 7f56823
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
=======
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    if(iocurrent == ioposition)
<<<<<<< HEAD
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8148 	bne.w	8001c0a <HAL_GPIO_Init+0x2ca>
||||||| 7f56823
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8148 	bne.w	80019e6 <HAL_GPIO_Init+0x2ca>
=======
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8148 	bne.w	8001d36 <HAL_GPIO_Init+0x2ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d00b      	beq.n	800199a <HAL_GPIO_Init+0x5a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d007      	beq.n	800199a <HAL_GPIO_Init+0x5a>
||||||| 7f56823
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d00b      	beq.n	8001776 <HAL_GPIO_Init+0x5a>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x5a>
=======
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d00b      	beq.n	8001ac6 <HAL_GPIO_Init+0x5a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x5a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
||||||| 7f56823
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
=======
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 800198e:	2b11      	cmp	r3, #17
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x5a>
||||||| 7f56823
 800176a:	2b11      	cmp	r3, #17
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x5a>
=======
 8001aba:	2b11      	cmp	r3, #17
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x5a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b12      	cmp	r3, #18
 8001998:	d130      	bne.n	80019fc <HAL_GPIO_Init+0xbc>
||||||| 7f56823
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b12      	cmp	r3, #18
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xbc>
=======
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d130      	bne.n	8001b28 <HAL_GPIO_Init+0xbc>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
=======
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
<<<<<<< HEAD
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
=======
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp |= (GPIO_Init->Speed << (position * 2U));
<<<<<<< HEAD
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
=======
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        GPIOx->OSPEEDR = temp;
<<<<<<< HEAD
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]
=======
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
<<<<<<< HEAD
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
=======
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
<<<<<<< HEAD
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
=======
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
<<<<<<< HEAD
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0201 	and.w	r2, r3, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
=======
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 0201 	and.w	r2, r3, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        GPIOx->OTYPER = temp;
<<<<<<< HEAD
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
=======
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
=======
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
<<<<<<< HEAD
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
=======
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      temp |= ((GPIO_Init->Pull) << (position * 2U));
<<<<<<< HEAD
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
=======
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      GPIOx->PUPDR = temp;
<<<<<<< HEAD
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	60da      	str	r2, [r3, #12]
||||||| 7f56823
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	60da      	str	r2, [r3, #12]
=======
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0xfc>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b12      	cmp	r3, #18
 8001a3a:	d123      	bne.n	8001a84 <HAL_GPIO_Init+0x144>
||||||| 7f56823
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0xfc>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x144>
=======
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0xfc>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d123      	bne.n	8001bb0 <HAL_GPIO_Init+0x144>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61bb      	str	r3, [r7, #24]
=======
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
<<<<<<< HEAD
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
=======
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
<<<<<<< HEAD
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
=======
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        GPIOx->AFR[position >> 3U] = temp;
<<<<<<< HEAD
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
||||||| 7f56823
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
=======
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
<<<<<<< HEAD
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
=======
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
<<<<<<< HEAD
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
=======
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      GPIOx->MODER = temp;
<<<<<<< HEAD
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]
=======
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a2 	beq.w	8001c0a <HAL_GPIO_Init+0x2ca>
||||||| 7f56823
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a2 	beq.w	80019e6 <HAL_GPIO_Init+0x2ca>
=======
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a2 	beq.w	8001d36 <HAL_GPIO_Init+0x2ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a55      	ldr	r2, [pc, #340]	; (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_GPIO_Init+0x2e4>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
||||||| 7f56823
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <HAL_GPIO_Init+0x2e4>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a55      	ldr	r2, [pc, #340]	; (8001a00 <HAL_GPIO_Init+0x2e4>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_GPIO_Init+0x2e4>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
=======
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_GPIO_Init+0x2e4>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a55      	ldr	r2, [pc, #340]	; (8001d50 <HAL_GPIO_Init+0x2e4>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_GPIO_Init+0x2e4>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        temp = SYSCFG->EXTICR[position >> 2U];
<<<<<<< HEAD
 8001ae2:	4a51      	ldr	r2, [pc, #324]	; (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80018be:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
=======
 8001c0e:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
<<<<<<< HEAD
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
=======
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
<<<<<<< HEAD
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_GPIO_Init+0x2ec>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x202>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x1fe>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a45      	ldr	r2, [pc, #276]	; (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x1f6>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a44      	ldr	r2, [pc, #272]	; (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x1f2>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b42:	2300      	movs	r3, #0
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a48      	ldr	r2, [pc, #288]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x202>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x1fe>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <HAL_GPIO_Init+0x2f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x1fa>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a45      	ldr	r2, [pc, #276]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x1f6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a44      	ldr	r2, [pc, #272]	; (8001a18 <HAL_GPIO_Init+0x2fc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x1f2>
 800190a:	2304      	movs	r3, #4
 800190c:	e008      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800190e:	2307      	movs	r3, #7
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x204>
 8001912:	2303      	movs	r3, #3
 8001914:	e004      	b.n	8001920 <HAL_GPIO_Init+0x204>
 8001916:	2302      	movs	r3, #2
 8001918:	e002      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800191e:	2300      	movs	r3, #0
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f002 0203 	and.w	r2, r2, #3
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	4093      	lsls	r3, r2
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
=======
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <HAL_GPIO_Init+0x2ec>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <HAL_GPIO_Init+0x202>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a47      	ldr	r2, [pc, #284]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0x1fe>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <HAL_GPIO_Init+0x2f4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a45      	ldr	r2, [pc, #276]	; (8001d64 <HAL_GPIO_Init+0x2f8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x1f6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a44      	ldr	r2, [pc, #272]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x1f2>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x204>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        SYSCFG->EXTICR[position >> 2U] = temp;
<<<<<<< HEAD
 8001b54:	4934      	ldr	r1, [pc, #208]	; (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
||||||| 7f56823
 8001930:	4934      	ldr	r1, [pc, #208]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001c80:	4934      	ldr	r1, [pc, #208]	; (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
<<<<<<< HEAD
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_GPIO_Init+0x300>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	61bb      	str	r3, [r7, #24]
=======
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
=======
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x246>
||||||| 7f56823
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x246>
=======
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x246>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
=======
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
        EXTI->IMR = temp;
<<<<<<< HEAD
 8001b86:	4a2e      	ldr	r2, [pc, #184]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8001962:	4a2e      	ldr	r2, [pc, #184]	; (8001a1c <HAL_GPIO_Init+0x300>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6013      	str	r3, [r2, #0]
=======
 8001cb2:	4a2e      	ldr	r2, [pc, #184]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        temp = EXTI->EMR;
<<<<<<< HEAD
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_GPIO_Init+0x300>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
=======
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
=======
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x270>
||||||| 7f56823
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x270>
=======
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x270>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
=======
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
        EXTI->EMR = temp;
<<<<<<< HEAD
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6053      	str	r3, [r2, #4]
||||||| 7f56823
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_GPIO_Init+0x300>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6053      	str	r3, [r2, #4]
=======
 8001cdc:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6053      	str	r3, [r2, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
<<<<<<< HEAD
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_GPIO_Init+0x300>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
=======
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
=======
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x29a>
||||||| 7f56823
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x29a>
=======
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x29a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
=======
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
        EXTI->RTSR = temp;
<<<<<<< HEAD
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6093      	str	r3, [r2, #8]
||||||| 7f56823
 80019b6:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_GPIO_Init+0x300>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6093      	str	r3, [r2, #8]
=======
 8001d06:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        temp = EXTI->FTSR;
<<<<<<< HEAD
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_GPIO_Init+0x300>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
=======
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
=======
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x2c4>
||||||| 7f56823
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x2c4>
=======
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2c4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
||||||| 7f56823
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
=======
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
        EXTI->FTSR = temp;
<<<<<<< HEAD
 8001c04:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	60d3      	str	r3, [r2, #12]
||||||| 7f56823
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_GPIO_Init+0x300>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	60d3      	str	r3, [r2, #12]
=======
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f aea2 	bls.w	800195c <HAL_GPIO_Init+0x1c>
||||||| 7f56823
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	f67f aea2 	bls.w	8001738 <HAL_GPIO_Init+0x1c>
=======
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f67f aea2 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
  }
}
<<<<<<< HEAD
 8001c18:	bf00      	nop
 8001c1a:	3724      	adds	r7, #36	; 0x24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_WritePin>:
||||||| 7f56823
 80019f4:	bf00      	nop
 80019f6:	3724      	adds	r7, #36	; 0x24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40013800 	.word	0x40013800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40013c00 	.word	0x40013c00

08001a20 <HAL_GPIO_WritePin>:
=======
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_GPIO_WritePin>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
||||||| 7f56823
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
=======
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
||||||| 7f56823
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
=======
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    GPIOx->BSRR = GPIO_Pin;
<<<<<<< HEAD
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
||||||| 7f56823
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
=======
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
||||||| 7f56823
 8001a3c:	e003      	b.n	8001a46 <HAL_GPIO_WritePin+0x26>
=======
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
<<<<<<< HEAD
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
||||||| 7f56823
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	041a      	lsls	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	619a      	str	r2, [r3, #24]
=======
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
||||||| 7f56823
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
=======
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	...

<<<<<<< HEAD
08001c78 <HAL_RCC_OscConfig>:
||||||| 7f56823
08001a54 <HAL_RCC_OscConfig>:
=======
08001da4 <HAL_RCC_OscConfig>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
=======
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
||||||| 7f56823
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
=======
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8001c86:	2301      	movs	r3, #1
 8001c88:	e25b      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001a62:	2301      	movs	r3, #1
 8001a64:	e25b      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001db2:	2301      	movs	r3, #1
 8001db4:	e25b      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d075      	beq.n	8001d82 <HAL_RCC_OscConfig+0x10a>
||||||| 7f56823
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d075      	beq.n	8001b5e <HAL_RCC_OscConfig+0x10a>
=======
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d075      	beq.n	8001eae <HAL_RCC_OscConfig+0x10a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8001c96:	4ba3      	ldr	r3, [pc, #652]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d00c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x44>
||||||| 7f56823
 8001a72:	4ba3      	ldr	r3, [pc, #652]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d00c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x44>
=======
 8001dc2:	4ba3      	ldr	r3, [pc, #652]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d00c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x44>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
<<<<<<< HEAD
 8001ca2:	4ba0      	ldr	r3, [pc, #640]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
||||||| 7f56823
 8001a7e:	4ba0      	ldr	r3, [pc, #640]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
=======
 8001dce:	4ba0      	ldr	r3, [pc, #640]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d112      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5c>
||||||| 7f56823
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
=======
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d112      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
<<<<<<< HEAD
 8001cae:	4b9d      	ldr	r3, [pc, #628]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cba:	d10b      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5c>
||||||| 7f56823
 8001a8a:	4b9d      	ldr	r3, [pc, #628]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
=======
 8001dda:	4b9d      	ldr	r3, [pc, #628]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de6:	d10b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8001cbc:	4b99      	ldr	r3, [pc, #612]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d05b      	beq.n	8001d80 <HAL_RCC_OscConfig+0x108>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d157      	bne.n	8001d80 <HAL_RCC_OscConfig+0x108>
||||||| 7f56823
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05b      	beq.n	8001b5c <HAL_RCC_OscConfig+0x108>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d157      	bne.n	8001b5c <HAL_RCC_OscConfig+0x108>
=======
 8001de8:	4b99      	ldr	r3, [pc, #612]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d05b      	beq.n	8001eac <HAL_RCC_OscConfig+0x108>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d157      	bne.n	8001eac <HAL_RCC_OscConfig+0x108>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e236      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001aac:	2301      	movs	r3, #1
 8001aae:	e236      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e236      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d106      	bne.n	8001cec <HAL_RCC_OscConfig+0x74>
 8001cde:	4b91      	ldr	r3, [pc, #580]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a90      	ldr	r2, [pc, #576]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e01d      	b.n	8001d28 <HAL_RCC_OscConfig+0xb0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x98>
 8001cf6:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a8a      	ldr	r2, [pc, #552]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0xb0>
 8001d10:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a83      	ldr	r2, [pc, #524]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b81      	ldr	r3, [pc, #516]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a80      	ldr	r2, [pc, #512]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d26:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x74>
 8001aba:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a90      	ldr	r2, [pc, #576]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a8a      	ldr	r2, [pc, #552]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a87      	ldr	r2, [pc, #540]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001aec:	4b84      	ldr	r3, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a83      	ldr	r2, [pc, #524]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a80      	ldr	r2, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]
=======
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_OscConfig+0x74>
 8001e0a:	4b91      	ldr	r3, [pc, #580]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a90      	ldr	r2, [pc, #576]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e01d      	b.n	8001e54 <HAL_RCC_OscConfig+0xb0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x98>
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a8a      	ldr	r2, [pc, #552]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a87      	ldr	r2, [pc, #540]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0xb0>
 8001e3c:	4b84      	ldr	r3, [pc, #528]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a83      	ldr	r2, [pc, #524]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b81      	ldr	r3, [pc, #516]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a80      	ldr	r2, [pc, #512]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
<<<<<<< HEAD
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe0>
||||||| 7f56823
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe0>
=======
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_RCC_OscConfig+0xe0>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001d30:	f7ff f916 	bl	8000f60 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001b0c:	f7ff f916 	bl	8000d3c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]
=======
 8001e5c:	f7ff f8c8 	bl	8000ff0 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0xd2>
||||||| 7f56823
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xd2>
=======
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0xd2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001d38:	f7ff f912 	bl	8000f60 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0xd2>
||||||| 7f56823
 8001b14:	f7ff f912 	bl	8000d3c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xd2>
=======
 8001e64:	f7ff f8c4 	bl	8000ff0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xd2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1fb      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1fb      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1fb      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 8001d4a:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0xc0>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x10a>
||||||| 7f56823
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xc0>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
=======
 8001e76:	4b76      	ldr	r3, [pc, #472]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0xc0>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x10a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001d58:	f7ff f902 	bl	8000f60 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001b34:	f7ff f902 	bl	8000d3c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]
=======
 8001e84:	f7ff f8b4 	bl	8000ff0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
<<<<<<< HEAD
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xfa>
||||||| 7f56823
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xfa>
=======
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xfa>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001d60:	f7ff f8fe 	bl	8000f60 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xfa>
||||||| 7f56823
 8001b3c:	f7ff f8fe 	bl	8000d3c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xfa>
=======
 8001e8c:	f7ff f8b0 	bl	8000ff0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xfa>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1e7      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1e7      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1e7      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
<<<<<<< HEAD
 8001d72:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0xe8>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x10a>
||||||| 7f56823
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0xe8>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
=======
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0xe8>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x10a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8001d80:	bf00      	nop
||||||| 7f56823
 8001b5c:	bf00      	nop
=======
 8001eac:	bf00      	nop
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d063      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1de>
||||||| 7f56823
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d063      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1de>
=======
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d063      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8001d8e:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <HAL_RCC_OscConfig+0x13a>
||||||| 7f56823
 8001b6a:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_RCC_OscConfig+0x13a>
=======
 8001eba:	4b65      	ldr	r3, [pc, #404]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_RCC_OscConfig+0x13a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
<<<<<<< HEAD
 8001d9a:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
||||||| 7f56823
 8001b76:	4b62      	ldr	r3, [pc, #392]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
=======
 8001ec6:	4b62      	ldr	r3, [pc, #392]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d11c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x168>
||||||| 7f56823
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d11c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x168>
=======
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d11c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x168>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
<<<<<<< HEAD
 8001da6:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d116      	bne.n	8001de0 <HAL_RCC_OscConfig+0x168>
||||||| 7f56823
 8001b82:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d116      	bne.n	8001bbc <HAL_RCC_OscConfig+0x168>
=======
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <HAL_RCC_OscConfig+0x168>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8001db2:	4b5c      	ldr	r3, [pc, #368]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_RCC_OscConfig+0x152>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x152>
||||||| 7f56823
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x152>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x152>
=======
 8001ede:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x152>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x152>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e1bb      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1bb      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1bb      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001dca:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4952      	ldr	r1, [pc, #328]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
||||||| 7f56823
 8001ba6:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4952      	ldr	r1, [pc, #328]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
=======
 8001ef6:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4952      	ldr	r1, [pc, #328]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8001dde:	e03a      	b.n	8001e56 <HAL_RCC_OscConfig+0x1de>
||||||| 7f56823
 8001bba:	e03a      	b.n	8001c32 <HAL_RCC_OscConfig+0x1de>
=======
 8001f0a:	e03a      	b.n	8001f82 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1b2>
||||||| 7f56823
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1b2>
=======
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1b2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
<<<<<<< HEAD
 8001de8:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_RCC_OscConfig+0x2b0>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <HAL_RCC_OscConfig+0x2b0>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
=======
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_RCC_OscConfig+0x2b0>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001dee:	f7ff f8b7 	bl	8000f60 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001bca:	f7ff f8b7 	bl	8000d3c <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]
=======
 8001f1a:	f7ff f869 	bl	8000ff0 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x190>
||||||| 7f56823
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x190>
=======
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x190>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001df6:	f7ff f8b3 	bl	8000f60 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x190>
||||||| 7f56823
 8001bd2:	f7ff f8b3 	bl	8000d3c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x190>
=======
 8001f22:	f7ff f865 	bl	8000ff0 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x190>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8001e04:	2303      	movs	r3, #3
 8001e06:	e19c      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001be0:	2303      	movs	r3, #3
 8001be2:	e19c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001f30:	2303      	movs	r3, #3
 8001f32:	e19c      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001e08:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x17e>
||||||| 7f56823
 8001be4:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x17e>
=======
 8001f34:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x17e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001e14:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4940      	ldr	r1, [pc, #256]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e015      	b.n	8001e56 <HAL_RCC_OscConfig+0x1de>
||||||| 7f56823
 8001bf0:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4940      	ldr	r1, [pc, #256]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x1de>
=======
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4940      	ldr	r1, [pc, #256]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <HAL_RCC_OscConfig+0x2b0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x2b0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
=======
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_OscConfig+0x2b0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001e30:	f7ff f896 	bl	8000f60 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001c0c:	f7ff f896 	bl	8000d3c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]
=======
 8001f5c:	f7ff f848 	bl	8000ff0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x1d2>
||||||| 7f56823
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1d2>
=======
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1d2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001e38:	f7ff f892 	bl	8000f60 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x1d2>
||||||| 7f56823
 8001c14:	f7ff f892 	bl	8000d3c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1d2>
=======
 8001f64:	f7ff f844 	bl	8000ff0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1d2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8001e46:	2303      	movs	r3, #3
 8001e48:	e17b      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001c22:	2303      	movs	r3, #3
 8001c24:	e17b      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001f72:	2303      	movs	r3, #3
 8001f74:	e17b      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x1c0>
||||||| 7f56823
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1c0>
=======
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d030      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x24c>
||||||| 7f56823
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d030      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
=======
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d030      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_RCC_OscConfig+0x220>
||||||| 7f56823
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d016      	beq.n	8001c74 <HAL_RCC_OscConfig+0x220>
=======
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d016      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x220>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_RCC_OscConfig+0x2b4>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_OscConfig+0x2b4>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
=======
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_RCC_OscConfig+0x2b4>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001e70:	f7ff f876 	bl	8000f60 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001c4c:	f7ff f876 	bl	8000d3c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]
=======
 8001f9c:	f7ff f828 	bl	8000ff0 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x212>
||||||| 7f56823
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x212>
=======
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x212>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001e78:	f7ff f872 	bl	8000f60 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x212>
||||||| 7f56823
 8001c54:	f7ff f872 	bl	8000d3c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x212>
=======
 8001fa4:	f7ff f824 	bl	8000ff0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x212>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8001e86:	2303      	movs	r3, #3
 8001e88:	e15b      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001c62:	2303      	movs	r3, #3
 8001c64:	e15b      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e15b      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x200>
 8001e96:	e015      	b.n	8001ec4 <HAL_RCC_OscConfig+0x24c>
||||||| 7f56823
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x200>
 8001c72:	e015      	b.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
=======
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x200>
 8001fc2:	e015      	b.n	8001ff0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_OscConfig+0x2b4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_RCC_OscConfig+0x2b4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
=======
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_OscConfig+0x2b4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001e9e:	f7ff f85f 	bl	8000f60 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001c7a:	f7ff f85f 	bl	8000d3c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]
=======
 8001fca:	f7ff f811 	bl	8000ff0 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x240>
||||||| 7f56823
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x240>
=======
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x240>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001ea6:	f7ff f85b 	bl	8000f60 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x240>
||||||| 7f56823
 8001c82:	f7ff f85b 	bl	8000d3c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x240>
=======
 8001fd2:	f7ff f80d 	bl	8000ff0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x240>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e144      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001c90:	2303      	movs	r3, #3
 8001c92:	e144      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e144      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x22e>
||||||| 7f56823
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x22e>
=======
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a0 	beq.w	8002012 <HAL_RCC_OscConfig+0x39a>
||||||| 7f56823
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a0 	beq.w	8001dee <HAL_RCC_OscConfig+0x39a>
=======
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a0 	beq.w	800213e <HAL_RCC_OscConfig+0x39a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    FlagStatus       pwrclkchanged = RESET;
<<<<<<< HEAD
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
||||||| 7f56823
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]
=======
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10f      	bne.n	8001f02 <HAL_RCC_OscConfig+0x28a>
||||||| 7f56823
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_RCC_OscConfig+0x28a>
=======
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10f      	bne.n	800202e <HAL_RCC_OscConfig+0x28a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
||||||| 7f56823
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
=======
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      pwrclkchanged = SET;
<<<<<<< HEAD
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
||||||| 7f56823
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
=======
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x2b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_OscConfig+0x2da>
||||||| 7f56823
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x2b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d121      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2da>
=======
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x2b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d121      	bne.n	800207e <HAL_RCC_OscConfig+0x2da>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
<<<<<<< HEAD
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_RCC_OscConfig+0x2b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_RCC_OscConfig+0x2b8>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_RCC_OscConfig+0x2b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_RCC_OscConfig+0x2b8>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]
=======
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_RCC_OscConfig+0x2b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_RCC_OscConfig+0x2b8>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001f1a:	f7ff f821 	bl	8000f60 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001cf6:	f7ff f821 	bl	8000d3c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]
=======
 8002046:	f7fe ffd3 	bl	8000ff0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8001f20:	e011      	b.n	8001f46 <HAL_RCC_OscConfig+0x2ce>
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	42470000 	.word	0x42470000
 8001f2c:	42470e80 	.word	0x42470e80
 8001f30:	40007000 	.word	0x40007000
||||||| 7f56823
 8001cfc:	e011      	b.n	8001d22 <HAL_RCC_OscConfig+0x2ce>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
 8001d0c:	40007000 	.word	0x40007000
=======
 800204c:	e011      	b.n	8002072 <HAL_RCC_OscConfig+0x2ce>
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	42470000 	.word	0x42470000
 8002058:	42470e80 	.word	0x42470e80
 800205c:	40007000 	.word	0x40007000
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001f34:	f7ff f814 	bl	8000f60 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x2ce>
||||||| 7f56823
 8001d10:	f7ff f814 	bl	8000d3c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2ce>
=======
 8002060:	f7fe ffc6 	bl	8000ff0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x2ce>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0fd      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0fd      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 800206e:	2303      	movs	r3, #3
 8002070:	e0fd      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8001f46:	4b81      	ldr	r3, [pc, #516]	; (800214c <HAL_RCC_OscConfig+0x4d4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x2bc>
||||||| 7f56823
 8001d22:	4b81      	ldr	r3, [pc, #516]	; (8001f28 <HAL_RCC_OscConfig+0x4d4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2bc>
=======
 8002072:	4b81      	ldr	r3, [pc, #516]	; (8002278 <HAL_RCC_OscConfig+0x4d4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d106      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2f0>
 8001f5a:	4b7d      	ldr	r3, [pc, #500]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a7c      	ldr	r2, [pc, #496]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	e01c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x32a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x312>
 8001f70:	4b77      	ldr	r3, [pc, #476]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4a76      	ldr	r2, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7c:	4b74      	ldr	r3, [pc, #464]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a73      	ldr	r2, [pc, #460]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x32a>
 8001f8a:	4b71      	ldr	r3, [pc, #452]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a70      	ldr	r2, [pc, #448]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
 8001f96:	4b6e      	ldr	r3, [pc, #440]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a6d      	ldr	r2, [pc, #436]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
||||||| 7f56823
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
 8001d36:	4b7d      	ldr	r3, [pc, #500]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a7c      	ldr	r2, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	e01c      	b.n	8001d7e <HAL_RCC_OscConfig+0x32a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d10c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x312>
 8001d4c:	4b77      	ldr	r3, [pc, #476]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	4a76      	ldr	r2, [pc, #472]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6713      	str	r3, [r2, #112]	; 0x70
 8001d58:	4b74      	ldr	r3, [pc, #464]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a73      	ldr	r2, [pc, #460]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	e00b      	b.n	8001d7e <HAL_RCC_OscConfig+0x32a>
 8001d66:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a70      	ldr	r2, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	4b6e      	ldr	r3, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a6d      	ldr	r2, [pc, #436]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
=======
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x2f0>
 8002086:	4b7d      	ldr	r3, [pc, #500]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a7c      	ldr	r2, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6713      	str	r3, [r2, #112]	; 0x70
 8002092:	e01c      	b.n	80020ce <HAL_RCC_OscConfig+0x32a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b05      	cmp	r3, #5
 800209a:	d10c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x312>
 800209c:	4b77      	ldr	r3, [pc, #476]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a76      	ldr	r2, [pc, #472]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
 80020a8:	4b74      	ldr	r3, [pc, #464]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a73      	ldr	r2, [pc, #460]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e00b      	b.n	80020ce <HAL_RCC_OscConfig+0x32a>
 80020b6:	4b71      	ldr	r3, [pc, #452]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a70      	ldr	r2, [pc, #448]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	4b6e      	ldr	r3, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a6d      	ldr	r2, [pc, #436]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
<<<<<<< HEAD
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x35e>
||||||| 7f56823
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d015      	beq.n	8001db2 <HAL_RCC_OscConfig+0x35e>
=======
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d015      	beq.n	8002102 <HAL_RCC_OscConfig+0x35e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001faa:	f7fe ffd9 	bl	8000f60 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001d86:	f7fe ffd9 	bl	8000d3c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]
=======
 80020d6:	f7fe ff8b 	bl	8000ff0 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x350>
||||||| 7f56823
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x350>
=======
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x350>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001fb2:	f7fe ffd5 	bl	8000f60 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x350>
||||||| 7f56823
 8001d8e:	f7fe ffd5 	bl	8000d3c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x350>
=======
 80020de:	f7fe ff87 	bl	8000ff0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x350>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0bc      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0bc      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 80020f0:	2303      	movs	r3, #3
 80020f2:	e0bc      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8001fc8:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ee      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x33a>
 8001fd4:	e014      	b.n	8002000 <HAL_RCC_OscConfig+0x388>
||||||| 7f56823
 8001da4:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCC_OscConfig+0x33a>
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x388>
=======
 80020f4:	4b61      	ldr	r3, [pc, #388]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0ee      	beq.n	80020de <HAL_RCC_OscConfig+0x33a>
 8002100:	e014      	b.n	800212c <HAL_RCC_OscConfig+0x388>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001fd6:	f7fe ffc3 	bl	8000f60 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001db2:	f7fe ffc3 	bl	8000d3c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]
=======
 8002102:	f7fe ff75 	bl	8000ff0 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x37c>
||||||| 7f56823
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x37c>
=======
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x37c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8001fde:	f7fe ffbf 	bl	8000f60 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x37c>
||||||| 7f56823
 8001dba:	f7fe ffbf 	bl	8000d3c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x37c>
=======
 800210a:	f7fe ff71 	bl	8000ff0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x37c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0a6      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0a6      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 800211c:	2303      	movs	r3, #3
 800211e:	e0a6      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 8001ff4:	4b56      	ldr	r3, [pc, #344]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ee      	bne.n	8001fde <HAL_RCC_OscConfig+0x366>
||||||| 7f56823
 8001dd0:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_OscConfig+0x366>
=======
 8002120:	4b56      	ldr	r3, [pc, #344]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ee      	bne.n	800210a <HAL_RCC_OscConfig+0x366>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <HAL_RCC_OscConfig+0x39a>
||||||| 7f56823
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x39a>
=======
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d105      	bne.n	800213e <HAL_RCC_OscConfig+0x39a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      __HAL_RCC_PWR_CLK_DISABLE();
<<<<<<< HEAD
 8002006:	4b52      	ldr	r3, [pc, #328]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
||||||| 7f56823
 8001de2:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a51      	ldr	r2, [pc, #324]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a51      	ldr	r2, [pc, #324]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 8002138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8092 	beq.w	8002140 <HAL_RCC_OscConfig+0x4c8>
||||||| 7f56823
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8092 	beq.w	8001f1c <HAL_RCC_OscConfig+0x4c8>
=======
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8092 	beq.w	800226c <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d05c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x46a>
||||||| 7f56823
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d05c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46a>
=======
 8002148:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d05c      	beq.n	800220e <HAL_RCC_OscConfig+0x46a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
<<<<<<< HEAD
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d141      	bne.n	80020b4 <HAL_RCC_OscConfig+0x43c>
||||||| 7f56823
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d141      	bne.n	8001e90 <HAL_RCC_OscConfig+0x43c>
=======
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d141      	bne.n	80021e0 <HAL_RCC_OscConfig+0x43c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_RCC_OscConfig+0x4dc>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001e0c:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x4dc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
=======
 800215c:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_RCC_OscConfig+0x4dc>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002036:	f7fe ff93 	bl	8000f60 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001e12:	f7fe ff93 	bl	8000d3c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]
=======
 8002162:	f7fe ff45 	bl	8000ff0 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x3d8>
||||||| 7f56823
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x3d8>
=======
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x3d8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 800203e:	f7fe ff8f 	bl	8000f60 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x3d8>
||||||| 7f56823
 8001e1a:	f7fe ff8f 	bl	8000d3c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3d8>
=======
 800216a:	f7fe ff41 	bl	8000ff0 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3d8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 800204c:	2303      	movs	r3, #3
 800204e:	e078      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e078      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8002178:	2303      	movs	r3, #3
 800217a:	e078      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x3c6>
||||||| 7f56823
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3c6>
=======
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x3c6>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	019b      	lsls	r3, r3, #6
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	061b      	lsls	r3, r3, #24
 8002080:	4933      	ldr	r1, [pc, #204]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
||||||| 7f56823
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	019b      	lsls	r3, r3, #6
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	041b      	lsls	r3, r3, #16
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	4933      	ldr	r1, [pc, #204]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
=======
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	061b      	lsls	r3, r3, #24
 80021ac:	4933      	ldr	r1, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_OscConfig+0x4dc>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4dc>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
=======
 80021b2:	4b33      	ldr	r3, [pc, #204]	; (8002280 <HAL_RCC_OscConfig+0x4dc>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800208c:	f7fe ff68 	bl	8000f60 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001e68:	f7fe ff68 	bl	8000d3c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]
=======
 80021b8:	f7fe ff1a 	bl	8000ff0 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x42e>
||||||| 7f56823
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x42e>
=======
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x42e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 8002094:	f7fe ff64 	bl	8000f60 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x42e>
||||||| 7f56823
 8001e70:	f7fe ff64 	bl	8000d3c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x42e>
=======
 80021c0:	f7fe ff16 	bl	8000ff0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x42e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 80020a2:	2303      	movs	r3, #3
 80020a4:	e04d      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e04d      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 80021ce:	2303      	movs	r3, #3
 80021d0:	e04d      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x41c>
 80020b2:	e045      	b.n	8002140 <HAL_RCC_OscConfig+0x4c8>
||||||| 7f56823
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x41c>
 8001e8e:	e045      	b.n	8001f1c <HAL_RCC_OscConfig+0x4c8>
=======
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x41c>
 80021de:	e045      	b.n	800226c <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x4dc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
||||||| 7f56823
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x4dc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
=======
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_OscConfig+0x4dc>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80020ba:	f7fe ff51 	bl	8000f60 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]
||||||| 7f56823
 8001e96:	f7fe ff51 	bl	8000d3c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]
=======
 80021e6:	f7fe ff03 	bl	8000ff0 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x45c>
||||||| 7f56823
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x45c>
=======
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x45c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 80020c2:	f7fe ff4d 	bl	8000f60 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x45c>
||||||| 7f56823
 8001e9e:	f7fe ff4d 	bl	8000d3c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x45c>
=======
 80021ee:	f7fe feff 	bl	8000ff0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x45c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 80020d0:	2303      	movs	r3, #3
 80020d2:	e036      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001eac:	2303      	movs	r3, #3
 8001eae:	e036      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 80021fc:	2303      	movs	r3, #3
 80021fe:	e036      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x44a>
 80020e0:	e02e      	b.n	8002140 <HAL_RCC_OscConfig+0x4c8>
||||||| 7f56823
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x44a>
 8001ebc:	e02e      	b.n	8001f1c <HAL_RCC_OscConfig+0x4c8>
=======
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x44a>
 800220c:	e02e      	b.n	800226c <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x476>
||||||| 7f56823
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x476>
=======
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x476>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80020ea:	2301      	movs	r3, #1
 80020ec:	e029      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e029      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8002216:	2301      	movs	r3, #1
 8002218:	e029      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_RCC_OscConfig+0x4d8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_RCC_OscConfig+0x4d8>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	60fb      	str	r3, [r7, #12]
=======
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_RCC_OscConfig+0x4d8>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x4c4>
||||||| 7f56823
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4c4>
=======
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	429a      	cmp	r2, r3
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x4c4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
<<<<<<< HEAD
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
||||||| 7f56823
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
=======
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 800210c:	429a      	cmp	r2, r3
 800210e:	d115      	bne.n	800213c <HAL_RCC_OscConfig+0x4c4>
||||||| 7f56823
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d115      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4c4>
=======
 8002238:	429a      	cmp	r2, r3
 800223a:	d115      	bne.n	8002268 <HAL_RCC_OscConfig+0x4c4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
<<<<<<< HEAD
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002116:	4013      	ands	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6a52      	ldr	r2, [r2, #36]	; 0x24
||||||| 7f56823
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
=======
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002242:	4013      	ands	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6a52      	ldr	r2, [r2, #36]	; 0x24
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
<<<<<<< HEAD
 800211c:	4293      	cmp	r3, r2
 800211e:	d10d      	bne.n	800213c <HAL_RCC_OscConfig+0x4c4>
||||||| 7f56823
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d10d      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4c4>
=======
 8002248:	4293      	cmp	r3, r2
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_OscConfig+0x4c4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
<<<<<<< HEAD
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
||||||| 7f56823
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
=======
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
<<<<<<< HEAD
 800212a:	429a      	cmp	r2, r3
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x4c4>
||||||| 7f56823
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4c4>
=======
 8002256:	429a      	cmp	r2, r3
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0x4c4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
<<<<<<< HEAD
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
||||||| 7f56823
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
=======
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
<<<<<<< HEAD
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x4c8>
||||||| 7f56823
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4c8>
=======
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_ERROR;
<<<<<<< HEAD
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x4ca>
||||||| 7f56823
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ca>
=======
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002140:	2300      	movs	r3, #0
||||||| 7f56823
 8001f1c:	2300      	movs	r3, #0
=======
 800226c:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000
 8002150:	40023800 	.word	0x40023800
 8002154:	42470060 	.word	0x42470060

08002158 <HAL_RCC_ClockConfig>:
||||||| 7f56823
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	42470060 	.word	0x42470060

08001f34 <HAL_RCC_ClockConfig>:
=======
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40007000 	.word	0x40007000
 800227c:	40023800 	.word	0x40023800
 8002280:	42470060 	.word	0x42470060

08002284 <HAL_RCC_ClockConfig>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
||||||| 7f56823
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
=======
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
||||||| 7f56823
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
=======
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8002168:	2301      	movs	r3, #1
 800216a:	e0cc      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
||||||| 7f56823
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0cc      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8002294:	2301      	movs	r3, #1
 8002296:	e0cc      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d90c      	bls.n	8002194 <HAL_RCC_ClockConfig+0x3c>
||||||| 7f56823
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d90c      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
=======
 8002298:	4b68      	ldr	r3, [pc, #416]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d90c      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
<<<<<<< HEAD
 800217a:	4b65      	ldr	r3, [pc, #404]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]
||||||| 7f56823
 8001f56:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
=======
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x3c>
||||||| 7f56823
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
=======
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8002190:	2301      	movs	r3, #1
 8002192:	e0b8      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
||||||| 7f56823
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0b8      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x8a>
||||||| 7f56823
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x8a>
=======
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x60>
||||||| 7f56823
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x60>
=======
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x60>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
<<<<<<< HEAD
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021b6:	6093      	str	r3, [r2, #8]
||||||| 7f56823
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f92:	6093      	str	r3, [r2, #8]
=======
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022e2:	6093      	str	r3, [r2, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x78>
||||||| 7f56823
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x78>
=======
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x78>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
<<<<<<< HEAD
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ce:	6093      	str	r3, [r2, #8]
||||||| 7f56823
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001faa:	6093      	str	r3, [r2, #8]
=======
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022fa:	6093      	str	r3, [r2, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	494d      	ldr	r1, [pc, #308]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
||||||| 7f56823
 8001fac:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	494d      	ldr	r1, [pc, #308]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
=======
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d044      	beq.n	8002278 <HAL_RCC_ClockConfig+0x120>
||||||| 7f56823
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d044      	beq.n	8002054 <HAL_RCC_ClockConfig+0x120>
=======
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d044      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xae>
||||||| 7f56823
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xae>
=======
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d119      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
||||||| 7f56823
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
=======
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d119      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002202:	2301      	movs	r3, #1
 8002204:	e07f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
||||||| 7f56823
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e07f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d003      	beq.n	8002216 <HAL_RCC_ClockConfig+0xbe>
||||||| 7f56823
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0xbe>
=======
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d003      	beq.n	8002342 <HAL_RCC_ClockConfig+0xbe>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
<<<<<<< HEAD
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
||||||| 7f56823
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
=======
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8002212:	2b03      	cmp	r3, #3
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xce>
||||||| 7f56823
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
=======
 800233e:	2b03      	cmp	r3, #3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xce>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 8002216:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
||||||| 7f56823
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
=======
 8002342:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002222:	2301      	movs	r3, #1
 8002224:	e06f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
||||||| 7f56823
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800234e:	2301      	movs	r3, #1
 8002350:	e06f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
||||||| 7f56823
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
=======
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002232:	2301      	movs	r3, #1
 8002234:	e067      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
||||||| 7f56823
 800200e:	2301      	movs	r3, #1
 8002010:	e067      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800235e:	2301      	movs	r3, #1
 8002360:	e067      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4934      	ldr	r1, [pc, #208]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
||||||| 7f56823
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4934      	ldr	r1, [pc, #208]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
=======
 8002362:	4b37      	ldr	r3, [pc, #220]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 0203 	bic.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4934      	ldr	r1, [pc, #208]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Get Start Tick */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002248:	f7fe fe8a 	bl	8000f60 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]
||||||| 7f56823
 8002024:	f7fe fe8a 	bl	8000d3c <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]
=======
 8002374:	f7fe fe3c 	bl	8000ff0 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x10e>
||||||| 7f56823
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x10e>
=======
 800237a:	e00a      	b.n	8002392 <HAL_RCC_ClockConfig+0x10e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
<<<<<<< HEAD
 8002250:	f7fe fe86 	bl	8000f60 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x10e>
||||||| 7f56823
 800202c:	f7fe fe86 	bl	8000d3c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
=======
 800237c:	f7fe fe38 	bl	8000ff0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x10e>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        return HAL_TIMEOUT;
<<<<<<< HEAD
 8002262:	2303      	movs	r3, #3
 8002264:	e04f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
||||||| 7f56823
 800203e:	2303      	movs	r3, #3
 8002040:	e04f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800238e:	2303      	movs	r3, #3
 8002390:	e04f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf8>
||||||| 7f56823
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0xf8>
=======
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 020c 	and.w	r2, r3, #12
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1eb      	bne.n	800237c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d20c      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x148>
||||||| 7f56823
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d20c      	bcs.n	800207c <HAL_RCC_ClockConfig+0x148>
=======
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d20c      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x148>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
<<<<<<< HEAD
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
||||||| 7f56823
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
=======
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x148>
||||||| 7f56823
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x148>
=======
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x148>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      return HAL_ERROR;
<<<<<<< HEAD
 800229c:	2301      	movs	r3, #1
 800229e:	e032      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
||||||| 7f56823
 8002078:	2301      	movs	r3, #1
 800207a:	e032      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x166>
||||||| 7f56823
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCC_ClockConfig+0x166>
=======
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x166>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
<<<<<<< HEAD
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4916      	ldr	r1, [pc, #88]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
||||||| 7f56823
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
=======
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x186>
||||||| 7f56823
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_RCC_ClockConfig+0x186>
=======
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x186>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
<<<<<<< HEAD
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
||||||| 7f56823
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
=======
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80022de:	f000 f821 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022e2:	4601      	mov	r1, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	fa21 f303 	lsr.w	r3, r1, r3
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	6013      	str	r3, [r2, #0]
||||||| 7f56823
 80020ba:	f000 f821 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020be:	4601      	mov	r1, r0
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	5cd3      	ldrb	r3, [r2, r3]
 80020ce:	fa21 f303 	lsr.w	r3, r1, r3
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	6013      	str	r3, [r2, #0]
=======
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4601      	mov	r1, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	fa21 f303 	lsr.w	r3, r1, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	6013      	str	r3, [r2, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
<<<<<<< HEAD
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fdea 	bl	8000ed8 <HAL_InitTick>
||||||| 7f56823
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fdea 	bl	8000cb4 <HAL_InitTick>
=======
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fd9c 	bl	8000f68 <HAL_InitTick>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  return HAL_OK;
<<<<<<< HEAD
 8002304:	2300      	movs	r3, #0
||||||| 7f56823
 80020e0:	2300      	movs	r3, #0
=======
 8002430:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00
 8002314:	40023800 	.word	0x40023800
 8002318:	08003724 	.word	0x08003724
 800231c:	20000000 	.word	0x20000000
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_RCC_GetSysClockFreq>:
||||||| 7f56823
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08003500 	.word	0x08003500
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_RCC_GetSysClockFreq>:
=======
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00
 8002440:	40023800 	.word	0x40023800
 8002444:	08003e1c 	.word	0x08003e1c
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
||||||| 7f56823
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
=======
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
<<<<<<< HEAD
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
||||||| 7f56823
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
=======
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint32_t sysclockfreq = 0U;
<<<<<<< HEAD
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
=======
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 800233a:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d007      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x32>
 8002346:	2b08      	cmp	r3, #8
 8002348:	d008      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x38>
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80b4 	bne.w	80024b8 <HAL_RCC_GetSysClockFreq+0x194>
||||||| 7f56823
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d007      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x32>
 8002122:	2b08      	cmp	r3, #8
 8002124:	d008      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x38>
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80b4 	bne.w	8002294 <HAL_RCC_GetSysClockFreq+0x194>
=======
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d007      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x32>
 8002472:	2b08      	cmp	r3, #8
 8002474:	d008      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x38>
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80b4 	bne.w	80025e4 <HAL_RCC_GetSysClockFreq+0x194>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8002350:	4b5e      	ldr	r3, [pc, #376]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002352:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 800212c:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800212e:	60bb      	str	r3, [r7, #8]
=======
 800247c:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800247e:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
       break;
<<<<<<< HEAD
 8002354:	e0b3      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x19a>
||||||| 7f56823
 8002130:	e0b3      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8002480:	e0b3      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002358:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8002132:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002134:	60bb      	str	r3, [r7, #8]
=======
 8002482:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002484:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      break;
<<<<<<< HEAD
 800235a:	e0b0      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x19a>
||||||| 7f56823
 8002136:	e0b0      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8002486:	e0b0      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800235c:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002364:	607b      	str	r3, [r7, #4]
||||||| 7f56823
 8002138:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002140:	607b      	str	r3, [r7, #4]
=======
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002490:	607b      	str	r3, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
<<<<<<< HEAD
 8002366:	4b58      	ldr	r3, [pc, #352]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d04a      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0xe4>
||||||| 7f56823
 8002142:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d04a      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0xe4>
=======
 8002492:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d04a      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0xe4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8002372:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	ea03 0501 	and.w	r5, r3, r1
 8002388:	ea04 0602 	and.w	r6, r4, r2
 800238c:	4629      	mov	r1, r5
 800238e:	4632      	mov	r2, r6
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	f04f 0400 	mov.w	r4, #0
 8002398:	0154      	lsls	r4, r2, #5
 800239a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800239e:	014b      	lsls	r3, r1, #5
 80023a0:	4619      	mov	r1, r3
 80023a2:	4622      	mov	r2, r4
 80023a4:	1b49      	subs	r1, r1, r5
 80023a6:	eb62 0206 	sbc.w	r2, r2, r6
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	0194      	lsls	r4, r2, #6
 80023b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023b8:	018b      	lsls	r3, r1, #6
 80023ba:	1a5b      	subs	r3, r3, r1
 80023bc:	eb64 0402 	sbc.w	r4, r4, r2
 80023c0:	f04f 0100 	mov.w	r1, #0
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	00e2      	lsls	r2, r4, #3
 80023ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023ce:	00d9      	lsls	r1, r3, #3
 80023d0:	460b      	mov	r3, r1
 80023d2:	4614      	mov	r4, r2
 80023d4:	195b      	adds	r3, r3, r5
 80023d6:	eb44 0406 	adc.w	r4, r4, r6
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	0262      	lsls	r2, r4, #9
 80023e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023e8:	0259      	lsls	r1, r3, #9
 80023ea:	460b      	mov	r3, r1
 80023ec:	4614      	mov	r4, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	4621      	mov	r1, r4
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f04f 0400 	mov.w	r4, #0
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	f7fd ff48 	bl	8000290 <__aeabi_uldivmod>
 8002400:	4603      	mov	r3, r0
 8002402:	460c      	mov	r4, r1
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e049      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x178>
||||||| 7f56823
 800214e:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	f04f 0400 	mov.w	r4, #0
 8002158:	f240 11ff 	movw	r1, #511	; 0x1ff
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	ea03 0501 	and.w	r5, r3, r1
 8002164:	ea04 0602 	and.w	r6, r4, r2
 8002168:	4629      	mov	r1, r5
 800216a:	4632      	mov	r2, r6
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	f04f 0400 	mov.w	r4, #0
 8002174:	0154      	lsls	r4, r2, #5
 8002176:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800217a:	014b      	lsls	r3, r1, #5
 800217c:	4619      	mov	r1, r3
 800217e:	4622      	mov	r2, r4
 8002180:	1b49      	subs	r1, r1, r5
 8002182:	eb62 0206 	sbc.w	r2, r2, r6
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	0194      	lsls	r4, r2, #6
 8002190:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002194:	018b      	lsls	r3, r1, #6
 8002196:	1a5b      	subs	r3, r3, r1
 8002198:	eb64 0402 	sbc.w	r4, r4, r2
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	00e2      	lsls	r2, r4, #3
 80021a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021aa:	00d9      	lsls	r1, r3, #3
 80021ac:	460b      	mov	r3, r1
 80021ae:	4614      	mov	r4, r2
 80021b0:	195b      	adds	r3, r3, r5
 80021b2:	eb44 0406 	adc.w	r4, r4, r6
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	0262      	lsls	r2, r4, #9
 80021c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021c4:	0259      	lsls	r1, r3, #9
 80021c6:	460b      	mov	r3, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	4621      	mov	r1, r4
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	461a      	mov	r2, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	f7fe f85a 	bl	8000290 <__aeabi_uldivmod>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e049      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x178>
=======
 800249e:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	f04f 0400 	mov.w	r4, #0
 80024a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	ea03 0501 	and.w	r5, r3, r1
 80024b4:	ea04 0602 	and.w	r6, r4, r2
 80024b8:	4629      	mov	r1, r5
 80024ba:	4632      	mov	r2, r6
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	f04f 0400 	mov.w	r4, #0
 80024c4:	0154      	lsls	r4, r2, #5
 80024c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ca:	014b      	lsls	r3, r1, #5
 80024cc:	4619      	mov	r1, r3
 80024ce:	4622      	mov	r2, r4
 80024d0:	1b49      	subs	r1, r1, r5
 80024d2:	eb62 0206 	sbc.w	r2, r2, r6
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	f04f 0400 	mov.w	r4, #0
 80024de:	0194      	lsls	r4, r2, #6
 80024e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024e4:	018b      	lsls	r3, r1, #6
 80024e6:	1a5b      	subs	r3, r3, r1
 80024e8:	eb64 0402 	sbc.w	r4, r4, r2
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	00e2      	lsls	r2, r4, #3
 80024f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024fa:	00d9      	lsls	r1, r3, #3
 80024fc:	460b      	mov	r3, r1
 80024fe:	4614      	mov	r4, r2
 8002500:	195b      	adds	r3, r3, r5
 8002502:	eb44 0406 	adc.w	r4, r4, r6
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	0262      	lsls	r2, r4, #9
 8002510:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002514:	0259      	lsls	r1, r3, #9
 8002516:	460b      	mov	r3, r1
 8002518:	4614      	mov	r4, r2
 800251a:	4618      	mov	r0, r3
 800251c:	4621      	mov	r1, r4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f04f 0400 	mov.w	r4, #0
 8002524:	461a      	mov	r2, r3
 8002526:	4623      	mov	r3, r4
 8002528:	f7fd feb2 	bl	8000290 <__aeabi_uldivmod>
 800252c:	4603      	mov	r3, r0
 800252e:	460c      	mov	r4, r1
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	e049      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x178>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	f04f 0400 	mov.w	r4, #0
 8002412:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	ea03 0501 	and.w	r5, r3, r1
 800241e:	ea04 0602 	and.w	r6, r4, r2
 8002422:	4629      	mov	r1, r5
 8002424:	4632      	mov	r2, r6
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	f04f 0400 	mov.w	r4, #0
 800242e:	0154      	lsls	r4, r2, #5
 8002430:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002434:	014b      	lsls	r3, r1, #5
 8002436:	4619      	mov	r1, r3
 8002438:	4622      	mov	r2, r4
 800243a:	1b49      	subs	r1, r1, r5
 800243c:	eb62 0206 	sbc.w	r2, r2, r6
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	f04f 0400 	mov.w	r4, #0
 8002448:	0194      	lsls	r4, r2, #6
 800244a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800244e:	018b      	lsls	r3, r1, #6
 8002450:	1a5b      	subs	r3, r3, r1
 8002452:	eb64 0402 	sbc.w	r4, r4, r2
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	00e2      	lsls	r2, r4, #3
 8002460:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002464:	00d9      	lsls	r1, r3, #3
 8002466:	460b      	mov	r3, r1
 8002468:	4614      	mov	r4, r2
 800246a:	195b      	adds	r3, r3, r5
 800246c:	eb44 0406 	adc.w	r4, r4, r6
 8002470:	f04f 0100 	mov.w	r1, #0
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	02a2      	lsls	r2, r4, #10
 800247a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800247e:	0299      	lsls	r1, r3, #10
 8002480:	460b      	mov	r3, r1
 8002482:	4614      	mov	r4, r2
 8002484:	4618      	mov	r0, r3
 8002486:	4621      	mov	r1, r4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f04f 0400 	mov.w	r4, #0
 800248e:	461a      	mov	r2, r3
 8002490:	4623      	mov	r3, r4
 8002492:	f7fd fefd 	bl	8000290 <__aeabi_uldivmod>
 8002496:	4603      	mov	r3, r0
 8002498:	460c      	mov	r4, r1
 800249a:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 80021e4:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	ea03 0501 	and.w	r5, r3, r1
 80021fa:	ea04 0602 	and.w	r6, r4, r2
 80021fe:	4629      	mov	r1, r5
 8002200:	4632      	mov	r2, r6
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	f04f 0400 	mov.w	r4, #0
 800220a:	0154      	lsls	r4, r2, #5
 800220c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002210:	014b      	lsls	r3, r1, #5
 8002212:	4619      	mov	r1, r3
 8002214:	4622      	mov	r2, r4
 8002216:	1b49      	subs	r1, r1, r5
 8002218:	eb62 0206 	sbc.w	r2, r2, r6
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f04f 0400 	mov.w	r4, #0
 8002224:	0194      	lsls	r4, r2, #6
 8002226:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800222a:	018b      	lsls	r3, r1, #6
 800222c:	1a5b      	subs	r3, r3, r1
 800222e:	eb64 0402 	sbc.w	r4, r4, r2
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	00e2      	lsls	r2, r4, #3
 800223c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002240:	00d9      	lsls	r1, r3, #3
 8002242:	460b      	mov	r3, r1
 8002244:	4614      	mov	r4, r2
 8002246:	195b      	adds	r3, r3, r5
 8002248:	eb44 0406 	adc.w	r4, r4, r6
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	02a2      	lsls	r2, r4, #10
 8002256:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800225a:	0299      	lsls	r1, r3, #10
 800225c:	460b      	mov	r3, r1
 800225e:	4614      	mov	r4, r2
 8002260:	4618      	mov	r0, r3
 8002262:	4621      	mov	r1, r4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 0400 	mov.w	r4, #0
 800226a:	461a      	mov	r2, r3
 800226c:	4623      	mov	r3, r4
 800226e:	f7fe f80f 	bl	8000290 <__aeabi_uldivmod>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	60fb      	str	r3, [r7, #12]
=======
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	f04f 0400 	mov.w	r4, #0
 800253e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	ea03 0501 	and.w	r5, r3, r1
 800254a:	ea04 0602 	and.w	r6, r4, r2
 800254e:	4629      	mov	r1, r5
 8002550:	4632      	mov	r2, r6
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	f04f 0400 	mov.w	r4, #0
 800255a:	0154      	lsls	r4, r2, #5
 800255c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002560:	014b      	lsls	r3, r1, #5
 8002562:	4619      	mov	r1, r3
 8002564:	4622      	mov	r2, r4
 8002566:	1b49      	subs	r1, r1, r5
 8002568:	eb62 0206 	sbc.w	r2, r2, r6
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	0194      	lsls	r4, r2, #6
 8002576:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800257a:	018b      	lsls	r3, r1, #6
 800257c:	1a5b      	subs	r3, r3, r1
 800257e:	eb64 0402 	sbc.w	r4, r4, r2
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	00e2      	lsls	r2, r4, #3
 800258c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002590:	00d9      	lsls	r1, r3, #3
 8002592:	460b      	mov	r3, r1
 8002594:	4614      	mov	r4, r2
 8002596:	195b      	adds	r3, r3, r5
 8002598:	eb44 0406 	adc.w	r4, r4, r6
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	02a2      	lsls	r2, r4, #10
 80025a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025aa:	0299      	lsls	r1, r3, #10
 80025ac:	460b      	mov	r3, r1
 80025ae:	4614      	mov	r4, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	4621      	mov	r1, r4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4623      	mov	r3, r4
 80025be:	f7fd fe67 	bl	8000290 <__aeabi_uldivmod>
 80025c2:	4603      	mov	r3, r0
 80025c4:	460c      	mov	r4, r1
 80025c6:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
<<<<<<< HEAD
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	603b      	str	r3, [r7, #0]
||||||| 7f56823
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	603b      	str	r3, [r7, #0]
=======
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	3301      	adds	r3, #1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	603b      	str	r3, [r7, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

      sysclockfreq = pllvco/pllp;
<<<<<<< HEAD
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	60bb      	str	r3, [r7, #8]
=======
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      break;
<<<<<<< HEAD
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x19a>
||||||| 7f56823
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x19a>
=======
 80025e2:	e002      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024ba:	60bb      	str	r3, [r7, #8]
||||||| 7f56823
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002296:	60bb      	str	r3, [r7, #8]
=======
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025e6:	60bb      	str	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      break;
<<<<<<< HEAD
 80024bc:	bf00      	nop
||||||| 7f56823
 8002298:	bf00      	nop
=======
 80025e8:	bf00      	nop
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }
  }
  return sysclockfreq;
<<<<<<< HEAD
 80024be:	68bb      	ldr	r3, [r7, #8]
||||||| 7f56823
 800229a:	68bb      	ldr	r3, [r7, #8]
=======
 80025ea:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	007a1200 	.word	0x007a1200

080024d4 <HAL_RCC_GetHCLKFreq>:
||||||| 7f56823
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200

080022b0 <HAL_RCC_GetHCLKFreq>:
=======
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
||||||| 7f56823
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
=======
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  return SystemCoreClock;
<<<<<<< HEAD
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
||||||| 7f56823
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
=======
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_RCC_GetPCLK1Freq>:
||||||| 7f56823
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK1Freq>:
=======
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
||||||| 7f56823
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
=======
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
<<<<<<< HEAD
 80024f0:	f7ff fff0 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 80024f4:	4601      	mov	r1, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4a03      	ldr	r2, [pc, #12]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	fa21 f303 	lsr.w	r3, r1, r3
||||||| 7f56823
 80022cc:	f7ff fff0 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022d0:	4601      	mov	r1, r0
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0a9b      	lsrs	r3, r3, #10
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	fa21 f303 	lsr.w	r3, r1, r3
=======
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4601      	mov	r1, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a9b      	lsrs	r3, r3, #10
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4a03      	ldr	r2, [pc, #12]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	fa21 f303 	lsr.w	r3, r1, r3
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	08003734 	.word	0x08003734
||||||| 7f56823
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40023800 	.word	0x40023800
 80022ec:	08003510 	.word	0x08003510
=======
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08003e2c 	.word	0x08003e2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08002514 <HAL_RCC_GetPCLK2Freq>:
||||||| 7f56823
080022f0 <HAL_RCC_GetPCLK2Freq>:
=======
08002640 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
||||||| 7f56823
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
=======
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
<<<<<<< HEAD
 8002518:	f7ff ffdc 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 800251c:	4601      	mov	r1, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0b5b      	lsrs	r3, r3, #13
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4a03      	ldr	r2, [pc, #12]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	fa21 f303 	lsr.w	r3, r1, r3
||||||| 7f56823
 80022f4:	f7ff ffdc 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022f8:	4601      	mov	r1, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0b5b      	lsrs	r3, r3, #13
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	fa21 f303 	lsr.w	r3, r1, r3
=======
 8002644:	f7ff ffdc 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002648:	4601      	mov	r1, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0b5b      	lsrs	r3, r3, #13
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	fa21 f303 	lsr.w	r3, r1, r3
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	08003734 	.word	0x08003734
||||||| 7f56823
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	08003510 	.word	0x08003510
=======
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	08003e2c 	.word	0x08003e2c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
0800253c <HAL_UART_Init>:
||||||| 7f56823
08002318 <HAL_UART_Init>:
=======
08002668 <HAL_UART_Init>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
=======
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Check the UART handle allocation */
  if (huart == NULL)
<<<<<<< HEAD
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x12>
||||||| 7f56823
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Init+0x12>
=======
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800254a:	2301      	movs	r3, #1
 800254c:	e03f      	b.n	80025ce <HAL_UART_Init+0x92>
||||||| 7f56823
 8002326:	2301      	movs	r3, #1
 8002328:	e03f      	b.n	80023aa <HAL_UART_Init+0x92>
=======
 8002676:	2301      	movs	r3, #1
 8002678:	e03f      	b.n	80026fa <HAL_UART_Init+0x92>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_UART_Init+0x2c>
||||||| 7f56823
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <HAL_UART_Init+0x2c>
=======
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_UART_Init+0x2c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
||||||| 7f56823
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fb44 	bl	8000bf0 <HAL_UART_MspInit>
||||||| 7f56823
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe fbae 	bl	8000aa0 <HAL_UART_MspInit>
=======
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fae4 	bl	8000c5c <HAL_UART_MspInit>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
||||||| 7f56823
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2224      	movs	r2, #36	; 0x24
 8002348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
<<<<<<< HEAD
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800257e:	60da      	str	r2, [r3, #12]
||||||| 7f56823
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800235a:	60da      	str	r2, [r3, #12]
=======
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026aa:	60da      	str	r2, [r3, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
<<<<<<< HEAD
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f90b 	bl	800279c <UART_SetConfig>
||||||| 7f56823
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f90b 	bl	8002578 <UART_SetConfig>
=======
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fbf1 	bl	8002e94 <UART_SetConfig>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002594:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002370:	611a      	str	r2, [r3, #16]
=======
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c0:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
<<<<<<< HEAD
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a4:	615a      	str	r2, [r3, #20]
||||||| 7f56823
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002380:	615a      	str	r2, [r3, #20]
=======
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d0:	615a      	str	r2, [r3, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
<<<<<<< HEAD
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b4:	60da      	str	r2, [r3, #12]
||||||| 7f56823
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002390:	60da      	str	r2, [r3, #12]
=======
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e0:	60da      	str	r2, [r3, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
||||||| 7f56823
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
||||||| 7f56823
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  return HAL_OK;
<<<<<<< HEAD
 80025cc:	2300      	movs	r3, #0
||||||| 7f56823
 80023a8:	2300      	movs	r3, #0
=======
 80026f8:	2300      	movs	r3, #0
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
||||||| 7f56823
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
=======
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
080025d6 <HAL_UART_Transmit>:
||||||| 7f56823
080023b2 <HAL_UART_Transmit>:
=======
08002702 <HAL_UART_Transmit>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b088      	sub	sp, #32
 80025da:	af02      	add	r7, sp, #8
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
||||||| 7f56823
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af02      	add	r7, sp, #8
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
=======
 8002702:	b580      	push	{r7, lr}
 8002704:	b088      	sub	sp, #32
 8002706:	af02      	add	r7, sp, #8
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  uint16_t *tmp;
  uint32_t tickstart = 0U;
<<<<<<< HEAD
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
||||||| 7f56823
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
=======
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 8083 	bne.w	80026fe <HAL_UART_Transmit+0x128>
||||||| 7f56823
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	f040 8083 	bne.w	80024da <HAL_UART_Transmit+0x128>
=======
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	f040 8083 	bne.w	800282a <HAL_UART_Transmit+0x128>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    if ((pData == NULL) || (Size == 0U))
<<<<<<< HEAD
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Transmit+0x2e>
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_UART_Transmit+0x32>
||||||| 7f56823
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_UART_Transmit+0x2e>
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_UART_Transmit+0x32>
=======
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Transmit+0x2e>
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_UART_Transmit+0x32>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      return  HAL_ERROR;
<<<<<<< HEAD
 8002604:	2301      	movs	r3, #1
 8002606:	e07b      	b.n	8002700 <HAL_UART_Transmit+0x12a>
||||||| 7f56823
 80023e0:	2301      	movs	r3, #1
 80023e2:	e07b      	b.n	80024dc <HAL_UART_Transmit+0x12a>
=======
 8002730:	2301      	movs	r3, #1
 8002732:	e07b      	b.n	800282c <HAL_UART_Transmit+0x12a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_UART_Transmit+0x40>
 8002612:	2302      	movs	r3, #2
 8002614:	e074      	b.n	8002700 <HAL_UART_Transmit+0x12a>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
||||||| 7f56823
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Transmit+0x40>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e074      	b.n	80024dc <HAL_UART_Transmit+0x12a>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_UART_Transmit+0x40>
 800273e:	2302      	movs	r3, #2
 8002740:	e074      	b.n	800282c <HAL_UART_Transmit+0x12a>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
||||||| 7f56823
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    huart->gState = HAL_UART_STATE_BUSY_TX;
<<<<<<< HEAD
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2221      	movs	r2, #33	; 0x21
 8002628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
||||||| 7f56823
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2221      	movs	r2, #33	; 0x21
 8002404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2221      	movs	r2, #33	; 0x21
 8002754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 800262c:	f7fe fc98 	bl	8000f60 <HAL_GetTick>
 8002630:	6178      	str	r0, [r7, #20]
||||||| 7f56823
 8002408:	f7fe fc98 	bl	8000d3c <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]
=======
 8002758:	f7fe fc4a 	bl	8000ff0 <HAL_GetTick>
 800275c:	6178      	str	r0, [r7, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    huart->TxXferSize = Size;
<<<<<<< HEAD
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	849a      	strh	r2, [r3, #36]	; 0x24
||||||| 7f56823
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	849a      	strh	r2, [r3, #36]	; 0x24
=======
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	849a      	strh	r2, [r3, #36]	; 0x24
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    huart->TxXferCount = Size;
<<<<<<< HEAD
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	88fa      	ldrh	r2, [r7, #6]
 800263c:	84da      	strh	r2, [r3, #38]	; 0x26
||||||| 7f56823
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
||||||| 7f56823
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 8002646:	e042      	b.n	80026ce <HAL_UART_Transmit+0xf8>
||||||| 7f56823
 8002422:	e042      	b.n	80024aa <HAL_UART_Transmit+0xf8>
=======
 8002772:	e042      	b.n	80027fa <HAL_UART_Transmit+0xf8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      huart->TxXferCount--;
<<<<<<< HEAD
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	84da      	strh	r2, [r3, #38]	; 0x26
||||||| 7f56823
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
<<<<<<< HEAD
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265e:	d122      	bne.n	80026a6 <HAL_UART_Transmit+0xd0>
||||||| 7f56823
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243a:	d122      	bne.n	8002482 <HAL_UART_Transmit+0xd0>
=======
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d122      	bne.n	80027d2 <HAL_UART_Transmit+0xd0>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2200      	movs	r2, #0
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f84c 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_UART_Transmit+0xa4>
||||||| 7f56823
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2200      	movs	r2, #0
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f84c 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_Transmit+0xa4>
=======
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fa10 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_UART_Transmit+0xa4>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8002676:	2303      	movs	r3, #3
 8002678:	e042      	b.n	8002700 <HAL_UART_Transmit+0x12a>
||||||| 7f56823
 8002452:	2303      	movs	r3, #3
 8002454:	e042      	b.n	80024dc <HAL_UART_Transmit+0x12a>
=======
 80027a2:	2303      	movs	r3, #3
 80027a4:	e042      	b.n	800282c <HAL_UART_Transmit+0x12a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
        tmp = (uint16_t *) pData;
<<<<<<< HEAD
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	613b      	str	r3, [r7, #16]
||||||| 7f56823
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	613b      	str	r3, [r7, #16]
=======
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	613b      	str	r3, [r7, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
<<<<<<< HEAD
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800268c:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002468:	605a      	str	r2, [r3, #4]
=======
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b8:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        if (huart->Init.Parity == UART_PARITY_NONE)
<<<<<<< HEAD
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_UART_Transmit+0xc8>
||||||| 7f56823
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <HAL_UART_Transmit+0xc8>
=======
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_UART_Transmit+0xc8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          pData += 2U;
<<<<<<< HEAD
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3302      	adds	r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	e017      	b.n	80026ce <HAL_UART_Transmit+0xf8>
||||||| 7f56823
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3302      	adds	r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	e017      	b.n	80024aa <HAL_UART_Transmit+0xf8>
=======
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3302      	adds	r3, #2
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	e017      	b.n	80027fa <HAL_UART_Transmit+0xf8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
        else
        {
          pData += 1U;
<<<<<<< HEAD
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3301      	adds	r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	e013      	b.n	80026ce <HAL_UART_Transmit+0xf8>
||||||| 7f56823
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	e013      	b.n	80024aa <HAL_UART_Transmit+0xf8>
=======
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	e013      	b.n	80027fa <HAL_UART_Transmit+0xf8>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f829 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_Transmit+0xea>
||||||| 7f56823
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f829 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0xea>
=======
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2200      	movs	r2, #0
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f9ed 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_Transmit+0xea>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 80026bc:	2303      	movs	r3, #3
 80026be:	e01f      	b.n	8002700 <HAL_UART_Transmit+0x12a>
||||||| 7f56823
 8002498:	2303      	movs	r3, #3
 800249a:	e01f      	b.n	80024dc <HAL_UART_Transmit+0x12a>
=======
 80027e8:	2303      	movs	r3, #3
 80027ea:	e01f      	b.n	800282c <HAL_UART_Transmit+0x12a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
<<<<<<< HEAD
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	60ba      	str	r2, [r7, #8]
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
||||||| 7f56823
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	60ba      	str	r2, [r7, #8]
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
=======
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1b7      	bne.n	8002648 <HAL_UART_Transmit+0x72>
||||||| 7f56823
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1b7      	bne.n	8002424 <HAL_UART_Transmit+0x72>
=======
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1b7      	bne.n	8002774 <HAL_UART_Transmit+0x72>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2200      	movs	r2, #0
 80026e0:	2140      	movs	r1, #64	; 0x40
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f810 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_UART_Transmit+0x11c>
||||||| 7f56823
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f810 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_UART_Transmit+0x11c>
=======
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2200      	movs	r2, #0
 800280c:	2140      	movs	r1, #64	; 0x40
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f9d4 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_UART_Transmit+0x11c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      return HAL_TIMEOUT;
<<<<<<< HEAD
 80026ee:	2303      	movs	r3, #3
 80026f0:	e006      	b.n	8002700 <HAL_UART_Transmit+0x12a>
||||||| 7f56823
 80024ca:	2303      	movs	r3, #3
 80024cc:	e006      	b.n	80024dc <HAL_UART_Transmit+0x12a>
=======
 800281a:	2303      	movs	r3, #3
 800281c:	e006      	b.n	800282c <HAL_UART_Transmit+0x12a>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
||||||| 7f56823
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b20      	cmp	r3, #32
 8002852:	f040 8090 	bne.w	8002976 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_UART_Receive+0x2e>
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e088      	b.n	8002978 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_UART_Receive+0x40>
 8002870:	2302      	movs	r3, #2
 8002872:	e081      	b.n	8002978 <HAL_UART_Receive+0x144>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2222      	movs	r2, #34	; 0x22
 8002886:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800288a:	f7fe fbb1 	bl	8000ff0 <HAL_GetTick>
 800288e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028a4:	e05c      	b.n	8002960 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028bc:	d12b      	bne.n	8002916 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2120      	movs	r1, #32
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f977 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e04f      	b.n	8002978 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10c      	bne.n	80028fe <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3302      	adds	r3, #2
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	e030      	b.n	8002960 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	b29b      	uxth	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	b29a      	uxth	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3301      	adds	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	e024      	b.n	8002960 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	2120      	movs	r1, #32
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f94b 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e023      	b.n	8002978 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d108      	bne.n	800294a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	60ba      	str	r2, [r7, #8]
 8002944:	b2ca      	uxtb	r2, r1
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e00a      	b.n	8002960 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d19d      	bne.n	80028a6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

    return HAL_OK;
<<<<<<< HEAD
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_UART_Transmit+0x12a>
||||||| 7f56823
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_UART_Transmit+0x12a>
=======
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_UART_Receive+0x144>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80026fe:	2302      	movs	r3, #2
||||||| 7f56823
 80024da:	2302      	movs	r3, #2
=======
 8002976:	2302      	movs	r3, #2
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  }
}
<<<<<<< HEAD
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
||||||| 7f56823
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
=======
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_UART_IRQHandler+0x52>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9e0 	bl	8002d90 <UART_Receive_IT>
      return;
 80029d0:	e0d1      	b.n	8002b76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80b0 	beq.w	8002b3a <HAL_UART_IRQHandler+0x1ba>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_UART_IRQHandler+0x70>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80a5 	beq.w	8002b3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_UART_IRQHandler+0x90>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_UART_IRQHandler+0xb0>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_UART_IRQHandler+0xd0>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00f      	beq.n	8002a7a <HAL_UART_IRQHandler+0xfa>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <HAL_UART_IRQHandler+0xee>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d078      	beq.n	8002b74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_UART_IRQHandler+0x11c>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f97a 	bl	8002d90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x144>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d031      	beq.n	8002b28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f8c3 	bl	8002c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d123      	bne.n	8002b20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <HAL_UART_IRQHandler+0x1fc>)
 8002af6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe ff92 	bl	8001a26 <HAL_DMA_Abort_IT>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d016      	beq.n	8002b36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b12:	4610      	mov	r0, r2
 8002b14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b16:	e00e      	b.n	8002b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f845 	bl	8002ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1e:	e00a      	b.n	8002b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f841 	bl	8002ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b26:	e006      	b.n	8002b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f83d 	bl	8002ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b34:	e01e      	b.n	8002b74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b36:	bf00      	nop
    return;
 8002b38:	e01c      	b.n	8002b74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1d6>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8b0 	bl	8002cb4 <UART_Transmit_IT>
    return;
 8002b54:	e00f      	b.n	8002b76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_UART_IRQHandler+0x1f6>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8f8 	bl	8002d60 <UART_EndTransmit_IT>
    return;
 8002b70:	bf00      	nop
 8002b72:	e000      	b.n	8002b76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002b74:	bf00      	nop
  }
}
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	08002c8d 	.word	0x08002c8d

08002b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
08002708 <UART_WaitOnFlagUntilTimeout>:
||||||| 7f56823
080024e4 <UART_WaitOnFlagUntilTimeout>:
=======
08002bbc <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	71fb      	strb	r3, [r7, #7]
||||||| 7f56823
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
=======
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71fb      	strb	r3, [r7, #7]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 8002718:	e02c      	b.n	8002774 <UART_WaitOnFlagUntilTimeout+0x6c>
||||||| 7f56823
 80024f4:	e02c      	b.n	8002550 <UART_WaitOnFlagUntilTimeout+0x6c>
=======
 8002bcc:	e02c      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x6c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d028      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x6c>
||||||| 7f56823
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d028      	beq.n	8002550 <UART_WaitOnFlagUntilTimeout+0x6c>
=======
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d028      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x6c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
<<<<<<< HEAD
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <UART_WaitOnFlagUntilTimeout+0x30>
 8002728:	f7fe fc1a 	bl	8000f60 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	429a      	cmp	r2, r3
 8002736:	d21d      	bcs.n	8002774 <UART_WaitOnFlagUntilTimeout+0x6c>
||||||| 7f56823
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x30>
 8002504:	f7fe fc1a 	bl	8000d3c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	429a      	cmp	r2, r3
 8002512:	d21d      	bcs.n	8002550 <UART_WaitOnFlagUntilTimeout+0x6c>
=======
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <UART_WaitOnFlagUntilTimeout+0x30>
 8002bdc:	f7fe fa08 	bl	8000ff0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d21d      	bcs.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x6c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002746:	60da      	str	r2, [r3, #12]
||||||| 7f56823
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002522:	60da      	str	r2, [r3, #12]
=======
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bfa:	60da      	str	r2, [r3, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	615a      	str	r2, [r3, #20]
||||||| 7f56823
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	615a      	str	r2, [r3, #20]
=======
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	615a      	str	r2, [r3, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        huart->gState  = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
||||||| 7f56823
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
||||||| 7f56823
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
||||||| 7f56823
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

        return HAL_TIMEOUT;
<<<<<<< HEAD
 8002770:	2303      	movs	r3, #3
 8002772:	e00f      	b.n	8002794 <UART_WaitOnFlagUntilTimeout+0x8c>
||||||| 7f56823
 800254c:	2303      	movs	r3, #3
 800254e:	e00f      	b.n	8002570 <UART_WaitOnFlagUntilTimeout+0x8c>
=======
 8002c24:	2303      	movs	r3, #3
 8002c26:	e00f      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x8c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4013      	ands	r3, r2
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	429a      	cmp	r2, r3
 8002790:	d0c3      	beq.n	800271a <UART_WaitOnFlagUntilTimeout+0x12>
||||||| 7f56823
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	429a      	cmp	r2, r3
 800256c:	d0c3      	beq.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d0c3      	beq.n	8002bce <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002792:	2300      	movs	r3, #0
||||||| 7f56823
 800256e:	2300      	movs	r3, #0
=======
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff ff7e 	bl	8002ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b21      	cmp	r3, #33	; 0x21
 8002cc6:	d144      	bne.n	8002d52 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d11a      	bne.n	8002d08 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	1c9a      	adds	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	621a      	str	r2, [r3, #32]
 8002cfa:	e00e      	b.n	8002d1a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	621a      	str	r2, [r3, #32]
 8002d06:	e008      	b.n	8002d1a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	1c59      	adds	r1, r3, #1
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6211      	str	r1, [r2, #32]
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4619      	mov	r1, r3
 8002d28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
||||||| 7f56823
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
=======
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff fefd 	bl	8002b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b22      	cmp	r3, #34	; 0x22
 8002da2:	d171      	bne.n	8002e88 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d123      	bne.n	8002df6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10e      	bne.n	8002dda <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd8:	e029      	b.n	8002e2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
 8002df4:	e01b      	b.n	8002e2e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6858      	ldr	r0, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6291      	str	r1, [r2, #40]	; 0x28
 8002e0e:	b2c2      	uxtb	r2, r0
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e00c      	b.n	8002e2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	1c58      	adds	r0, r3, #1
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	6288      	str	r0, [r1, #40]	; 0x28
 8002e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d120      	bne.n	8002e84 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0220 	bic.w	r2, r2, #32
 8002e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff fe8a 	bl	8002b94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e002      	b.n	8002e8a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

<<<<<<< HEAD
0800279c <UART_SetConfig>:
||||||| 7f56823
08002578 <UART_SetConfig>:
=======
08002e94 <UART_SetConfig>:
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
||||||| 7f56823
 8002578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
=======
 8002e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	611a      	str	r2, [r3, #16]
||||||| 7f56823
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	611a      	str	r2, [r3, #16]
=======
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	611a      	str	r2, [r3, #16]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
||||||| 7f56823
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
=======
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
  MODIFY_REG(huart->Instance->CR1,
<<<<<<< HEAD
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027de:	f023 030c 	bic.w	r3, r3, #12
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	60d3      	str	r3, [r2, #12]
||||||| 7f56823
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025ba:	f023 030c 	bic.w	r3, r3, #12
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	60d3      	str	r3, [r2, #12]
=======
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ed6:	f023 030c 	bic.w	r3, r3, #12
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	60d3      	str	r3, [r2, #12]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	615a      	str	r2, [r3, #20]
||||||| 7f56823
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	615a      	str	r2, [r3, #20]
=======
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	615a      	str	r2, [r3, #20]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280a:	f040 818b 	bne.w	8002b24 <UART_SetConfig+0x388>
||||||| 7f56823
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e6:	f040 818b 	bne.w	8002900 <UART_SetConfig+0x388>
=======
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f02:	f040 818b 	bne.w	800321c <UART_SetConfig+0x388>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4ac1      	ldr	r2, [pc, #772]	; (8002b18 <UART_SetConfig+0x37c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d005      	beq.n	8002824 <UART_SetConfig+0x88>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4abf      	ldr	r2, [pc, #764]	; (8002b1c <UART_SetConfig+0x380>)
 800281e:	4293      	cmp	r3, r2
 8002820:	f040 80bd 	bne.w	800299e <UART_SetConfig+0x202>
||||||| 7f56823
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4ac1      	ldr	r2, [pc, #772]	; (80028f4 <UART_SetConfig+0x37c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d005      	beq.n	8002600 <UART_SetConfig+0x88>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4abf      	ldr	r2, [pc, #764]	; (80028f8 <UART_SetConfig+0x380>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	f040 80bd 	bne.w	800277a <UART_SetConfig+0x202>
=======
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4ac1      	ldr	r2, [pc, #772]	; (8003210 <UART_SetConfig+0x37c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <UART_SetConfig+0x88>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4abf      	ldr	r2, [pc, #764]	; (8003214 <UART_SetConfig+0x380>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f040 80bd 	bne.w	8003096 <UART_SetConfig+0x202>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      pclk = HAL_RCC_GetPCLK2Freq();
<<<<<<< HEAD
 8002824:	f7ff fe76 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8002828:	60b8      	str	r0, [r7, #8]
||||||| 7f56823
 8002600:	f7ff fe76 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 8002604:	60b8      	str	r0, [r7, #8]
=======
 8002f1c:	f7ff fb90 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8002f20:	60b8      	str	r0, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	461d      	mov	r5, r3
 800282e:	f04f 0600 	mov.w	r6, #0
 8002832:	46a8      	mov	r8, r5
 8002834:	46b1      	mov	r9, r6
 8002836:	eb18 0308 	adds.w	r3, r8, r8
 800283a:	eb49 0409 	adc.w	r4, r9, r9
 800283e:	4698      	mov	r8, r3
 8002840:	46a1      	mov	r9, r4
 8002842:	eb18 0805 	adds.w	r8, r8, r5
 8002846:	eb49 0906 	adc.w	r9, r9, r6
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002856:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800285a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800285e:	4688      	mov	r8, r1
 8002860:	4691      	mov	r9, r2
 8002862:	eb18 0005 	adds.w	r0, r8, r5
 8002866:	eb49 0106 	adc.w	r1, r9, r6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	461d      	mov	r5, r3
 8002870:	f04f 0600 	mov.w	r6, #0
 8002874:	196b      	adds	r3, r5, r5
 8002876:	eb46 0406 	adc.w	r4, r6, r6
 800287a:	461a      	mov	r2, r3
 800287c:	4623      	mov	r3, r4
 800287e:	f7fd fd07 	bl	8000290 <__aeabi_uldivmod>
 8002882:	4603      	mov	r3, r0
 8002884:	460c      	mov	r4, r1
 8002886:	461a      	mov	r2, r3
 8002888:	4ba5      	ldr	r3, [pc, #660]	; (8002b20 <UART_SetConfig+0x384>)
 800288a:	fba3 2302 	umull	r2, r3, r3, r2
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	461d      	mov	r5, r3
 8002898:	f04f 0600 	mov.w	r6, #0
 800289c:	46a9      	mov	r9, r5
 800289e:	46b2      	mov	sl, r6
 80028a0:	eb19 0309 	adds.w	r3, r9, r9
 80028a4:	eb4a 040a 	adc.w	r4, sl, sl
 80028a8:	4699      	mov	r9, r3
 80028aa:	46a2      	mov	sl, r4
 80028ac:	eb19 0905 	adds.w	r9, r9, r5
 80028b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028c8:	4689      	mov	r9, r1
 80028ca:	4692      	mov	sl, r2
 80028cc:	eb19 0005 	adds.w	r0, r9, r5
 80028d0:	eb4a 0106 	adc.w	r1, sl, r6
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	461d      	mov	r5, r3
 80028da:	f04f 0600 	mov.w	r6, #0
 80028de:	196b      	adds	r3, r5, r5
 80028e0:	eb46 0406 	adc.w	r4, r6, r6
 80028e4:	461a      	mov	r2, r3
 80028e6:	4623      	mov	r3, r4
 80028e8:	f7fd fcd2 	bl	8000290 <__aeabi_uldivmod>
 80028ec:	4603      	mov	r3, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <UART_SetConfig+0x384>)
 80028f4:	fba3 1302 	umull	r1, r3, r3, r2
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	2164      	movs	r1, #100	; 0x64
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3332      	adds	r3, #50	; 0x32
 8002906:	4a86      	ldr	r2, [pc, #536]	; (8002b20 <UART_SetConfig+0x384>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002914:	4498      	add	r8, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	461d      	mov	r5, r3
 800291a:	f04f 0600 	mov.w	r6, #0
 800291e:	46a9      	mov	r9, r5
 8002920:	46b2      	mov	sl, r6
 8002922:	eb19 0309 	adds.w	r3, r9, r9
 8002926:	eb4a 040a 	adc.w	r4, sl, sl
 800292a:	4699      	mov	r9, r3
 800292c:	46a2      	mov	sl, r4
 800292e:	eb19 0905 	adds.w	r9, r9, r5
 8002932:	eb4a 0a06 	adc.w	sl, sl, r6
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002942:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002946:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800294a:	4689      	mov	r9, r1
 800294c:	4692      	mov	sl, r2
 800294e:	eb19 0005 	adds.w	r0, r9, r5
 8002952:	eb4a 0106 	adc.w	r1, sl, r6
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	461d      	mov	r5, r3
 800295c:	f04f 0600 	mov.w	r6, #0
 8002960:	196b      	adds	r3, r5, r5
 8002962:	eb46 0406 	adc.w	r4, r6, r6
 8002966:	461a      	mov	r2, r3
 8002968:	4623      	mov	r3, r4
 800296a:	f7fd fc91 	bl	8000290 <__aeabi_uldivmod>
 800296e:	4603      	mov	r3, r0
 8002970:	460c      	mov	r4, r1
 8002972:	461a      	mov	r2, r3
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <UART_SetConfig+0x384>)
 8002976:	fba3 1302 	umull	r1, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2164      	movs	r1, #100	; 0x64
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	3332      	adds	r3, #50	; 0x32
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <UART_SetConfig+0x384>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	f003 0207 	and.w	r2, r3, #7
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4442      	add	r2, r8
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e26f      	b.n	8002e7e <UART_SetConfig+0x6e2>
||||||| 7f56823
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	461d      	mov	r5, r3
 800260a:	f04f 0600 	mov.w	r6, #0
 800260e:	46a8      	mov	r8, r5
 8002610:	46b1      	mov	r9, r6
 8002612:	eb18 0308 	adds.w	r3, r8, r8
 8002616:	eb49 0409 	adc.w	r4, r9, r9
 800261a:	4698      	mov	r8, r3
 800261c:	46a1      	mov	r9, r4
 800261e:	eb18 0805 	adds.w	r8, r8, r5
 8002622:	eb49 0906 	adc.w	r9, r9, r6
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002632:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002636:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800263a:	4688      	mov	r8, r1
 800263c:	4691      	mov	r9, r2
 800263e:	eb18 0005 	adds.w	r0, r8, r5
 8002642:	eb49 0106 	adc.w	r1, r9, r6
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	461d      	mov	r5, r3
 800264c:	f04f 0600 	mov.w	r6, #0
 8002650:	196b      	adds	r3, r5, r5
 8002652:	eb46 0406 	adc.w	r4, r6, r6
 8002656:	461a      	mov	r2, r3
 8002658:	4623      	mov	r3, r4
 800265a:	f7fd fe19 	bl	8000290 <__aeabi_uldivmod>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	461a      	mov	r2, r3
 8002664:	4ba5      	ldr	r3, [pc, #660]	; (80028fc <UART_SetConfig+0x384>)
 8002666:	fba3 2302 	umull	r2, r3, r3, r2
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	461d      	mov	r5, r3
 8002674:	f04f 0600 	mov.w	r6, #0
 8002678:	46a9      	mov	r9, r5
 800267a:	46b2      	mov	sl, r6
 800267c:	eb19 0309 	adds.w	r3, r9, r9
 8002680:	eb4a 040a 	adc.w	r4, sl, sl
 8002684:	4699      	mov	r9, r3
 8002686:	46a2      	mov	sl, r4
 8002688:	eb19 0905 	adds.w	r9, r9, r5
 800268c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800269c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026a4:	4689      	mov	r9, r1
 80026a6:	4692      	mov	sl, r2
 80026a8:	eb19 0005 	adds.w	r0, r9, r5
 80026ac:	eb4a 0106 	adc.w	r1, sl, r6
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	461d      	mov	r5, r3
 80026b6:	f04f 0600 	mov.w	r6, #0
 80026ba:	196b      	adds	r3, r5, r5
 80026bc:	eb46 0406 	adc.w	r4, r6, r6
 80026c0:	461a      	mov	r2, r3
 80026c2:	4623      	mov	r3, r4
 80026c4:	f7fd fde4 	bl	8000290 <__aeabi_uldivmod>
 80026c8:	4603      	mov	r3, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b8b      	ldr	r3, [pc, #556]	; (80028fc <UART_SetConfig+0x384>)
 80026d0:	fba3 1302 	umull	r1, r3, r3, r2
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	2164      	movs	r1, #100	; 0x64
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	3332      	adds	r3, #50	; 0x32
 80026e2:	4a86      	ldr	r2, [pc, #536]	; (80028fc <UART_SetConfig+0x384>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026f0:	4498      	add	r8, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	461d      	mov	r5, r3
 80026f6:	f04f 0600 	mov.w	r6, #0
 80026fa:	46a9      	mov	r9, r5
 80026fc:	46b2      	mov	sl, r6
 80026fe:	eb19 0309 	adds.w	r3, r9, r9
 8002702:	eb4a 040a 	adc.w	r4, sl, sl
 8002706:	4699      	mov	r9, r3
 8002708:	46a2      	mov	sl, r4
 800270a:	eb19 0905 	adds.w	r9, r9, r5
 800270e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800271e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002722:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002726:	4689      	mov	r9, r1
 8002728:	4692      	mov	sl, r2
 800272a:	eb19 0005 	adds.w	r0, r9, r5
 800272e:	eb4a 0106 	adc.w	r1, sl, r6
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	461d      	mov	r5, r3
 8002738:	f04f 0600 	mov.w	r6, #0
 800273c:	196b      	adds	r3, r5, r5
 800273e:	eb46 0406 	adc.w	r4, r6, r6
 8002742:	461a      	mov	r2, r3
 8002744:	4623      	mov	r3, r4
 8002746:	f7fd fda3 	bl	8000290 <__aeabi_uldivmod>
 800274a:	4603      	mov	r3, r0
 800274c:	460c      	mov	r4, r1
 800274e:	461a      	mov	r2, r3
 8002750:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <UART_SetConfig+0x384>)
 8002752:	fba3 1302 	umull	r1, r3, r3, r2
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2164      	movs	r1, #100	; 0x64
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	3332      	adds	r3, #50	; 0x32
 8002764:	4a65      	ldr	r2, [pc, #404]	; (80028fc <UART_SetConfig+0x384>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	f003 0207 	and.w	r2, r3, #7
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4442      	add	r2, r8
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	e26f      	b.n	8002c5a <UART_SetConfig+0x6e2>
=======
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	461d      	mov	r5, r3
 8002f26:	f04f 0600 	mov.w	r6, #0
 8002f2a:	46a8      	mov	r8, r5
 8002f2c:	46b1      	mov	r9, r6
 8002f2e:	eb18 0308 	adds.w	r3, r8, r8
 8002f32:	eb49 0409 	adc.w	r4, r9, r9
 8002f36:	4698      	mov	r8, r3
 8002f38:	46a1      	mov	r9, r4
 8002f3a:	eb18 0805 	adds.w	r8, r8, r5
 8002f3e:	eb49 0906 	adc.w	r9, r9, r6
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f56:	4688      	mov	r8, r1
 8002f58:	4691      	mov	r9, r2
 8002f5a:	eb18 0005 	adds.w	r0, r8, r5
 8002f5e:	eb49 0106 	adc.w	r1, r9, r6
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	461d      	mov	r5, r3
 8002f68:	f04f 0600 	mov.w	r6, #0
 8002f6c:	196b      	adds	r3, r5, r5
 8002f6e:	eb46 0406 	adc.w	r4, r6, r6
 8002f72:	461a      	mov	r2, r3
 8002f74:	4623      	mov	r3, r4
 8002f76:	f7fd f98b 	bl	8000290 <__aeabi_uldivmod>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4ba5      	ldr	r3, [pc, #660]	; (8003218 <UART_SetConfig+0x384>)
 8002f82:	fba3 2302 	umull	r2, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	461d      	mov	r5, r3
 8002f90:	f04f 0600 	mov.w	r6, #0
 8002f94:	46a9      	mov	r9, r5
 8002f96:	46b2      	mov	sl, r6
 8002f98:	eb19 0309 	adds.w	r3, r9, r9
 8002f9c:	eb4a 040a 	adc.w	r4, sl, sl
 8002fa0:	4699      	mov	r9, r3
 8002fa2:	46a2      	mov	sl, r4
 8002fa4:	eb19 0905 	adds.w	r9, r9, r5
 8002fa8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fc0:	4689      	mov	r9, r1
 8002fc2:	4692      	mov	sl, r2
 8002fc4:	eb19 0005 	adds.w	r0, r9, r5
 8002fc8:	eb4a 0106 	adc.w	r1, sl, r6
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	461d      	mov	r5, r3
 8002fd2:	f04f 0600 	mov.w	r6, #0
 8002fd6:	196b      	adds	r3, r5, r5
 8002fd8:	eb46 0406 	adc.w	r4, r6, r6
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	f7fd f956 	bl	8000290 <__aeabi_uldivmod>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <UART_SetConfig+0x384>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a86      	ldr	r2, [pc, #536]	; (8003218 <UART_SetConfig+0x384>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800300c:	4498      	add	r8, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	461d      	mov	r5, r3
 8003012:	f04f 0600 	mov.w	r6, #0
 8003016:	46a9      	mov	r9, r5
 8003018:	46b2      	mov	sl, r6
 800301a:	eb19 0309 	adds.w	r3, r9, r9
 800301e:	eb4a 040a 	adc.w	r4, sl, sl
 8003022:	4699      	mov	r9, r3
 8003024:	46a2      	mov	sl, r4
 8003026:	eb19 0905 	adds.w	r9, r9, r5
 800302a:	eb4a 0a06 	adc.w	sl, sl, r6
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800303a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800303e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003042:	4689      	mov	r9, r1
 8003044:	4692      	mov	sl, r2
 8003046:	eb19 0005 	adds.w	r0, r9, r5
 800304a:	eb4a 0106 	adc.w	r1, sl, r6
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	461d      	mov	r5, r3
 8003054:	f04f 0600 	mov.w	r6, #0
 8003058:	196b      	adds	r3, r5, r5
 800305a:	eb46 0406 	adc.w	r4, r6, r6
 800305e:	461a      	mov	r2, r3
 8003060:	4623      	mov	r3, r4
 8003062:	f7fd f915 	bl	8000290 <__aeabi_uldivmod>
 8003066:	4603      	mov	r3, r0
 8003068:	460c      	mov	r4, r1
 800306a:	461a      	mov	r2, r3
 800306c:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <UART_SetConfig+0x384>)
 800306e:	fba3 1302 	umull	r1, r3, r3, r2
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2164      	movs	r1, #100	; 0x64
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	3332      	adds	r3, #50	; 0x32
 8003080:	4a65      	ldr	r2, [pc, #404]	; (8003218 <UART_SetConfig+0x384>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	f003 0207 	and.w	r2, r3, #7
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4442      	add	r2, r8
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e26f      	b.n	8003576 <UART_SetConfig+0x6e2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 800299e:	f7ff fda5 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 80029a2:	60b8      	str	r0, [r7, #8]
||||||| 7f56823
 800277a:	f7ff fda5 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 800277e:	60b8      	str	r0, [r7, #8]
=======
 8003096:	f7ff fabf 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 800309a:	60b8      	str	r0, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	461d      	mov	r5, r3
 80029a8:	f04f 0600 	mov.w	r6, #0
 80029ac:	46a8      	mov	r8, r5
 80029ae:	46b1      	mov	r9, r6
 80029b0:	eb18 0308 	adds.w	r3, r8, r8
 80029b4:	eb49 0409 	adc.w	r4, r9, r9
 80029b8:	4698      	mov	r8, r3
 80029ba:	46a1      	mov	r9, r4
 80029bc:	eb18 0805 	adds.w	r8, r8, r5
 80029c0:	eb49 0906 	adc.w	r9, r9, r6
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029d8:	4688      	mov	r8, r1
 80029da:	4691      	mov	r9, r2
 80029dc:	eb18 0005 	adds.w	r0, r8, r5
 80029e0:	eb49 0106 	adc.w	r1, r9, r6
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	461d      	mov	r5, r3
 80029ea:	f04f 0600 	mov.w	r6, #0
 80029ee:	196b      	adds	r3, r5, r5
 80029f0:	eb46 0406 	adc.w	r4, r6, r6
 80029f4:	461a      	mov	r2, r3
 80029f6:	4623      	mov	r3, r4
 80029f8:	f7fd fc4a 	bl	8000290 <__aeabi_uldivmod>
 80029fc:	4603      	mov	r3, r0
 80029fe:	460c      	mov	r4, r1
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <UART_SetConfig+0x384>)
 8002a04:	fba3 2302 	umull	r2, r3, r3, r2
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	461d      	mov	r5, r3
 8002a12:	f04f 0600 	mov.w	r6, #0
 8002a16:	46a9      	mov	r9, r5
 8002a18:	46b2      	mov	sl, r6
 8002a1a:	eb19 0309 	adds.w	r3, r9, r9
 8002a1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002a22:	4699      	mov	r9, r3
 8002a24:	46a2      	mov	sl, r4
 8002a26:	eb19 0905 	adds.w	r9, r9, r5
 8002a2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a42:	4689      	mov	r9, r1
 8002a44:	4692      	mov	sl, r2
 8002a46:	eb19 0005 	adds.w	r0, r9, r5
 8002a4a:	eb4a 0106 	adc.w	r1, sl, r6
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	461d      	mov	r5, r3
 8002a54:	f04f 0600 	mov.w	r6, #0
 8002a58:	196b      	adds	r3, r5, r5
 8002a5a:	eb46 0406 	adc.w	r4, r6, r6
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4623      	mov	r3, r4
 8002a62:	f7fd fc15 	bl	8000290 <__aeabi_uldivmod>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <UART_SetConfig+0x384>)
 8002a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2164      	movs	r1, #100	; 0x64
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	3332      	adds	r3, #50	; 0x32
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <UART_SetConfig+0x384>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a8e:	4498      	add	r8, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	461d      	mov	r5, r3
 8002a94:	f04f 0600 	mov.w	r6, #0
 8002a98:	46a9      	mov	r9, r5
 8002a9a:	46b2      	mov	sl, r6
 8002a9c:	eb19 0309 	adds.w	r3, r9, r9
 8002aa0:	eb4a 040a 	adc.w	r4, sl, sl
 8002aa4:	4699      	mov	r9, r3
 8002aa6:	46a2      	mov	sl, r4
 8002aa8:	eb19 0905 	adds.w	r9, r9, r5
 8002aac:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002abc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ac0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ac4:	4689      	mov	r9, r1
 8002ac6:	4692      	mov	sl, r2
 8002ac8:	eb19 0005 	adds.w	r0, r9, r5
 8002acc:	eb4a 0106 	adc.w	r1, sl, r6
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	f04f 0600 	mov.w	r6, #0
 8002ada:	196b      	adds	r3, r5, r5
 8002adc:	eb46 0406 	adc.w	r4, r6, r6
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	f7fd fbd4 	bl	8000290 <__aeabi_uldivmod>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <UART_SetConfig+0x384>)
 8002af0:	fba3 1302 	umull	r1, r3, r3, r2
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	2164      	movs	r1, #100	; 0x64
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	3332      	adds	r3, #50	; 0x32
 8002b02:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <UART_SetConfig+0x384>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	f003 0207 	and.w	r2, r3, #7
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4442      	add	r2, r8
 8002b14:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	461d      	mov	r5, r3
 8002784:	f04f 0600 	mov.w	r6, #0
 8002788:	46a8      	mov	r8, r5
 800278a:	46b1      	mov	r9, r6
 800278c:	eb18 0308 	adds.w	r3, r8, r8
 8002790:	eb49 0409 	adc.w	r4, r9, r9
 8002794:	4698      	mov	r8, r3
 8002796:	46a1      	mov	r9, r4
 8002798:	eb18 0805 	adds.w	r8, r8, r5
 800279c:	eb49 0906 	adc.w	r9, r9, r6
 80027a0:	f04f 0100 	mov.w	r1, #0
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027b4:	4688      	mov	r8, r1
 80027b6:	4691      	mov	r9, r2
 80027b8:	eb18 0005 	adds.w	r0, r8, r5
 80027bc:	eb49 0106 	adc.w	r1, r9, r6
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	461d      	mov	r5, r3
 80027c6:	f04f 0600 	mov.w	r6, #0
 80027ca:	196b      	adds	r3, r5, r5
 80027cc:	eb46 0406 	adc.w	r4, r6, r6
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	f7fd fd5c 	bl	8000290 <__aeabi_uldivmod>
 80027d8:	4603      	mov	r3, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	461a      	mov	r2, r3
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <UART_SetConfig+0x384>)
 80027e0:	fba3 2302 	umull	r2, r3, r3, r2
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	461d      	mov	r5, r3
 80027ee:	f04f 0600 	mov.w	r6, #0
 80027f2:	46a9      	mov	r9, r5
 80027f4:	46b2      	mov	sl, r6
 80027f6:	eb19 0309 	adds.w	r3, r9, r9
 80027fa:	eb4a 040a 	adc.w	r4, sl, sl
 80027fe:	4699      	mov	r9, r3
 8002800:	46a2      	mov	sl, r4
 8002802:	eb19 0905 	adds.w	r9, r9, r5
 8002806:	eb4a 0a06 	adc.w	sl, sl, r6
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002816:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800281a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800281e:	4689      	mov	r9, r1
 8002820:	4692      	mov	sl, r2
 8002822:	eb19 0005 	adds.w	r0, r9, r5
 8002826:	eb4a 0106 	adc.w	r1, sl, r6
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	461d      	mov	r5, r3
 8002830:	f04f 0600 	mov.w	r6, #0
 8002834:	196b      	adds	r3, r5, r5
 8002836:	eb46 0406 	adc.w	r4, r6, r6
 800283a:	461a      	mov	r2, r3
 800283c:	4623      	mov	r3, r4
 800283e:	f7fd fd27 	bl	8000290 <__aeabi_uldivmod>
 8002842:	4603      	mov	r3, r0
 8002844:	460c      	mov	r4, r1
 8002846:	461a      	mov	r2, r3
 8002848:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <UART_SetConfig+0x384>)
 800284a:	fba3 1302 	umull	r1, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2164      	movs	r1, #100	; 0x64
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <UART_SetConfig+0x384>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800286a:	4498      	add	r8, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	461d      	mov	r5, r3
 8002870:	f04f 0600 	mov.w	r6, #0
 8002874:	46a9      	mov	r9, r5
 8002876:	46b2      	mov	sl, r6
 8002878:	eb19 0309 	adds.w	r3, r9, r9
 800287c:	eb4a 040a 	adc.w	r4, sl, sl
 8002880:	4699      	mov	r9, r3
 8002882:	46a2      	mov	sl, r4
 8002884:	eb19 0905 	adds.w	r9, r9, r5
 8002888:	eb4a 0a06 	adc.w	sl, sl, r6
 800288c:	f04f 0100 	mov.w	r1, #0
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002898:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800289c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028a0:	4689      	mov	r9, r1
 80028a2:	4692      	mov	sl, r2
 80028a4:	eb19 0005 	adds.w	r0, r9, r5
 80028a8:	eb4a 0106 	adc.w	r1, sl, r6
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	461d      	mov	r5, r3
 80028b2:	f04f 0600 	mov.w	r6, #0
 80028b6:	196b      	adds	r3, r5, r5
 80028b8:	eb46 0406 	adc.w	r4, r6, r6
 80028bc:	461a      	mov	r2, r3
 80028be:	4623      	mov	r3, r4
 80028c0:	f7fd fce6 	bl	8000290 <__aeabi_uldivmod>
 80028c4:	4603      	mov	r3, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <UART_SetConfig+0x384>)
 80028cc:	fba3 1302 	umull	r1, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	2164      	movs	r1, #100	; 0x64
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	3332      	adds	r3, #50	; 0x32
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <UART_SetConfig+0x384>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	f003 0207 	and.w	r2, r3, #7
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4442      	add	r2, r8
 80028f0:	609a      	str	r2, [r3, #8]
=======
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	461d      	mov	r5, r3
 80030a0:	f04f 0600 	mov.w	r6, #0
 80030a4:	46a8      	mov	r8, r5
 80030a6:	46b1      	mov	r9, r6
 80030a8:	eb18 0308 	adds.w	r3, r8, r8
 80030ac:	eb49 0409 	adc.w	r4, r9, r9
 80030b0:	4698      	mov	r8, r3
 80030b2:	46a1      	mov	r9, r4
 80030b4:	eb18 0805 	adds.w	r8, r8, r5
 80030b8:	eb49 0906 	adc.w	r9, r9, r6
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030d0:	4688      	mov	r8, r1
 80030d2:	4691      	mov	r9, r2
 80030d4:	eb18 0005 	adds.w	r0, r8, r5
 80030d8:	eb49 0106 	adc.w	r1, r9, r6
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	461d      	mov	r5, r3
 80030e2:	f04f 0600 	mov.w	r6, #0
 80030e6:	196b      	adds	r3, r5, r5
 80030e8:	eb46 0406 	adc.w	r4, r6, r6
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f7fd f8ce 	bl	8000290 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <UART_SetConfig+0x384>)
 80030fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	461d      	mov	r5, r3
 800310a:	f04f 0600 	mov.w	r6, #0
 800310e:	46a9      	mov	r9, r5
 8003110:	46b2      	mov	sl, r6
 8003112:	eb19 0309 	adds.w	r3, r9, r9
 8003116:	eb4a 040a 	adc.w	r4, sl, sl
 800311a:	4699      	mov	r9, r3
 800311c:	46a2      	mov	sl, r4
 800311e:	eb19 0905 	adds.w	r9, r9, r5
 8003122:	eb4a 0a06 	adc.w	sl, sl, r6
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003132:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003136:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800313a:	4689      	mov	r9, r1
 800313c:	4692      	mov	sl, r2
 800313e:	eb19 0005 	adds.w	r0, r9, r5
 8003142:	eb4a 0106 	adc.w	r1, sl, r6
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	461d      	mov	r5, r3
 800314c:	f04f 0600 	mov.w	r6, #0
 8003150:	196b      	adds	r3, r5, r5
 8003152:	eb46 0406 	adc.w	r4, r6, r6
 8003156:	461a      	mov	r2, r3
 8003158:	4623      	mov	r3, r4
 800315a:	f7fd f899 	bl	8000290 <__aeabi_uldivmod>
 800315e:	4603      	mov	r3, r0
 8003160:	460c      	mov	r4, r1
 8003162:	461a      	mov	r2, r3
 8003164:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <UART_SetConfig+0x384>)
 8003166:	fba3 1302 	umull	r1, r3, r3, r2
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2164      	movs	r1, #100	; 0x64
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	3332      	adds	r3, #50	; 0x32
 8003178:	4a27      	ldr	r2, [pc, #156]	; (8003218 <UART_SetConfig+0x384>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003186:	4498      	add	r8, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	461d      	mov	r5, r3
 800318c:	f04f 0600 	mov.w	r6, #0
 8003190:	46a9      	mov	r9, r5
 8003192:	46b2      	mov	sl, r6
 8003194:	eb19 0309 	adds.w	r3, r9, r9
 8003198:	eb4a 040a 	adc.w	r4, sl, sl
 800319c:	4699      	mov	r9, r3
 800319e:	46a2      	mov	sl, r4
 80031a0:	eb19 0905 	adds.w	r9, r9, r5
 80031a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031bc:	4689      	mov	r9, r1
 80031be:	4692      	mov	sl, r2
 80031c0:	eb19 0005 	adds.w	r0, r9, r5
 80031c4:	eb4a 0106 	adc.w	r1, sl, r6
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	461d      	mov	r5, r3
 80031ce:	f04f 0600 	mov.w	r6, #0
 80031d2:	196b      	adds	r3, r5, r5
 80031d4:	eb46 0406 	adc.w	r4, r6, r6
 80031d8:	461a      	mov	r2, r3
 80031da:	4623      	mov	r3, r4
 80031dc:	f7fd f858 	bl	8000290 <__aeabi_uldivmod>
 80031e0:	4603      	mov	r3, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <UART_SetConfig+0x384>)
 80031e8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	2164      	movs	r1, #100	; 0x64
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	3332      	adds	r3, #50	; 0x32
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <UART_SetConfig+0x384>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	f003 0207 	and.w	r2, r3, #7
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4442      	add	r2, r8
 800320c:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< HEAD
 8002b16:	e1b2      	b.n	8002e7e <UART_SetConfig+0x6e2>
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	40011400 	.word	0x40011400
 8002b20:	51eb851f 	.word	0x51eb851f
||||||| 7f56823
 80028f2:	e1b2      	b.n	8002c5a <UART_SetConfig+0x6e2>
 80028f4:	40011000 	.word	0x40011000
 80028f8:	40011400 	.word	0x40011400
 80028fc:	51eb851f 	.word	0x51eb851f
=======
 800320e:	e1b2      	b.n	8003576 <UART_SetConfig+0x6e2>
 8003210:	40011000 	.word	0x40011000
 8003214:	40011400 	.word	0x40011400
 8003218:	51eb851f 	.word	0x51eb851f
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4ad7      	ldr	r2, [pc, #860]	; (8002e88 <UART_SetConfig+0x6ec>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d005      	beq.n	8002b3a <UART_SetConfig+0x39e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4ad6      	ldr	r2, [pc, #856]	; (8002e8c <UART_SetConfig+0x6f0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f040 80d1 	bne.w	8002cdc <UART_SetConfig+0x540>
||||||| 7f56823
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4ad7      	ldr	r2, [pc, #860]	; (8002c64 <UART_SetConfig+0x6ec>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d005      	beq.n	8002916 <UART_SetConfig+0x39e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4ad6      	ldr	r2, [pc, #856]	; (8002c68 <UART_SetConfig+0x6f0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f040 80d1 	bne.w	8002ab8 <UART_SetConfig+0x540>
=======
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4ad7      	ldr	r2, [pc, #860]	; (8003580 <UART_SetConfig+0x6ec>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d005      	beq.n	8003232 <UART_SetConfig+0x39e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4ad6      	ldr	r2, [pc, #856]	; (8003584 <UART_SetConfig+0x6f0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	f040 80d1 	bne.w	80033d4 <UART_SetConfig+0x540>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      pclk = HAL_RCC_GetPCLK2Freq();
<<<<<<< HEAD
 8002b3a:	f7ff fceb 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8002b3e:	60b8      	str	r0, [r7, #8]
||||||| 7f56823
 8002916:	f7ff fceb 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 800291a:	60b8      	str	r0, [r7, #8]
=======
 8003232:	f7ff fa05 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8003236:	60b8      	str	r0, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	469a      	mov	sl, r3
 8002b44:	f04f 0b00 	mov.w	fp, #0
 8002b48:	46d0      	mov	r8, sl
 8002b4a:	46d9      	mov	r9, fp
 8002b4c:	eb18 0308 	adds.w	r3, r8, r8
 8002b50:	eb49 0409 	adc.w	r4, r9, r9
 8002b54:	4698      	mov	r8, r3
 8002b56:	46a1      	mov	r9, r4
 8002b58:	eb18 080a 	adds.w	r8, r8, sl
 8002b5c:	eb49 090b 	adc.w	r9, r9, fp
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b74:	4688      	mov	r8, r1
 8002b76:	4691      	mov	r9, r2
 8002b78:	eb1a 0508 	adds.w	r5, sl, r8
 8002b7c:	eb4b 0609 	adc.w	r6, fp, r9
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	f04f 0400 	mov.w	r4, #0
 8002b92:	0094      	lsls	r4, r2, #2
 8002b94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b98:	008b      	lsls	r3, r1, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4623      	mov	r3, r4
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	4631      	mov	r1, r6
 8002ba2:	f7fd fb75 	bl	8000290 <__aeabi_uldivmod>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	461a      	mov	r2, r3
 8002bac:	4bb8      	ldr	r3, [pc, #736]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002bae:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	469b      	mov	fp, r3
 8002bbc:	f04f 0c00 	mov.w	ip, #0
 8002bc0:	46d9      	mov	r9, fp
 8002bc2:	46e2      	mov	sl, ip
 8002bc4:	eb19 0309 	adds.w	r3, r9, r9
 8002bc8:	eb4a 040a 	adc.w	r4, sl, sl
 8002bcc:	4699      	mov	r9, r3
 8002bce:	46a2      	mov	sl, r4
 8002bd0:	eb19 090b 	adds.w	r9, r9, fp
 8002bd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bd8:	f04f 0100 	mov.w	r1, #0
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002be4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002be8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bec:	4689      	mov	r9, r1
 8002bee:	4692      	mov	sl, r2
 8002bf0:	eb1b 0509 	adds.w	r5, fp, r9
 8002bf4:	eb4c 060a 	adc.w	r6, ip, sl
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0094      	lsls	r4, r2, #2
 8002c0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c10:	008b      	lsls	r3, r1, #2
 8002c12:	461a      	mov	r2, r3
 8002c14:	4623      	mov	r3, r4
 8002c16:	4628      	mov	r0, r5
 8002c18:	4631      	mov	r1, r6
 8002c1a:	f7fd fb39 	bl	8000290 <__aeabi_uldivmod>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	460c      	mov	r4, r1
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b9a      	ldr	r3, [pc, #616]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002c26:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2164      	movs	r1, #100	; 0x64
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	3332      	adds	r3, #50	; 0x32
 8002c38:	4a95      	ldr	r2, [pc, #596]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c44:	4498      	add	r8, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	469b      	mov	fp, r3
 8002c4a:	f04f 0c00 	mov.w	ip, #0
 8002c4e:	46d9      	mov	r9, fp
 8002c50:	46e2      	mov	sl, ip
 8002c52:	eb19 0309 	adds.w	r3, r9, r9
 8002c56:	eb4a 040a 	adc.w	r4, sl, sl
 8002c5a:	4699      	mov	r9, r3
 8002c5c:	46a2      	mov	sl, r4
 8002c5e:	eb19 090b 	adds.w	r9, r9, fp
 8002c62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c7a:	4689      	mov	r9, r1
 8002c7c:	4692      	mov	sl, r2
 8002c7e:	eb1b 0509 	adds.w	r5, fp, r9
 8002c82:	eb4c 060a 	adc.w	r6, ip, sl
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f04f 0400 	mov.w	r4, #0
 8002c98:	0094      	lsls	r4, r2, #2
 8002c9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c9e:	008b      	lsls	r3, r1, #2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	4631      	mov	r1, r6
 8002ca8:	f7fd faf2 	bl	8000290 <__aeabi_uldivmod>
 8002cac:	4603      	mov	r3, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b77      	ldr	r3, [pc, #476]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	2164      	movs	r1, #100	; 0x64
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	3332      	adds	r3, #50	; 0x32
 8002cc6:	4a72      	ldr	r2, [pc, #456]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4442      	add	r2, r8
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	e0d0      	b.n	8002e7e <UART_SetConfig+0x6e2>
||||||| 7f56823
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	469a      	mov	sl, r3
 8002920:	f04f 0b00 	mov.w	fp, #0
 8002924:	46d0      	mov	r8, sl
 8002926:	46d9      	mov	r9, fp
 8002928:	eb18 0308 	adds.w	r3, r8, r8
 800292c:	eb49 0409 	adc.w	r4, r9, r9
 8002930:	4698      	mov	r8, r3
 8002932:	46a1      	mov	r9, r4
 8002934:	eb18 080a 	adds.w	r8, r8, sl
 8002938:	eb49 090b 	adc.w	r9, r9, fp
 800293c:	f04f 0100 	mov.w	r1, #0
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002948:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800294c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002950:	4688      	mov	r8, r1
 8002952:	4691      	mov	r9, r2
 8002954:	eb1a 0508 	adds.w	r5, sl, r8
 8002958:	eb4b 0609 	adc.w	r6, fp, r9
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f04f 0400 	mov.w	r4, #0
 800296e:	0094      	lsls	r4, r2, #2
 8002970:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002974:	008b      	lsls	r3, r1, #2
 8002976:	461a      	mov	r2, r3
 8002978:	4623      	mov	r3, r4
 800297a:	4628      	mov	r0, r5
 800297c:	4631      	mov	r1, r6
 800297e:	f7fd fc87 	bl	8000290 <__aeabi_uldivmod>
 8002982:	4603      	mov	r3, r0
 8002984:	460c      	mov	r4, r1
 8002986:	461a      	mov	r2, r3
 8002988:	4bb8      	ldr	r3, [pc, #736]	; (8002c6c <UART_SetConfig+0x6f4>)
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	469b      	mov	fp, r3
 8002998:	f04f 0c00 	mov.w	ip, #0
 800299c:	46d9      	mov	r9, fp
 800299e:	46e2      	mov	sl, ip
 80029a0:	eb19 0309 	adds.w	r3, r9, r9
 80029a4:	eb4a 040a 	adc.w	r4, sl, sl
 80029a8:	4699      	mov	r9, r3
 80029aa:	46a2      	mov	sl, r4
 80029ac:	eb19 090b 	adds.w	r9, r9, fp
 80029b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029c8:	4689      	mov	r9, r1
 80029ca:	4692      	mov	sl, r2
 80029cc:	eb1b 0509 	adds.w	r5, fp, r9
 80029d0:	eb4c 060a 	adc.w	r6, ip, sl
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	0094      	lsls	r4, r2, #2
 80029e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029ec:	008b      	lsls	r3, r1, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	4623      	mov	r3, r4
 80029f2:	4628      	mov	r0, r5
 80029f4:	4631      	mov	r1, r6
 80029f6:	f7fd fc4b 	bl	8000290 <__aeabi_uldivmod>
 80029fa:	4603      	mov	r3, r0
 80029fc:	460c      	mov	r4, r1
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b9a      	ldr	r3, [pc, #616]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002a02:	fba3 1302 	umull	r1, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2164      	movs	r1, #100	; 0x64
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	3332      	adds	r3, #50	; 0x32
 8002a14:	4a95      	ldr	r2, [pc, #596]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a20:	4498      	add	r8, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	469b      	mov	fp, r3
 8002a26:	f04f 0c00 	mov.w	ip, #0
 8002a2a:	46d9      	mov	r9, fp
 8002a2c:	46e2      	mov	sl, ip
 8002a2e:	eb19 0309 	adds.w	r3, r9, r9
 8002a32:	eb4a 040a 	adc.w	r4, sl, sl
 8002a36:	4699      	mov	r9, r3
 8002a38:	46a2      	mov	sl, r4
 8002a3a:	eb19 090b 	adds.w	r9, r9, fp
 8002a3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a56:	4689      	mov	r9, r1
 8002a58:	4692      	mov	sl, r2
 8002a5a:	eb1b 0509 	adds.w	r5, fp, r9
 8002a5e:	eb4c 060a 	adc.w	r6, ip, sl
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4619      	mov	r1, r3
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	f04f 0400 	mov.w	r4, #0
 8002a74:	0094      	lsls	r4, r2, #2
 8002a76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a7a:	008b      	lsls	r3, r1, #2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4623      	mov	r3, r4
 8002a80:	4628      	mov	r0, r5
 8002a82:	4631      	mov	r1, r6
 8002a84:	f7fd fc04 	bl	8000290 <__aeabi_uldivmod>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b77      	ldr	r3, [pc, #476]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002a90:	fba3 1302 	umull	r1, r3, r3, r2
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	2164      	movs	r1, #100	; 0x64
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	3332      	adds	r3, #50	; 0x32
 8002aa2:	4a72      	ldr	r2, [pc, #456]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	f003 020f 	and.w	r2, r3, #15
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4442      	add	r2, r8
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	e0d0      	b.n	8002c5a <UART_SetConfig+0x6e2>
=======
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	469a      	mov	sl, r3
 800323c:	f04f 0b00 	mov.w	fp, #0
 8003240:	46d0      	mov	r8, sl
 8003242:	46d9      	mov	r9, fp
 8003244:	eb18 0308 	adds.w	r3, r8, r8
 8003248:	eb49 0409 	adc.w	r4, r9, r9
 800324c:	4698      	mov	r8, r3
 800324e:	46a1      	mov	r9, r4
 8003250:	eb18 080a 	adds.w	r8, r8, sl
 8003254:	eb49 090b 	adc.w	r9, r9, fp
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003264:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003268:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800326c:	4688      	mov	r8, r1
 800326e:	4691      	mov	r9, r2
 8003270:	eb1a 0508 	adds.w	r5, sl, r8
 8003274:	eb4b 0609 	adc.w	r6, fp, r9
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4619      	mov	r1, r3
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f04f 0400 	mov.w	r4, #0
 800328a:	0094      	lsls	r4, r2, #2
 800328c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003290:	008b      	lsls	r3, r1, #2
 8003292:	461a      	mov	r2, r3
 8003294:	4623      	mov	r3, r4
 8003296:	4628      	mov	r0, r5
 8003298:	4631      	mov	r1, r6
 800329a:	f7fc fff9 	bl	8000290 <__aeabi_uldivmod>
 800329e:	4603      	mov	r3, r0
 80032a0:	460c      	mov	r4, r1
 80032a2:	461a      	mov	r2, r3
 80032a4:	4bb8      	ldr	r3, [pc, #736]	; (8003588 <UART_SetConfig+0x6f4>)
 80032a6:	fba3 2302 	umull	r2, r3, r3, r2
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	469b      	mov	fp, r3
 80032b4:	f04f 0c00 	mov.w	ip, #0
 80032b8:	46d9      	mov	r9, fp
 80032ba:	46e2      	mov	sl, ip
 80032bc:	eb19 0309 	adds.w	r3, r9, r9
 80032c0:	eb4a 040a 	adc.w	r4, sl, sl
 80032c4:	4699      	mov	r9, r3
 80032c6:	46a2      	mov	sl, r4
 80032c8:	eb19 090b 	adds.w	r9, r9, fp
 80032cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032e4:	4689      	mov	r9, r1
 80032e6:	4692      	mov	sl, r2
 80032e8:	eb1b 0509 	adds.w	r5, fp, r9
 80032ec:	eb4c 060a 	adc.w	r6, ip, sl
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	f04f 0400 	mov.w	r4, #0
 8003302:	0094      	lsls	r4, r2, #2
 8003304:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003308:	008b      	lsls	r3, r1, #2
 800330a:	461a      	mov	r2, r3
 800330c:	4623      	mov	r3, r4
 800330e:	4628      	mov	r0, r5
 8003310:	4631      	mov	r1, r6
 8003312:	f7fc ffbd 	bl	8000290 <__aeabi_uldivmod>
 8003316:	4603      	mov	r3, r0
 8003318:	460c      	mov	r4, r1
 800331a:	461a      	mov	r2, r3
 800331c:	4b9a      	ldr	r3, [pc, #616]	; (8003588 <UART_SetConfig+0x6f4>)
 800331e:	fba3 1302 	umull	r1, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2164      	movs	r1, #100	; 0x64
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	; 0x32
 8003330:	4a95      	ldr	r2, [pc, #596]	; (8003588 <UART_SetConfig+0x6f4>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333c:	4498      	add	r8, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	469b      	mov	fp, r3
 8003342:	f04f 0c00 	mov.w	ip, #0
 8003346:	46d9      	mov	r9, fp
 8003348:	46e2      	mov	sl, ip
 800334a:	eb19 0309 	adds.w	r3, r9, r9
 800334e:	eb4a 040a 	adc.w	r4, sl, sl
 8003352:	4699      	mov	r9, r3
 8003354:	46a2      	mov	sl, r4
 8003356:	eb19 090b 	adds.w	r9, r9, fp
 800335a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800336e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003372:	4689      	mov	r9, r1
 8003374:	4692      	mov	sl, r2
 8003376:	eb1b 0509 	adds.w	r5, fp, r9
 800337a:	eb4c 060a 	adc.w	r6, ip, sl
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	f04f 0400 	mov.w	r4, #0
 8003390:	0094      	lsls	r4, r2, #2
 8003392:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003396:	008b      	lsls	r3, r1, #2
 8003398:	461a      	mov	r2, r3
 800339a:	4623      	mov	r3, r4
 800339c:	4628      	mov	r0, r5
 800339e:	4631      	mov	r1, r6
 80033a0:	f7fc ff76 	bl	8000290 <__aeabi_uldivmod>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b77      	ldr	r3, [pc, #476]	; (8003588 <UART_SetConfig+0x6f4>)
 80033ac:	fba3 1302 	umull	r1, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	2164      	movs	r1, #100	; 0x64
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	3332      	adds	r3, #50	; 0x32
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <UART_SetConfig+0x6f4>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4442      	add	r2, r8
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	e0d0      	b.n	8003576 <UART_SetConfig+0x6e2>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8002cdc:	f7ff fc06 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8002ce0:	60b8      	str	r0, [r7, #8]
||||||| 7f56823
 8002ab8:	f7ff fc06 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8002abc:	60b8      	str	r0, [r7, #8]
=======
 80033d4:	f7ff f920 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 80033d8:	60b8      	str	r0, [r7, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	469a      	mov	sl, r3
 8002ce6:	f04f 0b00 	mov.w	fp, #0
 8002cea:	46d0      	mov	r8, sl
 8002cec:	46d9      	mov	r9, fp
 8002cee:	eb18 0308 	adds.w	r3, r8, r8
 8002cf2:	eb49 0409 	adc.w	r4, r9, r9
 8002cf6:	4698      	mov	r8, r3
 8002cf8:	46a1      	mov	r9, r4
 8002cfa:	eb18 080a 	adds.w	r8, r8, sl
 8002cfe:	eb49 090b 	adc.w	r9, r9, fp
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d16:	4688      	mov	r8, r1
 8002d18:	4691      	mov	r9, r2
 8002d1a:	eb1a 0508 	adds.w	r5, sl, r8
 8002d1e:	eb4b 0609 	adc.w	r6, fp, r9
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	f04f 0400 	mov.w	r4, #0
 8002d34:	0094      	lsls	r4, r2, #2
 8002d36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	4628      	mov	r0, r5
 8002d42:	4631      	mov	r1, r6
 8002d44:	f7fd faa4 	bl	8000290 <__aeabi_uldivmod>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002d50:	fba3 2302 	umull	r2, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	469b      	mov	fp, r3
 8002d5e:	f04f 0c00 	mov.w	ip, #0
 8002d62:	46d9      	mov	r9, fp
 8002d64:	46e2      	mov	sl, ip
 8002d66:	eb19 0309 	adds.w	r3, r9, r9
 8002d6a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d6e:	4699      	mov	r9, r3
 8002d70:	46a2      	mov	sl, r4
 8002d72:	eb19 090b 	adds.w	r9, r9, fp
 8002d76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d8e:	4689      	mov	r9, r1
 8002d90:	4692      	mov	sl, r2
 8002d92:	eb1b 0509 	adds.w	r5, fp, r9
 8002d96:	eb4c 060a 	adc.w	r6, ip, sl
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	f04f 0400 	mov.w	r4, #0
 8002dac:	0094      	lsls	r4, r2, #2
 8002dae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002db2:	008b      	lsls	r3, r1, #2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4623      	mov	r3, r4
 8002db8:	4628      	mov	r0, r5
 8002dba:	4631      	mov	r1, r6
 8002dbc:	f7fd fa68 	bl	8000290 <__aeabi_uldivmod>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	2164      	movs	r1, #100	; 0x64
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	3332      	adds	r3, #50	; 0x32
 8002dda:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de6:	4498      	add	r8, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	469b      	mov	fp, r3
 8002dec:	f04f 0c00 	mov.w	ip, #0
 8002df0:	46d9      	mov	r9, fp
 8002df2:	46e2      	mov	sl, ip
 8002df4:	eb19 0309 	adds.w	r3, r9, r9
 8002df8:	eb4a 040a 	adc.w	r4, sl, sl
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	46a2      	mov	sl, r4
 8002e00:	eb19 090b 	adds.w	r9, r9, fp
 8002e04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e1c:	4689      	mov	r9, r1
 8002e1e:	4692      	mov	sl, r2
 8002e20:	eb1b 0509 	adds.w	r5, fp, r9
 8002e24:	eb4c 060a 	adc.w	r6, ip, sl
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	0094      	lsls	r4, r2, #2
 8002e3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e40:	008b      	lsls	r3, r1, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	4623      	mov	r3, r4
 8002e46:	4628      	mov	r0, r5
 8002e48:	4631      	mov	r1, r6
 8002e4a:	f7fd fa21 	bl	8000290 <__aeabi_uldivmod>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	460c      	mov	r4, r1
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002e56:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2164      	movs	r1, #100	; 0x64
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <UART_SetConfig+0x6f4>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 020f 	and.w	r2, r3, #15
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4442      	add	r2, r8
 8002e7a:	609a      	str	r2, [r3, #8]
||||||| 7f56823
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	469a      	mov	sl, r3
 8002ac2:	f04f 0b00 	mov.w	fp, #0
 8002ac6:	46d0      	mov	r8, sl
 8002ac8:	46d9      	mov	r9, fp
 8002aca:	eb18 0308 	adds.w	r3, r8, r8
 8002ace:	eb49 0409 	adc.w	r4, r9, r9
 8002ad2:	4698      	mov	r8, r3
 8002ad4:	46a1      	mov	r9, r4
 8002ad6:	eb18 080a 	adds.w	r8, r8, sl
 8002ada:	eb49 090b 	adc.w	r9, r9, fp
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002aea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002aee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002af2:	4688      	mov	r8, r1
 8002af4:	4691      	mov	r9, r2
 8002af6:	eb1a 0508 	adds.w	r5, sl, r8
 8002afa:	eb4b 0609 	adc.w	r6, fp, r9
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	0094      	lsls	r4, r2, #2
 8002b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b16:	008b      	lsls	r3, r1, #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	4631      	mov	r1, r6
 8002b20:	f7fd fbb6 	bl	8000290 <__aeabi_uldivmod>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	469b      	mov	fp, r3
 8002b3a:	f04f 0c00 	mov.w	ip, #0
 8002b3e:	46d9      	mov	r9, fp
 8002b40:	46e2      	mov	sl, ip
 8002b42:	eb19 0309 	adds.w	r3, r9, r9
 8002b46:	eb4a 040a 	adc.w	r4, sl, sl
 8002b4a:	4699      	mov	r9, r3
 8002b4c:	46a2      	mov	sl, r4
 8002b4e:	eb19 090b 	adds.w	r9, r9, fp
 8002b52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b6a:	4689      	mov	r9, r1
 8002b6c:	4692      	mov	sl, r2
 8002b6e:	eb1b 0509 	adds.w	r5, fp, r9
 8002b72:	eb4c 060a 	adc.w	r6, ip, sl
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	f04f 0400 	mov.w	r4, #0
 8002b88:	0094      	lsls	r4, r2, #2
 8002b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b8e:	008b      	lsls	r3, r1, #2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4623      	mov	r3, r4
 8002b94:	4628      	mov	r0, r5
 8002b96:	4631      	mov	r1, r6
 8002b98:	f7fd fb7a 	bl	8000290 <__aeabi_uldivmod>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	2164      	movs	r1, #100	; 0x64
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	3332      	adds	r3, #50	; 0x32
 8002bb6:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc2:	4498      	add	r8, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	469b      	mov	fp, r3
 8002bc8:	f04f 0c00 	mov.w	ip, #0
 8002bcc:	46d9      	mov	r9, fp
 8002bce:	46e2      	mov	sl, ip
 8002bd0:	eb19 0309 	adds.w	r3, r9, r9
 8002bd4:	eb4a 040a 	adc.w	r4, sl, sl
 8002bd8:	4699      	mov	r9, r3
 8002bda:	46a2      	mov	sl, r4
 8002bdc:	eb19 090b 	adds.w	r9, r9, fp
 8002be0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bf8:	4689      	mov	r9, r1
 8002bfa:	4692      	mov	sl, r2
 8002bfc:	eb1b 0509 	adds.w	r5, fp, r9
 8002c00:	eb4c 060a 	adc.w	r6, ip, sl
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	f04f 0400 	mov.w	r4, #0
 8002c16:	0094      	lsls	r4, r2, #2
 8002c18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c1c:	008b      	lsls	r3, r1, #2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4623      	mov	r3, r4
 8002c22:	4628      	mov	r0, r5
 8002c24:	4631      	mov	r1, r6
 8002c26:	f7fd fb33 	bl	8000290 <__aeabi_uldivmod>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002c32:	fba3 1302 	umull	r1, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2164      	movs	r1, #100	; 0x64
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	3332      	adds	r3, #50	; 0x32
 8002c44:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <UART_SetConfig+0x6f4>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4442      	add	r2, r8
 8002c56:	609a      	str	r2, [r3, #8]
=======
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	469a      	mov	sl, r3
 80033de:	f04f 0b00 	mov.w	fp, #0
 80033e2:	46d0      	mov	r8, sl
 80033e4:	46d9      	mov	r9, fp
 80033e6:	eb18 0308 	adds.w	r3, r8, r8
 80033ea:	eb49 0409 	adc.w	r4, r9, r9
 80033ee:	4698      	mov	r8, r3
 80033f0:	46a1      	mov	r9, r4
 80033f2:	eb18 080a 	adds.w	r8, r8, sl
 80033f6:	eb49 090b 	adc.w	r9, r9, fp
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003406:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800340a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800340e:	4688      	mov	r8, r1
 8003410:	4691      	mov	r9, r2
 8003412:	eb1a 0508 	adds.w	r5, sl, r8
 8003416:	eb4b 0609 	adc.w	r6, fp, r9
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4619      	mov	r1, r3
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	f04f 0400 	mov.w	r4, #0
 800342c:	0094      	lsls	r4, r2, #2
 800342e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	461a      	mov	r2, r3
 8003436:	4623      	mov	r3, r4
 8003438:	4628      	mov	r0, r5
 800343a:	4631      	mov	r1, r6
 800343c:	f7fc ff28 	bl	8000290 <__aeabi_uldivmod>
 8003440:	4603      	mov	r3, r0
 8003442:	460c      	mov	r4, r1
 8003444:	461a      	mov	r2, r3
 8003446:	4b50      	ldr	r3, [pc, #320]	; (8003588 <UART_SetConfig+0x6f4>)
 8003448:	fba3 2302 	umull	r2, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	469b      	mov	fp, r3
 8003456:	f04f 0c00 	mov.w	ip, #0
 800345a:	46d9      	mov	r9, fp
 800345c:	46e2      	mov	sl, ip
 800345e:	eb19 0309 	adds.w	r3, r9, r9
 8003462:	eb4a 040a 	adc.w	r4, sl, sl
 8003466:	4699      	mov	r9, r3
 8003468:	46a2      	mov	sl, r4
 800346a:	eb19 090b 	adds.w	r9, r9, fp
 800346e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800347e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003482:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003486:	4689      	mov	r9, r1
 8003488:	4692      	mov	sl, r2
 800348a:	eb1b 0509 	adds.w	r5, fp, r9
 800348e:	eb4c 060a 	adc.w	r6, ip, sl
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4619      	mov	r1, r3
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	f04f 0400 	mov.w	r4, #0
 80034a4:	0094      	lsls	r4, r2, #2
 80034a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034aa:	008b      	lsls	r3, r1, #2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	4628      	mov	r0, r5
 80034b2:	4631      	mov	r1, r6
 80034b4:	f7fc feec 	bl	8000290 <__aeabi_uldivmod>
 80034b8:	4603      	mov	r3, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	461a      	mov	r2, r3
 80034be:	4b32      	ldr	r3, [pc, #200]	; (8003588 <UART_SetConfig+0x6f4>)
 80034c0:	fba3 1302 	umull	r1, r3, r3, r2
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	2164      	movs	r1, #100	; 0x64
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	3332      	adds	r3, #50	; 0x32
 80034d2:	4a2d      	ldr	r2, [pc, #180]	; (8003588 <UART_SetConfig+0x6f4>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034de:	4498      	add	r8, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	469b      	mov	fp, r3
 80034e4:	f04f 0c00 	mov.w	ip, #0
 80034e8:	46d9      	mov	r9, fp
 80034ea:	46e2      	mov	sl, ip
 80034ec:	eb19 0309 	adds.w	r3, r9, r9
 80034f0:	eb4a 040a 	adc.w	r4, sl, sl
 80034f4:	4699      	mov	r9, r3
 80034f6:	46a2      	mov	sl, r4
 80034f8:	eb19 090b 	adds.w	r9, r9, fp
 80034fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800350c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003514:	4689      	mov	r9, r1
 8003516:	4692      	mov	sl, r2
 8003518:	eb1b 0509 	adds.w	r5, fp, r9
 800351c:	eb4c 060a 	adc.w	r6, ip, sl
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4619      	mov	r1, r3
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	f04f 0400 	mov.w	r4, #0
 8003532:	0094      	lsls	r4, r2, #2
 8003534:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003538:	008b      	lsls	r3, r1, #2
 800353a:	461a      	mov	r2, r3
 800353c:	4623      	mov	r3, r4
 800353e:	4628      	mov	r0, r5
 8003540:	4631      	mov	r1, r6
 8003542:	f7fc fea5 	bl	8000290 <__aeabi_uldivmod>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	461a      	mov	r2, r3
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <UART_SetConfig+0x6f4>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	3332      	adds	r3, #50	; 0x32
 8003560:	4a09      	ldr	r2, [pc, #36]	; (8003588 <UART_SetConfig+0x6f4>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	f003 020f 	and.w	r2, r3, #15
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4442      	add	r2, r8
 8003572:	609a      	str	r2, [r3, #8]
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
}
<<<<<<< HEAD
 8002e7c:	e7ff      	b.n	8002e7e <UART_SetConfig+0x6e2>
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e88:	40011000 	.word	0x40011000
 8002e8c:	40011400 	.word	0x40011400
 8002e90:	51eb851f 	.word	0x51eb851f

08002e94 <__errno>:
 8002e94:	4b01      	ldr	r3, [pc, #4]	; (8002e9c <__errno+0x8>)
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	2000000c 	.word	0x2000000c

08002ea0 <__libc_init_array>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	4e0d      	ldr	r6, [pc, #52]	; (8002ed8 <__libc_init_array+0x38>)
 8002ea4:	4c0d      	ldr	r4, [pc, #52]	; (8002edc <__libc_init_array+0x3c>)
 8002ea6:	1ba4      	subs	r4, r4, r6
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	2500      	movs	r5, #0
 8002eac:	42a5      	cmp	r5, r4
 8002eae:	d109      	bne.n	8002ec4 <__libc_init_array+0x24>
 8002eb0:	4e0b      	ldr	r6, [pc, #44]	; (8002ee0 <__libc_init_array+0x40>)
 8002eb2:	4c0c      	ldr	r4, [pc, #48]	; (8002ee4 <__libc_init_array+0x44>)
 8002eb4:	f000 fc26 	bl	8003704 <_init>
 8002eb8:	1ba4      	subs	r4, r4, r6
 8002eba:	10a4      	asrs	r4, r4, #2
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	42a5      	cmp	r5, r4
 8002ec0:	d105      	bne.n	8002ece <__libc_init_array+0x2e>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ec8:	4798      	blx	r3
 8002eca:	3501      	adds	r5, #1
 8002ecc:	e7ee      	b.n	8002eac <__libc_init_array+0xc>
 8002ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed2:	4798      	blx	r3
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	e7f2      	b.n	8002ebe <__libc_init_array+0x1e>
 8002ed8:	08003778 	.word	0x08003778
 8002edc:	08003778 	.word	0x08003778
 8002ee0:	08003778 	.word	0x08003778
 8002ee4:	0800377c 	.word	0x0800377c

08002ee8 <memset>:
 8002ee8:	4402      	add	r2, r0
 8002eea:	4603      	mov	r3, r0
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <memset+0xa>
 8002ef0:	4770      	bx	lr
 8002ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef6:	e7f9      	b.n	8002eec <memset+0x4>

08002ef8 <siprintf>:
 8002ef8:	b40e      	push	{r1, r2, r3}
 8002efa:	b500      	push	{lr}
 8002efc:	b09c      	sub	sp, #112	; 0x70
 8002efe:	ab1d      	add	r3, sp, #116	; 0x74
 8002f00:	9002      	str	r0, [sp, #8]
 8002f02:	9006      	str	r0, [sp, #24]
 8002f04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f08:	4809      	ldr	r0, [pc, #36]	; (8002f30 <siprintf+0x38>)
 8002f0a:	9107      	str	r1, [sp, #28]
 8002f0c:	9104      	str	r1, [sp, #16]
 8002f0e:	4909      	ldr	r1, [pc, #36]	; (8002f34 <siprintf+0x3c>)
 8002f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f14:	9105      	str	r1, [sp, #20]
 8002f16:	6800      	ldr	r0, [r0, #0]
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	a902      	add	r1, sp, #8
 8002f1c:	f000 f866 	bl	8002fec <_svfiprintf_r>
 8002f20:	9b02      	ldr	r3, [sp, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	b01c      	add	sp, #112	; 0x70
 8002f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f2c:	b003      	add	sp, #12
 8002f2e:	4770      	bx	lr
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	ffff0208 	.word	0xffff0208

08002f38 <__ssputs_r>:
 8002f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f3c:	688e      	ldr	r6, [r1, #8]
 8002f3e:	429e      	cmp	r6, r3
 8002f40:	4682      	mov	sl, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	4690      	mov	r8, r2
 8002f46:	4699      	mov	r9, r3
 8002f48:	d837      	bhi.n	8002fba <__ssputs_r+0x82>
 8002f4a:	898a      	ldrh	r2, [r1, #12]
 8002f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f50:	d031      	beq.n	8002fb6 <__ssputs_r+0x7e>
 8002f52:	6825      	ldr	r5, [r4, #0]
 8002f54:	6909      	ldr	r1, [r1, #16]
 8002f56:	1a6f      	subs	r7, r5, r1
 8002f58:	6965      	ldr	r5, [r4, #20]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f60:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f64:	f109 0301 	add.w	r3, r9, #1
 8002f68:	443b      	add	r3, r7
 8002f6a:	429d      	cmp	r5, r3
 8002f6c:	bf38      	it	cc
 8002f6e:	461d      	movcc	r5, r3
 8002f70:	0553      	lsls	r3, r2, #21
 8002f72:	d530      	bpl.n	8002fd6 <__ssputs_r+0x9e>
 8002f74:	4629      	mov	r1, r5
 8002f76:	f000 fb2b 	bl	80035d0 <_malloc_r>
 8002f7a:	4606      	mov	r6, r0
 8002f7c:	b950      	cbnz	r0, 8002f94 <__ssputs_r+0x5c>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	f8ca 3000 	str.w	r3, [sl]
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f8a:	81a3      	strh	r3, [r4, #12]
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f94:	463a      	mov	r2, r7
 8002f96:	6921      	ldr	r1, [r4, #16]
 8002f98:	f000 faa8 	bl	80034ec <memcpy>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	6126      	str	r6, [r4, #16]
 8002faa:	6165      	str	r5, [r4, #20]
 8002fac:	443e      	add	r6, r7
 8002fae:	1bed      	subs	r5, r5, r7
 8002fb0:	6026      	str	r6, [r4, #0]
 8002fb2:	60a5      	str	r5, [r4, #8]
 8002fb4:	464e      	mov	r6, r9
 8002fb6:	454e      	cmp	r6, r9
 8002fb8:	d900      	bls.n	8002fbc <__ssputs_r+0x84>
 8002fba:	464e      	mov	r6, r9
 8002fbc:	4632      	mov	r2, r6
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	f000 fa9e 	bl	8003502 <memmove>
 8002fc6:	68a3      	ldr	r3, [r4, #8]
 8002fc8:	1b9b      	subs	r3, r3, r6
 8002fca:	60a3      	str	r3, [r4, #8]
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	441e      	add	r6, r3
 8002fd0:	6026      	str	r6, [r4, #0]
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	e7dc      	b.n	8002f90 <__ssputs_r+0x58>
 8002fd6:	462a      	mov	r2, r5
 8002fd8:	f000 fb54 	bl	8003684 <_realloc_r>
 8002fdc:	4606      	mov	r6, r0
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d1e2      	bne.n	8002fa8 <__ssputs_r+0x70>
 8002fe2:	6921      	ldr	r1, [r4, #16]
 8002fe4:	4650      	mov	r0, sl
 8002fe6:	f000 faa5 	bl	8003534 <_free_r>
 8002fea:	e7c8      	b.n	8002f7e <__ssputs_r+0x46>

08002fec <_svfiprintf_r>:
 8002fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	898b      	ldrh	r3, [r1, #12]
 8002ff4:	061f      	lsls	r7, r3, #24
 8002ff6:	b09d      	sub	sp, #116	; 0x74
 8002ff8:	4680      	mov	r8, r0
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	4616      	mov	r6, r2
 8002ffe:	d50f      	bpl.n	8003020 <_svfiprintf_r+0x34>
 8003000:	690b      	ldr	r3, [r1, #16]
 8003002:	b96b      	cbnz	r3, 8003020 <_svfiprintf_r+0x34>
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	f000 fae3 	bl	80035d0 <_malloc_r>
 800300a:	6020      	str	r0, [r4, #0]
 800300c:	6120      	str	r0, [r4, #16]
 800300e:	b928      	cbnz	r0, 800301c <_svfiprintf_r+0x30>
 8003010:	230c      	movs	r3, #12
 8003012:	f8c8 3000 	str.w	r3, [r8]
 8003016:	f04f 30ff 	mov.w	r0, #4294967295
 800301a:	e0c8      	b.n	80031ae <_svfiprintf_r+0x1c2>
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	6163      	str	r3, [r4, #20]
 8003020:	2300      	movs	r3, #0
 8003022:	9309      	str	r3, [sp, #36]	; 0x24
 8003024:	2320      	movs	r3, #32
 8003026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800302a:	2330      	movs	r3, #48	; 0x30
 800302c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003030:	9503      	str	r5, [sp, #12]
 8003032:	f04f 0b01 	mov.w	fp, #1
 8003036:	4637      	mov	r7, r6
 8003038:	463d      	mov	r5, r7
 800303a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800303e:	b10b      	cbz	r3, 8003044 <_svfiprintf_r+0x58>
 8003040:	2b25      	cmp	r3, #37	; 0x25
 8003042:	d13e      	bne.n	80030c2 <_svfiprintf_r+0xd6>
 8003044:	ebb7 0a06 	subs.w	sl, r7, r6
 8003048:	d00b      	beq.n	8003062 <_svfiprintf_r+0x76>
 800304a:	4653      	mov	r3, sl
 800304c:	4632      	mov	r2, r6
 800304e:	4621      	mov	r1, r4
 8003050:	4640      	mov	r0, r8
 8003052:	f7ff ff71 	bl	8002f38 <__ssputs_r>
 8003056:	3001      	adds	r0, #1
 8003058:	f000 80a4 	beq.w	80031a4 <_svfiprintf_r+0x1b8>
 800305c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800305e:	4453      	add	r3, sl
 8003060:	9309      	str	r3, [sp, #36]	; 0x24
 8003062:	783b      	ldrb	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 809d 	beq.w	80031a4 <_svfiprintf_r+0x1b8>
 800306a:	2300      	movs	r3, #0
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003074:	9304      	str	r3, [sp, #16]
 8003076:	9307      	str	r3, [sp, #28]
 8003078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800307c:	931a      	str	r3, [sp, #104]	; 0x68
 800307e:	462f      	mov	r7, r5
 8003080:	2205      	movs	r2, #5
 8003082:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003086:	4850      	ldr	r0, [pc, #320]	; (80031c8 <_svfiprintf_r+0x1dc>)
 8003088:	f7fd f8b2 	bl	80001f0 <memchr>
 800308c:	9b04      	ldr	r3, [sp, #16]
 800308e:	b9d0      	cbnz	r0, 80030c6 <_svfiprintf_r+0xda>
 8003090:	06d9      	lsls	r1, r3, #27
 8003092:	bf44      	itt	mi
 8003094:	2220      	movmi	r2, #32
 8003096:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800309a:	071a      	lsls	r2, r3, #28
 800309c:	bf44      	itt	mi
 800309e:	222b      	movmi	r2, #43	; 0x2b
 80030a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030a4:	782a      	ldrb	r2, [r5, #0]
 80030a6:	2a2a      	cmp	r2, #42	; 0x2a
 80030a8:	d015      	beq.n	80030d6 <_svfiprintf_r+0xea>
 80030aa:	9a07      	ldr	r2, [sp, #28]
 80030ac:	462f      	mov	r7, r5
 80030ae:	2000      	movs	r0, #0
 80030b0:	250a      	movs	r5, #10
 80030b2:	4639      	mov	r1, r7
 80030b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030b8:	3b30      	subs	r3, #48	; 0x30
 80030ba:	2b09      	cmp	r3, #9
 80030bc:	d94d      	bls.n	800315a <_svfiprintf_r+0x16e>
 80030be:	b1b8      	cbz	r0, 80030f0 <_svfiprintf_r+0x104>
 80030c0:	e00f      	b.n	80030e2 <_svfiprintf_r+0xf6>
 80030c2:	462f      	mov	r7, r5
 80030c4:	e7b8      	b.n	8003038 <_svfiprintf_r+0x4c>
 80030c6:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <_svfiprintf_r+0x1dc>)
 80030c8:	1a80      	subs	r0, r0, r2
 80030ca:	fa0b f000 	lsl.w	r0, fp, r0
 80030ce:	4318      	orrs	r0, r3
 80030d0:	9004      	str	r0, [sp, #16]
 80030d2:	463d      	mov	r5, r7
 80030d4:	e7d3      	b.n	800307e <_svfiprintf_r+0x92>
 80030d6:	9a03      	ldr	r2, [sp, #12]
 80030d8:	1d11      	adds	r1, r2, #4
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	9103      	str	r1, [sp, #12]
 80030de:	2a00      	cmp	r2, #0
 80030e0:	db01      	blt.n	80030e6 <_svfiprintf_r+0xfa>
 80030e2:	9207      	str	r2, [sp, #28]
 80030e4:	e004      	b.n	80030f0 <_svfiprintf_r+0x104>
 80030e6:	4252      	negs	r2, r2
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	9207      	str	r2, [sp, #28]
 80030ee:	9304      	str	r3, [sp, #16]
 80030f0:	783b      	ldrb	r3, [r7, #0]
 80030f2:	2b2e      	cmp	r3, #46	; 0x2e
 80030f4:	d10c      	bne.n	8003110 <_svfiprintf_r+0x124>
 80030f6:	787b      	ldrb	r3, [r7, #1]
 80030f8:	2b2a      	cmp	r3, #42	; 0x2a
 80030fa:	d133      	bne.n	8003164 <_svfiprintf_r+0x178>
 80030fc:	9b03      	ldr	r3, [sp, #12]
 80030fe:	1d1a      	adds	r2, r3, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	9203      	str	r2, [sp, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	bfb8      	it	lt
 8003108:	f04f 33ff 	movlt.w	r3, #4294967295
 800310c:	3702      	adds	r7, #2
 800310e:	9305      	str	r3, [sp, #20]
 8003110:	4d2e      	ldr	r5, [pc, #184]	; (80031cc <_svfiprintf_r+0x1e0>)
 8003112:	7839      	ldrb	r1, [r7, #0]
 8003114:	2203      	movs	r2, #3
 8003116:	4628      	mov	r0, r5
 8003118:	f7fd f86a 	bl	80001f0 <memchr>
 800311c:	b138      	cbz	r0, 800312e <_svfiprintf_r+0x142>
 800311e:	2340      	movs	r3, #64	; 0x40
 8003120:	1b40      	subs	r0, r0, r5
 8003122:	fa03 f000 	lsl.w	r0, r3, r0
 8003126:	9b04      	ldr	r3, [sp, #16]
 8003128:	4303      	orrs	r3, r0
 800312a:	3701      	adds	r7, #1
 800312c:	9304      	str	r3, [sp, #16]
 800312e:	7839      	ldrb	r1, [r7, #0]
 8003130:	4827      	ldr	r0, [pc, #156]	; (80031d0 <_svfiprintf_r+0x1e4>)
 8003132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003136:	2206      	movs	r2, #6
 8003138:	1c7e      	adds	r6, r7, #1
 800313a:	f7fd f859 	bl	80001f0 <memchr>
 800313e:	2800      	cmp	r0, #0
 8003140:	d038      	beq.n	80031b4 <_svfiprintf_r+0x1c8>
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <_svfiprintf_r+0x1e8>)
 8003144:	bb13      	cbnz	r3, 800318c <_svfiprintf_r+0x1a0>
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	3307      	adds	r3, #7
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	3308      	adds	r3, #8
 8003150:	9303      	str	r3, [sp, #12]
 8003152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003154:	444b      	add	r3, r9
 8003156:	9309      	str	r3, [sp, #36]	; 0x24
 8003158:	e76d      	b.n	8003036 <_svfiprintf_r+0x4a>
 800315a:	fb05 3202 	mla	r2, r5, r2, r3
 800315e:	2001      	movs	r0, #1
 8003160:	460f      	mov	r7, r1
 8003162:	e7a6      	b.n	80030b2 <_svfiprintf_r+0xc6>
 8003164:	2300      	movs	r3, #0
 8003166:	3701      	adds	r7, #1
 8003168:	9305      	str	r3, [sp, #20]
 800316a:	4619      	mov	r1, r3
 800316c:	250a      	movs	r5, #10
 800316e:	4638      	mov	r0, r7
 8003170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003174:	3a30      	subs	r2, #48	; 0x30
 8003176:	2a09      	cmp	r2, #9
 8003178:	d903      	bls.n	8003182 <_svfiprintf_r+0x196>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0c8      	beq.n	8003110 <_svfiprintf_r+0x124>
 800317e:	9105      	str	r1, [sp, #20]
 8003180:	e7c6      	b.n	8003110 <_svfiprintf_r+0x124>
 8003182:	fb05 2101 	mla	r1, r5, r1, r2
 8003186:	2301      	movs	r3, #1
 8003188:	4607      	mov	r7, r0
 800318a:	e7f0      	b.n	800316e <_svfiprintf_r+0x182>
 800318c:	ab03      	add	r3, sp, #12
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4622      	mov	r2, r4
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <_svfiprintf_r+0x1ec>)
 8003194:	a904      	add	r1, sp, #16
 8003196:	4640      	mov	r0, r8
 8003198:	f3af 8000 	nop.w
 800319c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031a0:	4681      	mov	r9, r0
 80031a2:	d1d6      	bne.n	8003152 <_svfiprintf_r+0x166>
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	065b      	lsls	r3, r3, #25
 80031a8:	f53f af35 	bmi.w	8003016 <_svfiprintf_r+0x2a>
 80031ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031ae:	b01d      	add	sp, #116	; 0x74
 80031b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b4:	ab03      	add	r3, sp, #12
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4622      	mov	r2, r4
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <_svfiprintf_r+0x1ec>)
 80031bc:	a904      	add	r1, sp, #16
 80031be:	4640      	mov	r0, r8
 80031c0:	f000 f882 	bl	80032c8 <_printf_i>
 80031c4:	e7ea      	b.n	800319c <_svfiprintf_r+0x1b0>
 80031c6:	bf00      	nop
 80031c8:	0800373c 	.word	0x0800373c
 80031cc:	08003742 	.word	0x08003742
 80031d0:	08003746 	.word	0x08003746
 80031d4:	00000000 	.word	0x00000000
 80031d8:	08002f39 	.word	0x08002f39

080031dc <_printf_common>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	4691      	mov	r9, r2
 80031e2:	461f      	mov	r7, r3
 80031e4:	688a      	ldr	r2, [r1, #8]
 80031e6:	690b      	ldr	r3, [r1, #16]
 80031e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	bfb8      	it	lt
 80031f0:	4613      	movlt	r3, r2
 80031f2:	f8c9 3000 	str.w	r3, [r9]
 80031f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031fa:	4606      	mov	r6, r0
 80031fc:	460c      	mov	r4, r1
 80031fe:	b112      	cbz	r2, 8003206 <_printf_common+0x2a>
 8003200:	3301      	adds	r3, #1
 8003202:	f8c9 3000 	str.w	r3, [r9]
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	0699      	lsls	r1, r3, #26
 800320a:	bf42      	ittt	mi
 800320c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003210:	3302      	addmi	r3, #2
 8003212:	f8c9 3000 	strmi.w	r3, [r9]
 8003216:	6825      	ldr	r5, [r4, #0]
 8003218:	f015 0506 	ands.w	r5, r5, #6
 800321c:	d107      	bne.n	800322e <_printf_common+0x52>
 800321e:	f104 0a19 	add.w	sl, r4, #25
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	f8d9 2000 	ldr.w	r2, [r9]
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	42ab      	cmp	r3, r5
 800322c:	dc28      	bgt.n	8003280 <_printf_common+0xa4>
 800322e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	3300      	adds	r3, #0
 8003236:	bf18      	it	ne
 8003238:	2301      	movne	r3, #1
 800323a:	0692      	lsls	r2, r2, #26
 800323c:	d42d      	bmi.n	800329a <_printf_common+0xbe>
 800323e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003242:	4639      	mov	r1, r7
 8003244:	4630      	mov	r0, r6
 8003246:	47c0      	blx	r8
 8003248:	3001      	adds	r0, #1
 800324a:	d020      	beq.n	800328e <_printf_common+0xb2>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	68e5      	ldr	r5, [r4, #12]
 8003250:	f8d9 2000 	ldr.w	r2, [r9]
 8003254:	f003 0306 	and.w	r3, r3, #6
 8003258:	2b04      	cmp	r3, #4
 800325a:	bf08      	it	eq
 800325c:	1aad      	subeq	r5, r5, r2
 800325e:	68a3      	ldr	r3, [r4, #8]
 8003260:	6922      	ldr	r2, [r4, #16]
 8003262:	bf0c      	ite	eq
 8003264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003268:	2500      	movne	r5, #0
 800326a:	4293      	cmp	r3, r2
 800326c:	bfc4      	itt	gt
 800326e:	1a9b      	subgt	r3, r3, r2
 8003270:	18ed      	addgt	r5, r5, r3
 8003272:	f04f 0900 	mov.w	r9, #0
 8003276:	341a      	adds	r4, #26
 8003278:	454d      	cmp	r5, r9
 800327a:	d11a      	bne.n	80032b2 <_printf_common+0xd6>
 800327c:	2000      	movs	r0, #0
 800327e:	e008      	b.n	8003292 <_printf_common+0xb6>
 8003280:	2301      	movs	r3, #1
 8003282:	4652      	mov	r2, sl
 8003284:	4639      	mov	r1, r7
 8003286:	4630      	mov	r0, r6
 8003288:	47c0      	blx	r8
 800328a:	3001      	adds	r0, #1
 800328c:	d103      	bne.n	8003296 <_printf_common+0xba>
 800328e:	f04f 30ff 	mov.w	r0, #4294967295
 8003292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003296:	3501      	adds	r5, #1
 8003298:	e7c3      	b.n	8003222 <_printf_common+0x46>
 800329a:	18e1      	adds	r1, r4, r3
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	2030      	movs	r0, #48	; 0x30
 80032a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032a4:	4422      	add	r2, r4
 80032a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032ae:	3302      	adds	r3, #2
 80032b0:	e7c5      	b.n	800323e <_printf_common+0x62>
 80032b2:	2301      	movs	r3, #1
 80032b4:	4622      	mov	r2, r4
 80032b6:	4639      	mov	r1, r7
 80032b8:	4630      	mov	r0, r6
 80032ba:	47c0      	blx	r8
 80032bc:	3001      	adds	r0, #1
 80032be:	d0e6      	beq.n	800328e <_printf_common+0xb2>
 80032c0:	f109 0901 	add.w	r9, r9, #1
 80032c4:	e7d8      	b.n	8003278 <_printf_common+0x9c>
||||||| 7f56823
 8002c58:	e7ff      	b.n	8002c5a <UART_SetConfig+0x6e2>
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40011400 	.word	0x40011400
 8002c6c:	51eb851f 	.word	0x51eb851f

08002c70 <__errno>:
 8002c70:	4b01      	ldr	r3, [pc, #4]	; (8002c78 <__errno+0x8>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4e0d      	ldr	r6, [pc, #52]	; (8002cb4 <__libc_init_array+0x38>)
 8002c80:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c82:	1ba4      	subs	r4, r4, r6
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	2500      	movs	r5, #0
 8002c88:	42a5      	cmp	r5, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	4e0b      	ldr	r6, [pc, #44]	; (8002cbc <__libc_init_array+0x40>)
 8002c8e:	4c0c      	ldr	r4, [pc, #48]	; (8002cc0 <__libc_init_array+0x44>)
 8002c90:	f000 fc26 	bl	80034e0 <_init>
 8002c94:	1ba4      	subs	r4, r4, r6
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	2500      	movs	r5, #0
 8002c9a:	42a5      	cmp	r5, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ca4:	4798      	blx	r3
 8002ca6:	3501      	adds	r5, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cae:	4798      	blx	r3
 8002cb0:	3501      	adds	r5, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08003554 	.word	0x08003554
 8002cb8:	08003554 	.word	0x08003554
 8002cbc:	08003554 	.word	0x08003554
 8002cc0:	08003558 	.word	0x08003558

08002cc4 <memset>:
 8002cc4:	4402      	add	r2, r0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <siprintf>:
 8002cd4:	b40e      	push	{r1, r2, r3}
 8002cd6:	b500      	push	{lr}
 8002cd8:	b09c      	sub	sp, #112	; 0x70
 8002cda:	ab1d      	add	r3, sp, #116	; 0x74
 8002cdc:	9002      	str	r0, [sp, #8]
 8002cde:	9006      	str	r0, [sp, #24]
 8002ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ce4:	4809      	ldr	r0, [pc, #36]	; (8002d0c <siprintf+0x38>)
 8002ce6:	9107      	str	r1, [sp, #28]
 8002ce8:	9104      	str	r1, [sp, #16]
 8002cea:	4909      	ldr	r1, [pc, #36]	; (8002d10 <siprintf+0x3c>)
 8002cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cf0:	9105      	str	r1, [sp, #20]
 8002cf2:	6800      	ldr	r0, [r0, #0]
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	a902      	add	r1, sp, #8
 8002cf8:	f000 f866 	bl	8002dc8 <_svfiprintf_r>
 8002cfc:	9b02      	ldr	r3, [sp, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	b01c      	add	sp, #112	; 0x70
 8002d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d08:	b003      	add	sp, #12
 8002d0a:	4770      	bx	lr
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	ffff0208 	.word	0xffff0208

08002d14 <__ssputs_r>:
 8002d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d18:	688e      	ldr	r6, [r1, #8]
 8002d1a:	429e      	cmp	r6, r3
 8002d1c:	4682      	mov	sl, r0
 8002d1e:	460c      	mov	r4, r1
 8002d20:	4690      	mov	r8, r2
 8002d22:	4699      	mov	r9, r3
 8002d24:	d837      	bhi.n	8002d96 <__ssputs_r+0x82>
 8002d26:	898a      	ldrh	r2, [r1, #12]
 8002d28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d2c:	d031      	beq.n	8002d92 <__ssputs_r+0x7e>
 8002d2e:	6825      	ldr	r5, [r4, #0]
 8002d30:	6909      	ldr	r1, [r1, #16]
 8002d32:	1a6f      	subs	r7, r5, r1
 8002d34:	6965      	ldr	r5, [r4, #20]
 8002d36:	2302      	movs	r3, #2
 8002d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002d40:	f109 0301 	add.w	r3, r9, #1
 8002d44:	443b      	add	r3, r7
 8002d46:	429d      	cmp	r5, r3
 8002d48:	bf38      	it	cc
 8002d4a:	461d      	movcc	r5, r3
 8002d4c:	0553      	lsls	r3, r2, #21
 8002d4e:	d530      	bpl.n	8002db2 <__ssputs_r+0x9e>
 8002d50:	4629      	mov	r1, r5
 8002d52:	f000 fb2b 	bl	80033ac <_malloc_r>
 8002d56:	4606      	mov	r6, r0
 8002d58:	b950      	cbnz	r0, 8002d70 <__ssputs_r+0x5c>
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	f8ca 3000 	str.w	r3, [sl]
 8002d60:	89a3      	ldrh	r3, [r4, #12]
 8002d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d66:	81a3      	strh	r3, [r4, #12]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d70:	463a      	mov	r2, r7
 8002d72:	6921      	ldr	r1, [r4, #16]
 8002d74:	f000 faa8 	bl	80032c8 <memcpy>
 8002d78:	89a3      	ldrh	r3, [r4, #12]
 8002d7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	81a3      	strh	r3, [r4, #12]
 8002d84:	6126      	str	r6, [r4, #16]
 8002d86:	6165      	str	r5, [r4, #20]
 8002d88:	443e      	add	r6, r7
 8002d8a:	1bed      	subs	r5, r5, r7
 8002d8c:	6026      	str	r6, [r4, #0]
 8002d8e:	60a5      	str	r5, [r4, #8]
 8002d90:	464e      	mov	r6, r9
 8002d92:	454e      	cmp	r6, r9
 8002d94:	d900      	bls.n	8002d98 <__ssputs_r+0x84>
 8002d96:	464e      	mov	r6, r9
 8002d98:	4632      	mov	r2, r6
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	6820      	ldr	r0, [r4, #0]
 8002d9e:	f000 fa9e 	bl	80032de <memmove>
 8002da2:	68a3      	ldr	r3, [r4, #8]
 8002da4:	1b9b      	subs	r3, r3, r6
 8002da6:	60a3      	str	r3, [r4, #8]
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	441e      	add	r6, r3
 8002dac:	6026      	str	r6, [r4, #0]
 8002dae:	2000      	movs	r0, #0
 8002db0:	e7dc      	b.n	8002d6c <__ssputs_r+0x58>
 8002db2:	462a      	mov	r2, r5
 8002db4:	f000 fb54 	bl	8003460 <_realloc_r>
 8002db8:	4606      	mov	r6, r0
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d1e2      	bne.n	8002d84 <__ssputs_r+0x70>
 8002dbe:	6921      	ldr	r1, [r4, #16]
 8002dc0:	4650      	mov	r0, sl
 8002dc2:	f000 faa5 	bl	8003310 <_free_r>
 8002dc6:	e7c8      	b.n	8002d5a <__ssputs_r+0x46>

08002dc8 <_svfiprintf_r>:
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	461d      	mov	r5, r3
 8002dce:	898b      	ldrh	r3, [r1, #12]
 8002dd0:	061f      	lsls	r7, r3, #24
 8002dd2:	b09d      	sub	sp, #116	; 0x74
 8002dd4:	4680      	mov	r8, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	4616      	mov	r6, r2
 8002dda:	d50f      	bpl.n	8002dfc <_svfiprintf_r+0x34>
 8002ddc:	690b      	ldr	r3, [r1, #16]
 8002dde:	b96b      	cbnz	r3, 8002dfc <_svfiprintf_r+0x34>
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	f000 fae3 	bl	80033ac <_malloc_r>
 8002de6:	6020      	str	r0, [r4, #0]
 8002de8:	6120      	str	r0, [r4, #16]
 8002dea:	b928      	cbnz	r0, 8002df8 <_svfiprintf_r+0x30>
 8002dec:	230c      	movs	r3, #12
 8002dee:	f8c8 3000 	str.w	r3, [r8]
 8002df2:	f04f 30ff 	mov.w	r0, #4294967295
 8002df6:	e0c8      	b.n	8002f8a <_svfiprintf_r+0x1c2>
 8002df8:	2340      	movs	r3, #64	; 0x40
 8002dfa:	6163      	str	r3, [r4, #20]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8002e00:	2320      	movs	r3, #32
 8002e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e06:	2330      	movs	r3, #48	; 0x30
 8002e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e0c:	9503      	str	r5, [sp, #12]
 8002e0e:	f04f 0b01 	mov.w	fp, #1
 8002e12:	4637      	mov	r7, r6
 8002e14:	463d      	mov	r5, r7
 8002e16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e1a:	b10b      	cbz	r3, 8002e20 <_svfiprintf_r+0x58>
 8002e1c:	2b25      	cmp	r3, #37	; 0x25
 8002e1e:	d13e      	bne.n	8002e9e <_svfiprintf_r+0xd6>
 8002e20:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e24:	d00b      	beq.n	8002e3e <_svfiprintf_r+0x76>
 8002e26:	4653      	mov	r3, sl
 8002e28:	4632      	mov	r2, r6
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	4640      	mov	r0, r8
 8002e2e:	f7ff ff71 	bl	8002d14 <__ssputs_r>
 8002e32:	3001      	adds	r0, #1
 8002e34:	f000 80a4 	beq.w	8002f80 <_svfiprintf_r+0x1b8>
 8002e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e3a:	4453      	add	r3, sl
 8002e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3e:	783b      	ldrb	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 809d 	beq.w	8002f80 <_svfiprintf_r+0x1b8>
 8002e46:	2300      	movs	r3, #0
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e50:	9304      	str	r3, [sp, #16]
 8002e52:	9307      	str	r3, [sp, #28]
 8002e54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e58:	931a      	str	r3, [sp, #104]	; 0x68
 8002e5a:	462f      	mov	r7, r5
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002e62:	4850      	ldr	r0, [pc, #320]	; (8002fa4 <_svfiprintf_r+0x1dc>)
 8002e64:	f7fd f9c4 	bl	80001f0 <memchr>
 8002e68:	9b04      	ldr	r3, [sp, #16]
 8002e6a:	b9d0      	cbnz	r0, 8002ea2 <_svfiprintf_r+0xda>
 8002e6c:	06d9      	lsls	r1, r3, #27
 8002e6e:	bf44      	itt	mi
 8002e70:	2220      	movmi	r2, #32
 8002e72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e76:	071a      	lsls	r2, r3, #28
 8002e78:	bf44      	itt	mi
 8002e7a:	222b      	movmi	r2, #43	; 0x2b
 8002e7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e80:	782a      	ldrb	r2, [r5, #0]
 8002e82:	2a2a      	cmp	r2, #42	; 0x2a
 8002e84:	d015      	beq.n	8002eb2 <_svfiprintf_r+0xea>
 8002e86:	9a07      	ldr	r2, [sp, #28]
 8002e88:	462f      	mov	r7, r5
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	250a      	movs	r5, #10
 8002e8e:	4639      	mov	r1, r7
 8002e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e94:	3b30      	subs	r3, #48	; 0x30
 8002e96:	2b09      	cmp	r3, #9
 8002e98:	d94d      	bls.n	8002f36 <_svfiprintf_r+0x16e>
 8002e9a:	b1b8      	cbz	r0, 8002ecc <_svfiprintf_r+0x104>
 8002e9c:	e00f      	b.n	8002ebe <_svfiprintf_r+0xf6>
 8002e9e:	462f      	mov	r7, r5
 8002ea0:	e7b8      	b.n	8002e14 <_svfiprintf_r+0x4c>
 8002ea2:	4a40      	ldr	r2, [pc, #256]	; (8002fa4 <_svfiprintf_r+0x1dc>)
 8002ea4:	1a80      	subs	r0, r0, r2
 8002ea6:	fa0b f000 	lsl.w	r0, fp, r0
 8002eaa:	4318      	orrs	r0, r3
 8002eac:	9004      	str	r0, [sp, #16]
 8002eae:	463d      	mov	r5, r7
 8002eb0:	e7d3      	b.n	8002e5a <_svfiprintf_r+0x92>
 8002eb2:	9a03      	ldr	r2, [sp, #12]
 8002eb4:	1d11      	adds	r1, r2, #4
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	9103      	str	r1, [sp, #12]
 8002eba:	2a00      	cmp	r2, #0
 8002ebc:	db01      	blt.n	8002ec2 <_svfiprintf_r+0xfa>
 8002ebe:	9207      	str	r2, [sp, #28]
 8002ec0:	e004      	b.n	8002ecc <_svfiprintf_r+0x104>
 8002ec2:	4252      	negs	r2, r2
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	9207      	str	r2, [sp, #28]
 8002eca:	9304      	str	r3, [sp, #16]
 8002ecc:	783b      	ldrb	r3, [r7, #0]
 8002ece:	2b2e      	cmp	r3, #46	; 0x2e
 8002ed0:	d10c      	bne.n	8002eec <_svfiprintf_r+0x124>
 8002ed2:	787b      	ldrb	r3, [r7, #1]
 8002ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed6:	d133      	bne.n	8002f40 <_svfiprintf_r+0x178>
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	1d1a      	adds	r2, r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	9203      	str	r2, [sp, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bfb8      	it	lt
 8002ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ee8:	3702      	adds	r7, #2
 8002eea:	9305      	str	r3, [sp, #20]
 8002eec:	4d2e      	ldr	r5, [pc, #184]	; (8002fa8 <_svfiprintf_r+0x1e0>)
 8002eee:	7839      	ldrb	r1, [r7, #0]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f7fd f97c 	bl	80001f0 <memchr>
 8002ef8:	b138      	cbz	r0, 8002f0a <_svfiprintf_r+0x142>
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	1b40      	subs	r0, r0, r5
 8002efe:	fa03 f000 	lsl.w	r0, r3, r0
 8002f02:	9b04      	ldr	r3, [sp, #16]
 8002f04:	4303      	orrs	r3, r0
 8002f06:	3701      	adds	r7, #1
 8002f08:	9304      	str	r3, [sp, #16]
 8002f0a:	7839      	ldrb	r1, [r7, #0]
 8002f0c:	4827      	ldr	r0, [pc, #156]	; (8002fac <_svfiprintf_r+0x1e4>)
 8002f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f12:	2206      	movs	r2, #6
 8002f14:	1c7e      	adds	r6, r7, #1
 8002f16:	f7fd f96b 	bl	80001f0 <memchr>
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d038      	beq.n	8002f90 <_svfiprintf_r+0x1c8>
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <_svfiprintf_r+0x1e8>)
 8002f20:	bb13      	cbnz	r3, 8002f68 <_svfiprintf_r+0x1a0>
 8002f22:	9b03      	ldr	r3, [sp, #12]
 8002f24:	3307      	adds	r3, #7
 8002f26:	f023 0307 	bic.w	r3, r3, #7
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	9303      	str	r3, [sp, #12]
 8002f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f30:	444b      	add	r3, r9
 8002f32:	9309      	str	r3, [sp, #36]	; 0x24
 8002f34:	e76d      	b.n	8002e12 <_svfiprintf_r+0x4a>
 8002f36:	fb05 3202 	mla	r2, r5, r2, r3
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	460f      	mov	r7, r1
 8002f3e:	e7a6      	b.n	8002e8e <_svfiprintf_r+0xc6>
 8002f40:	2300      	movs	r3, #0
 8002f42:	3701      	adds	r7, #1
 8002f44:	9305      	str	r3, [sp, #20]
 8002f46:	4619      	mov	r1, r3
 8002f48:	250a      	movs	r5, #10
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f50:	3a30      	subs	r2, #48	; 0x30
 8002f52:	2a09      	cmp	r2, #9
 8002f54:	d903      	bls.n	8002f5e <_svfiprintf_r+0x196>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0c8      	beq.n	8002eec <_svfiprintf_r+0x124>
 8002f5a:	9105      	str	r1, [sp, #20]
 8002f5c:	e7c6      	b.n	8002eec <_svfiprintf_r+0x124>
 8002f5e:	fb05 2101 	mla	r1, r5, r1, r2
 8002f62:	2301      	movs	r3, #1
 8002f64:	4607      	mov	r7, r0
 8002f66:	e7f0      	b.n	8002f4a <_svfiprintf_r+0x182>
 8002f68:	ab03      	add	r3, sp, #12
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <_svfiprintf_r+0x1ec>)
 8002f70:	a904      	add	r1, sp, #16
 8002f72:	4640      	mov	r0, r8
 8002f74:	f3af 8000 	nop.w
 8002f78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002f7c:	4681      	mov	r9, r0
 8002f7e:	d1d6      	bne.n	8002f2e <_svfiprintf_r+0x166>
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	065b      	lsls	r3, r3, #25
 8002f84:	f53f af35 	bmi.w	8002df2 <_svfiprintf_r+0x2a>
 8002f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f8a:	b01d      	add	sp, #116	; 0x74
 8002f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f90:	ab03      	add	r3, sp, #12
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4622      	mov	r2, r4
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <_svfiprintf_r+0x1ec>)
 8002f98:	a904      	add	r1, sp, #16
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	f000 f882 	bl	80030a4 <_printf_i>
 8002fa0:	e7ea      	b.n	8002f78 <_svfiprintf_r+0x1b0>
 8002fa2:	bf00      	nop
 8002fa4:	08003518 	.word	0x08003518
 8002fa8:	0800351e 	.word	0x0800351e
 8002fac:	08003522 	.word	0x08003522
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	08002d15 	.word	0x08002d15

08002fb8 <_printf_common>:
 8002fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fbc:	4691      	mov	r9, r2
 8002fbe:	461f      	mov	r7, r3
 8002fc0:	688a      	ldr	r2, [r1, #8]
 8002fc2:	690b      	ldr	r3, [r1, #16]
 8002fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bfb8      	it	lt
 8002fcc:	4613      	movlt	r3, r2
 8002fce:	f8c9 3000 	str.w	r3, [r9]
 8002fd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	460c      	mov	r4, r1
 8002fda:	b112      	cbz	r2, 8002fe2 <_printf_common+0x2a>
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f8c9 3000 	str.w	r3, [r9]
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	0699      	lsls	r1, r3, #26
 8002fe6:	bf42      	ittt	mi
 8002fe8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fec:	3302      	addmi	r3, #2
 8002fee:	f8c9 3000 	strmi.w	r3, [r9]
 8002ff2:	6825      	ldr	r5, [r4, #0]
 8002ff4:	f015 0506 	ands.w	r5, r5, #6
 8002ff8:	d107      	bne.n	800300a <_printf_common+0x52>
 8002ffa:	f104 0a19 	add.w	sl, r4, #25
 8002ffe:	68e3      	ldr	r3, [r4, #12]
 8003000:	f8d9 2000 	ldr.w	r2, [r9]
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	42ab      	cmp	r3, r5
 8003008:	dc28      	bgt.n	800305c <_printf_common+0xa4>
 800300a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800300e:	6822      	ldr	r2, [r4, #0]
 8003010:	3300      	adds	r3, #0
 8003012:	bf18      	it	ne
 8003014:	2301      	movne	r3, #1
 8003016:	0692      	lsls	r2, r2, #26
 8003018:	d42d      	bmi.n	8003076 <_printf_common+0xbe>
 800301a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800301e:	4639      	mov	r1, r7
 8003020:	4630      	mov	r0, r6
 8003022:	47c0      	blx	r8
 8003024:	3001      	adds	r0, #1
 8003026:	d020      	beq.n	800306a <_printf_common+0xb2>
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	68e5      	ldr	r5, [r4, #12]
 800302c:	f8d9 2000 	ldr.w	r2, [r9]
 8003030:	f003 0306 	and.w	r3, r3, #6
 8003034:	2b04      	cmp	r3, #4
 8003036:	bf08      	it	eq
 8003038:	1aad      	subeq	r5, r5, r2
 800303a:	68a3      	ldr	r3, [r4, #8]
 800303c:	6922      	ldr	r2, [r4, #16]
 800303e:	bf0c      	ite	eq
 8003040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003044:	2500      	movne	r5, #0
 8003046:	4293      	cmp	r3, r2
 8003048:	bfc4      	itt	gt
 800304a:	1a9b      	subgt	r3, r3, r2
 800304c:	18ed      	addgt	r5, r5, r3
 800304e:	f04f 0900 	mov.w	r9, #0
 8003052:	341a      	adds	r4, #26
 8003054:	454d      	cmp	r5, r9
 8003056:	d11a      	bne.n	800308e <_printf_common+0xd6>
 8003058:	2000      	movs	r0, #0
 800305a:	e008      	b.n	800306e <_printf_common+0xb6>
 800305c:	2301      	movs	r3, #1
 800305e:	4652      	mov	r2, sl
 8003060:	4639      	mov	r1, r7
 8003062:	4630      	mov	r0, r6
 8003064:	47c0      	blx	r8
 8003066:	3001      	adds	r0, #1
 8003068:	d103      	bne.n	8003072 <_printf_common+0xba>
 800306a:	f04f 30ff 	mov.w	r0, #4294967295
 800306e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003072:	3501      	adds	r5, #1
 8003074:	e7c3      	b.n	8002ffe <_printf_common+0x46>
 8003076:	18e1      	adds	r1, r4, r3
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	2030      	movs	r0, #48	; 0x30
 800307c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003080:	4422      	add	r2, r4
 8003082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003086:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800308a:	3302      	adds	r3, #2
 800308c:	e7c5      	b.n	800301a <_printf_common+0x62>
 800308e:	2301      	movs	r3, #1
 8003090:	4622      	mov	r2, r4
 8003092:	4639      	mov	r1, r7
 8003094:	4630      	mov	r0, r6
 8003096:	47c0      	blx	r8
 8003098:	3001      	adds	r0, #1
 800309a:	d0e6      	beq.n	800306a <_printf_common+0xb2>
 800309c:	f109 0901 	add.w	r9, r9, #1
 80030a0:	e7d8      	b.n	8003054 <_printf_common+0x9c>
=======
 8003574:	e7ff      	b.n	8003576 <UART_SetConfig+0x6e2>
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003580:	40011000 	.word	0x40011000
 8003584:	40011400 	.word	0x40011400
 8003588:	51eb851f 	.word	0x51eb851f

0800358c <__errno>:
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <__errno+0x8>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	2000000c 	.word	0x2000000c

08003598 <__libc_init_array>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	4e0d      	ldr	r6, [pc, #52]	; (80035d0 <__libc_init_array+0x38>)
 800359c:	4c0d      	ldr	r4, [pc, #52]	; (80035d4 <__libc_init_array+0x3c>)
 800359e:	1ba4      	subs	r4, r4, r6
 80035a0:	10a4      	asrs	r4, r4, #2
 80035a2:	2500      	movs	r5, #0
 80035a4:	42a5      	cmp	r5, r4
 80035a6:	d109      	bne.n	80035bc <__libc_init_array+0x24>
 80035a8:	4e0b      	ldr	r6, [pc, #44]	; (80035d8 <__libc_init_array+0x40>)
 80035aa:	4c0c      	ldr	r4, [pc, #48]	; (80035dc <__libc_init_array+0x44>)
 80035ac:	f000 fc26 	bl	8003dfc <_init>
 80035b0:	1ba4      	subs	r4, r4, r6
 80035b2:	10a4      	asrs	r4, r4, #2
 80035b4:	2500      	movs	r5, #0
 80035b6:	42a5      	cmp	r5, r4
 80035b8:	d105      	bne.n	80035c6 <__libc_init_array+0x2e>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035c0:	4798      	blx	r3
 80035c2:	3501      	adds	r5, #1
 80035c4:	e7ee      	b.n	80035a4 <__libc_init_array+0xc>
 80035c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035ca:	4798      	blx	r3
 80035cc:	3501      	adds	r5, #1
 80035ce:	e7f2      	b.n	80035b6 <__libc_init_array+0x1e>
 80035d0:	08003e70 	.word	0x08003e70
 80035d4:	08003e70 	.word	0x08003e70
 80035d8:	08003e70 	.word	0x08003e70
 80035dc:	08003e74 	.word	0x08003e74

080035e0 <memset>:
 80035e0:	4402      	add	r2, r0
 80035e2:	4603      	mov	r3, r0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d100      	bne.n	80035ea <memset+0xa>
 80035e8:	4770      	bx	lr
 80035ea:	f803 1b01 	strb.w	r1, [r3], #1
 80035ee:	e7f9      	b.n	80035e4 <memset+0x4>

080035f0 <siprintf>:
 80035f0:	b40e      	push	{r1, r2, r3}
 80035f2:	b500      	push	{lr}
 80035f4:	b09c      	sub	sp, #112	; 0x70
 80035f6:	ab1d      	add	r3, sp, #116	; 0x74
 80035f8:	9002      	str	r0, [sp, #8]
 80035fa:	9006      	str	r0, [sp, #24]
 80035fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003600:	4809      	ldr	r0, [pc, #36]	; (8003628 <siprintf+0x38>)
 8003602:	9107      	str	r1, [sp, #28]
 8003604:	9104      	str	r1, [sp, #16]
 8003606:	4909      	ldr	r1, [pc, #36]	; (800362c <siprintf+0x3c>)
 8003608:	f853 2b04 	ldr.w	r2, [r3], #4
 800360c:	9105      	str	r1, [sp, #20]
 800360e:	6800      	ldr	r0, [r0, #0]
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	a902      	add	r1, sp, #8
 8003614:	f000 f866 	bl	80036e4 <_svfiprintf_r>
 8003618:	9b02      	ldr	r3, [sp, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	b01c      	add	sp, #112	; 0x70
 8003620:	f85d eb04 	ldr.w	lr, [sp], #4
 8003624:	b003      	add	sp, #12
 8003626:	4770      	bx	lr
 8003628:	2000000c 	.word	0x2000000c
 800362c:	ffff0208 	.word	0xffff0208

08003630 <__ssputs_r>:
 8003630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	688e      	ldr	r6, [r1, #8]
 8003636:	429e      	cmp	r6, r3
 8003638:	4682      	mov	sl, r0
 800363a:	460c      	mov	r4, r1
 800363c:	4690      	mov	r8, r2
 800363e:	4699      	mov	r9, r3
 8003640:	d837      	bhi.n	80036b2 <__ssputs_r+0x82>
 8003642:	898a      	ldrh	r2, [r1, #12]
 8003644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003648:	d031      	beq.n	80036ae <__ssputs_r+0x7e>
 800364a:	6825      	ldr	r5, [r4, #0]
 800364c:	6909      	ldr	r1, [r1, #16]
 800364e:	1a6f      	subs	r7, r5, r1
 8003650:	6965      	ldr	r5, [r4, #20]
 8003652:	2302      	movs	r3, #2
 8003654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003658:	fb95 f5f3 	sdiv	r5, r5, r3
 800365c:	f109 0301 	add.w	r3, r9, #1
 8003660:	443b      	add	r3, r7
 8003662:	429d      	cmp	r5, r3
 8003664:	bf38      	it	cc
 8003666:	461d      	movcc	r5, r3
 8003668:	0553      	lsls	r3, r2, #21
 800366a:	d530      	bpl.n	80036ce <__ssputs_r+0x9e>
 800366c:	4629      	mov	r1, r5
 800366e:	f000 fb2b 	bl	8003cc8 <_malloc_r>
 8003672:	4606      	mov	r6, r0
 8003674:	b950      	cbnz	r0, 800368c <__ssputs_r+0x5c>
 8003676:	230c      	movs	r3, #12
 8003678:	f8ca 3000 	str.w	r3, [sl]
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368c:	463a      	mov	r2, r7
 800368e:	6921      	ldr	r1, [r4, #16]
 8003690:	f000 faa8 	bl	8003be4 <memcpy>
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800369a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369e:	81a3      	strh	r3, [r4, #12]
 80036a0:	6126      	str	r6, [r4, #16]
 80036a2:	6165      	str	r5, [r4, #20]
 80036a4:	443e      	add	r6, r7
 80036a6:	1bed      	subs	r5, r5, r7
 80036a8:	6026      	str	r6, [r4, #0]
 80036aa:	60a5      	str	r5, [r4, #8]
 80036ac:	464e      	mov	r6, r9
 80036ae:	454e      	cmp	r6, r9
 80036b0:	d900      	bls.n	80036b4 <__ssputs_r+0x84>
 80036b2:	464e      	mov	r6, r9
 80036b4:	4632      	mov	r2, r6
 80036b6:	4641      	mov	r1, r8
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	f000 fa9e 	bl	8003bfa <memmove>
 80036be:	68a3      	ldr	r3, [r4, #8]
 80036c0:	1b9b      	subs	r3, r3, r6
 80036c2:	60a3      	str	r3, [r4, #8]
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	441e      	add	r6, r3
 80036c8:	6026      	str	r6, [r4, #0]
 80036ca:	2000      	movs	r0, #0
 80036cc:	e7dc      	b.n	8003688 <__ssputs_r+0x58>
 80036ce:	462a      	mov	r2, r5
 80036d0:	f000 fb54 	bl	8003d7c <_realloc_r>
 80036d4:	4606      	mov	r6, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d1e2      	bne.n	80036a0 <__ssputs_r+0x70>
 80036da:	6921      	ldr	r1, [r4, #16]
 80036dc:	4650      	mov	r0, sl
 80036de:	f000 faa5 	bl	8003c2c <_free_r>
 80036e2:	e7c8      	b.n	8003676 <__ssputs_r+0x46>

080036e4 <_svfiprintf_r>:
 80036e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e8:	461d      	mov	r5, r3
 80036ea:	898b      	ldrh	r3, [r1, #12]
 80036ec:	061f      	lsls	r7, r3, #24
 80036ee:	b09d      	sub	sp, #116	; 0x74
 80036f0:	4680      	mov	r8, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	4616      	mov	r6, r2
 80036f6:	d50f      	bpl.n	8003718 <_svfiprintf_r+0x34>
 80036f8:	690b      	ldr	r3, [r1, #16]
 80036fa:	b96b      	cbnz	r3, 8003718 <_svfiprintf_r+0x34>
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	f000 fae3 	bl	8003cc8 <_malloc_r>
 8003702:	6020      	str	r0, [r4, #0]
 8003704:	6120      	str	r0, [r4, #16]
 8003706:	b928      	cbnz	r0, 8003714 <_svfiprintf_r+0x30>
 8003708:	230c      	movs	r3, #12
 800370a:	f8c8 3000 	str.w	r3, [r8]
 800370e:	f04f 30ff 	mov.w	r0, #4294967295
 8003712:	e0c8      	b.n	80038a6 <_svfiprintf_r+0x1c2>
 8003714:	2340      	movs	r3, #64	; 0x40
 8003716:	6163      	str	r3, [r4, #20]
 8003718:	2300      	movs	r3, #0
 800371a:	9309      	str	r3, [sp, #36]	; 0x24
 800371c:	2320      	movs	r3, #32
 800371e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003722:	2330      	movs	r3, #48	; 0x30
 8003724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003728:	9503      	str	r5, [sp, #12]
 800372a:	f04f 0b01 	mov.w	fp, #1
 800372e:	4637      	mov	r7, r6
 8003730:	463d      	mov	r5, r7
 8003732:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003736:	b10b      	cbz	r3, 800373c <_svfiprintf_r+0x58>
 8003738:	2b25      	cmp	r3, #37	; 0x25
 800373a:	d13e      	bne.n	80037ba <_svfiprintf_r+0xd6>
 800373c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003740:	d00b      	beq.n	800375a <_svfiprintf_r+0x76>
 8003742:	4653      	mov	r3, sl
 8003744:	4632      	mov	r2, r6
 8003746:	4621      	mov	r1, r4
 8003748:	4640      	mov	r0, r8
 800374a:	f7ff ff71 	bl	8003630 <__ssputs_r>
 800374e:	3001      	adds	r0, #1
 8003750:	f000 80a4 	beq.w	800389c <_svfiprintf_r+0x1b8>
 8003754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003756:	4453      	add	r3, sl
 8003758:	9309      	str	r3, [sp, #36]	; 0x24
 800375a:	783b      	ldrb	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 809d 	beq.w	800389c <_svfiprintf_r+0x1b8>
 8003762:	2300      	movs	r3, #0
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	9307      	str	r3, [sp, #28]
 8003770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003774:	931a      	str	r3, [sp, #104]	; 0x68
 8003776:	462f      	mov	r7, r5
 8003778:	2205      	movs	r2, #5
 800377a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800377e:	4850      	ldr	r0, [pc, #320]	; (80038c0 <_svfiprintf_r+0x1dc>)
 8003780:	f7fc fd36 	bl	80001f0 <memchr>
 8003784:	9b04      	ldr	r3, [sp, #16]
 8003786:	b9d0      	cbnz	r0, 80037be <_svfiprintf_r+0xda>
 8003788:	06d9      	lsls	r1, r3, #27
 800378a:	bf44      	itt	mi
 800378c:	2220      	movmi	r2, #32
 800378e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003792:	071a      	lsls	r2, r3, #28
 8003794:	bf44      	itt	mi
 8003796:	222b      	movmi	r2, #43	; 0x2b
 8003798:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800379c:	782a      	ldrb	r2, [r5, #0]
 800379e:	2a2a      	cmp	r2, #42	; 0x2a
 80037a0:	d015      	beq.n	80037ce <_svfiprintf_r+0xea>
 80037a2:	9a07      	ldr	r2, [sp, #28]
 80037a4:	462f      	mov	r7, r5
 80037a6:	2000      	movs	r0, #0
 80037a8:	250a      	movs	r5, #10
 80037aa:	4639      	mov	r1, r7
 80037ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b0:	3b30      	subs	r3, #48	; 0x30
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d94d      	bls.n	8003852 <_svfiprintf_r+0x16e>
 80037b6:	b1b8      	cbz	r0, 80037e8 <_svfiprintf_r+0x104>
 80037b8:	e00f      	b.n	80037da <_svfiprintf_r+0xf6>
 80037ba:	462f      	mov	r7, r5
 80037bc:	e7b8      	b.n	8003730 <_svfiprintf_r+0x4c>
 80037be:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <_svfiprintf_r+0x1dc>)
 80037c0:	1a80      	subs	r0, r0, r2
 80037c2:	fa0b f000 	lsl.w	r0, fp, r0
 80037c6:	4318      	orrs	r0, r3
 80037c8:	9004      	str	r0, [sp, #16]
 80037ca:	463d      	mov	r5, r7
 80037cc:	e7d3      	b.n	8003776 <_svfiprintf_r+0x92>
 80037ce:	9a03      	ldr	r2, [sp, #12]
 80037d0:	1d11      	adds	r1, r2, #4
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	9103      	str	r1, [sp, #12]
 80037d6:	2a00      	cmp	r2, #0
 80037d8:	db01      	blt.n	80037de <_svfiprintf_r+0xfa>
 80037da:	9207      	str	r2, [sp, #28]
 80037dc:	e004      	b.n	80037e8 <_svfiprintf_r+0x104>
 80037de:	4252      	negs	r2, r2
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	9207      	str	r2, [sp, #28]
 80037e6:	9304      	str	r3, [sp, #16]
 80037e8:	783b      	ldrb	r3, [r7, #0]
 80037ea:	2b2e      	cmp	r3, #46	; 0x2e
 80037ec:	d10c      	bne.n	8003808 <_svfiprintf_r+0x124>
 80037ee:	787b      	ldrb	r3, [r7, #1]
 80037f0:	2b2a      	cmp	r3, #42	; 0x2a
 80037f2:	d133      	bne.n	800385c <_svfiprintf_r+0x178>
 80037f4:	9b03      	ldr	r3, [sp, #12]
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	9203      	str	r2, [sp, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bfb8      	it	lt
 8003800:	f04f 33ff 	movlt.w	r3, #4294967295
 8003804:	3702      	adds	r7, #2
 8003806:	9305      	str	r3, [sp, #20]
 8003808:	4d2e      	ldr	r5, [pc, #184]	; (80038c4 <_svfiprintf_r+0x1e0>)
 800380a:	7839      	ldrb	r1, [r7, #0]
 800380c:	2203      	movs	r2, #3
 800380e:	4628      	mov	r0, r5
 8003810:	f7fc fcee 	bl	80001f0 <memchr>
 8003814:	b138      	cbz	r0, 8003826 <_svfiprintf_r+0x142>
 8003816:	2340      	movs	r3, #64	; 0x40
 8003818:	1b40      	subs	r0, r0, r5
 800381a:	fa03 f000 	lsl.w	r0, r3, r0
 800381e:	9b04      	ldr	r3, [sp, #16]
 8003820:	4303      	orrs	r3, r0
 8003822:	3701      	adds	r7, #1
 8003824:	9304      	str	r3, [sp, #16]
 8003826:	7839      	ldrb	r1, [r7, #0]
 8003828:	4827      	ldr	r0, [pc, #156]	; (80038c8 <_svfiprintf_r+0x1e4>)
 800382a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800382e:	2206      	movs	r2, #6
 8003830:	1c7e      	adds	r6, r7, #1
 8003832:	f7fc fcdd 	bl	80001f0 <memchr>
 8003836:	2800      	cmp	r0, #0
 8003838:	d038      	beq.n	80038ac <_svfiprintf_r+0x1c8>
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <_svfiprintf_r+0x1e8>)
 800383c:	bb13      	cbnz	r3, 8003884 <_svfiprintf_r+0x1a0>
 800383e:	9b03      	ldr	r3, [sp, #12]
 8003840:	3307      	adds	r3, #7
 8003842:	f023 0307 	bic.w	r3, r3, #7
 8003846:	3308      	adds	r3, #8
 8003848:	9303      	str	r3, [sp, #12]
 800384a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800384c:	444b      	add	r3, r9
 800384e:	9309      	str	r3, [sp, #36]	; 0x24
 8003850:	e76d      	b.n	800372e <_svfiprintf_r+0x4a>
 8003852:	fb05 3202 	mla	r2, r5, r2, r3
 8003856:	2001      	movs	r0, #1
 8003858:	460f      	mov	r7, r1
 800385a:	e7a6      	b.n	80037aa <_svfiprintf_r+0xc6>
 800385c:	2300      	movs	r3, #0
 800385e:	3701      	adds	r7, #1
 8003860:	9305      	str	r3, [sp, #20]
 8003862:	4619      	mov	r1, r3
 8003864:	250a      	movs	r5, #10
 8003866:	4638      	mov	r0, r7
 8003868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800386c:	3a30      	subs	r2, #48	; 0x30
 800386e:	2a09      	cmp	r2, #9
 8003870:	d903      	bls.n	800387a <_svfiprintf_r+0x196>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0c8      	beq.n	8003808 <_svfiprintf_r+0x124>
 8003876:	9105      	str	r1, [sp, #20]
 8003878:	e7c6      	b.n	8003808 <_svfiprintf_r+0x124>
 800387a:	fb05 2101 	mla	r1, r5, r1, r2
 800387e:	2301      	movs	r3, #1
 8003880:	4607      	mov	r7, r0
 8003882:	e7f0      	b.n	8003866 <_svfiprintf_r+0x182>
 8003884:	ab03      	add	r3, sp, #12
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4622      	mov	r2, r4
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <_svfiprintf_r+0x1ec>)
 800388c:	a904      	add	r1, sp, #16
 800388e:	4640      	mov	r0, r8
 8003890:	f3af 8000 	nop.w
 8003894:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003898:	4681      	mov	r9, r0
 800389a:	d1d6      	bne.n	800384a <_svfiprintf_r+0x166>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	065b      	lsls	r3, r3, #25
 80038a0:	f53f af35 	bmi.w	800370e <_svfiprintf_r+0x2a>
 80038a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038a6:	b01d      	add	sp, #116	; 0x74
 80038a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ac:	ab03      	add	r3, sp, #12
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4622      	mov	r2, r4
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <_svfiprintf_r+0x1ec>)
 80038b4:	a904      	add	r1, sp, #16
 80038b6:	4640      	mov	r0, r8
 80038b8:	f000 f882 	bl	80039c0 <_printf_i>
 80038bc:	e7ea      	b.n	8003894 <_svfiprintf_r+0x1b0>
 80038be:	bf00      	nop
 80038c0:	08003e34 	.word	0x08003e34
 80038c4:	08003e3a 	.word	0x08003e3a
 80038c8:	08003e3e 	.word	0x08003e3e
 80038cc:	00000000 	.word	0x00000000
 80038d0:	08003631 	.word	0x08003631

080038d4 <_printf_common>:
 80038d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d8:	4691      	mov	r9, r2
 80038da:	461f      	mov	r7, r3
 80038dc:	688a      	ldr	r2, [r1, #8]
 80038de:	690b      	ldr	r3, [r1, #16]
 80038e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bfb8      	it	lt
 80038e8:	4613      	movlt	r3, r2
 80038ea:	f8c9 3000 	str.w	r3, [r9]
 80038ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f2:	4606      	mov	r6, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	b112      	cbz	r2, 80038fe <_printf_common+0x2a>
 80038f8:	3301      	adds	r3, #1
 80038fa:	f8c9 3000 	str.w	r3, [r9]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	0699      	lsls	r1, r3, #26
 8003902:	bf42      	ittt	mi
 8003904:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003908:	3302      	addmi	r3, #2
 800390a:	f8c9 3000 	strmi.w	r3, [r9]
 800390e:	6825      	ldr	r5, [r4, #0]
 8003910:	f015 0506 	ands.w	r5, r5, #6
 8003914:	d107      	bne.n	8003926 <_printf_common+0x52>
 8003916:	f104 0a19 	add.w	sl, r4, #25
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	f8d9 2000 	ldr.w	r2, [r9]
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	42ab      	cmp	r3, r5
 8003924:	dc28      	bgt.n	8003978 <_printf_common+0xa4>
 8003926:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	3300      	adds	r3, #0
 800392e:	bf18      	it	ne
 8003930:	2301      	movne	r3, #1
 8003932:	0692      	lsls	r2, r2, #26
 8003934:	d42d      	bmi.n	8003992 <_printf_common+0xbe>
 8003936:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800393a:	4639      	mov	r1, r7
 800393c:	4630      	mov	r0, r6
 800393e:	47c0      	blx	r8
 8003940:	3001      	adds	r0, #1
 8003942:	d020      	beq.n	8003986 <_printf_common+0xb2>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	68e5      	ldr	r5, [r4, #12]
 8003948:	f8d9 2000 	ldr.w	r2, [r9]
 800394c:	f003 0306 	and.w	r3, r3, #6
 8003950:	2b04      	cmp	r3, #4
 8003952:	bf08      	it	eq
 8003954:	1aad      	subeq	r5, r5, r2
 8003956:	68a3      	ldr	r3, [r4, #8]
 8003958:	6922      	ldr	r2, [r4, #16]
 800395a:	bf0c      	ite	eq
 800395c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003960:	2500      	movne	r5, #0
 8003962:	4293      	cmp	r3, r2
 8003964:	bfc4      	itt	gt
 8003966:	1a9b      	subgt	r3, r3, r2
 8003968:	18ed      	addgt	r5, r5, r3
 800396a:	f04f 0900 	mov.w	r9, #0
 800396e:	341a      	adds	r4, #26
 8003970:	454d      	cmp	r5, r9
 8003972:	d11a      	bne.n	80039aa <_printf_common+0xd6>
 8003974:	2000      	movs	r0, #0
 8003976:	e008      	b.n	800398a <_printf_common+0xb6>
 8003978:	2301      	movs	r3, #1
 800397a:	4652      	mov	r2, sl
 800397c:	4639      	mov	r1, r7
 800397e:	4630      	mov	r0, r6
 8003980:	47c0      	blx	r8
 8003982:	3001      	adds	r0, #1
 8003984:	d103      	bne.n	800398e <_printf_common+0xba>
 8003986:	f04f 30ff 	mov.w	r0, #4294967295
 800398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398e:	3501      	adds	r5, #1
 8003990:	e7c3      	b.n	800391a <_printf_common+0x46>
 8003992:	18e1      	adds	r1, r4, r3
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	2030      	movs	r0, #48	; 0x30
 8003998:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800399c:	4422      	add	r2, r4
 800399e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a6:	3302      	adds	r3, #2
 80039a8:	e7c5      	b.n	8003936 <_printf_common+0x62>
 80039aa:	2301      	movs	r3, #1
 80039ac:	4622      	mov	r2, r4
 80039ae:	4639      	mov	r1, r7
 80039b0:	4630      	mov	r0, r6
 80039b2:	47c0      	blx	r8
 80039b4:	3001      	adds	r0, #1
 80039b6:	d0e6      	beq.n	8003986 <_printf_common+0xb2>
 80039b8:	f109 0901 	add.w	r9, r9, #1
 80039bc:	e7d8      	b.n	8003970 <_printf_common+0x9c>
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
	...

<<<<<<< HEAD
080032c8 <_printf_i>:
 80032c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80032d0:	460c      	mov	r4, r1
 80032d2:	7e09      	ldrb	r1, [r1, #24]
 80032d4:	b085      	sub	sp, #20
 80032d6:	296e      	cmp	r1, #110	; 0x6e
 80032d8:	4617      	mov	r7, r2
 80032da:	4606      	mov	r6, r0
 80032dc:	4698      	mov	r8, r3
 80032de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032e0:	f000 80b3 	beq.w	800344a <_printf_i+0x182>
 80032e4:	d822      	bhi.n	800332c <_printf_i+0x64>
 80032e6:	2963      	cmp	r1, #99	; 0x63
 80032e8:	d036      	beq.n	8003358 <_printf_i+0x90>
 80032ea:	d80a      	bhi.n	8003302 <_printf_i+0x3a>
 80032ec:	2900      	cmp	r1, #0
 80032ee:	f000 80b9 	beq.w	8003464 <_printf_i+0x19c>
 80032f2:	2958      	cmp	r1, #88	; 0x58
 80032f4:	f000 8083 	beq.w	80033fe <_printf_i+0x136>
 80032f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003300:	e032      	b.n	8003368 <_printf_i+0xa0>
 8003302:	2964      	cmp	r1, #100	; 0x64
 8003304:	d001      	beq.n	800330a <_printf_i+0x42>
 8003306:	2969      	cmp	r1, #105	; 0x69
 8003308:	d1f6      	bne.n	80032f8 <_printf_i+0x30>
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	0605      	lsls	r5, r0, #24
 8003310:	f103 0104 	add.w	r1, r3, #4
 8003314:	d52a      	bpl.n	800336c <_printf_i+0xa4>
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da03      	bge.n	8003326 <_printf_i+0x5e>
 800331e:	222d      	movs	r2, #45	; 0x2d
 8003320:	425b      	negs	r3, r3
 8003322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003326:	486f      	ldr	r0, [pc, #444]	; (80034e4 <_printf_i+0x21c>)
 8003328:	220a      	movs	r2, #10
 800332a:	e039      	b.n	80033a0 <_printf_i+0xd8>
 800332c:	2973      	cmp	r1, #115	; 0x73
 800332e:	f000 809d 	beq.w	800346c <_printf_i+0x1a4>
 8003332:	d808      	bhi.n	8003346 <_printf_i+0x7e>
 8003334:	296f      	cmp	r1, #111	; 0x6f
 8003336:	d020      	beq.n	800337a <_printf_i+0xb2>
 8003338:	2970      	cmp	r1, #112	; 0x70
 800333a:	d1dd      	bne.n	80032f8 <_printf_i+0x30>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	f043 0320 	orr.w	r3, r3, #32
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	e003      	b.n	800334e <_printf_i+0x86>
 8003346:	2975      	cmp	r1, #117	; 0x75
 8003348:	d017      	beq.n	800337a <_printf_i+0xb2>
 800334a:	2978      	cmp	r1, #120	; 0x78
 800334c:	d1d4      	bne.n	80032f8 <_printf_i+0x30>
 800334e:	2378      	movs	r3, #120	; 0x78
 8003350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003354:	4864      	ldr	r0, [pc, #400]	; (80034e8 <_printf_i+0x220>)
 8003356:	e055      	b.n	8003404 <_printf_i+0x13c>
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	1d19      	adds	r1, r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6011      	str	r1, [r2, #0]
 8003360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003368:	2301      	movs	r3, #1
 800336a:	e08c      	b.n	8003486 <_printf_i+0x1be>
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6011      	str	r1, [r2, #0]
 8003370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003374:	bf18      	it	ne
 8003376:	b21b      	sxthne	r3, r3
 8003378:	e7cf      	b.n	800331a <_printf_i+0x52>
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	6825      	ldr	r5, [r4, #0]
 800337e:	1d18      	adds	r0, r3, #4
 8003380:	6010      	str	r0, [r2, #0]
 8003382:	0628      	lsls	r0, r5, #24
 8003384:	d501      	bpl.n	800338a <_printf_i+0xc2>
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	e002      	b.n	8003390 <_printf_i+0xc8>
 800338a:	0668      	lsls	r0, r5, #25
 800338c:	d5fb      	bpl.n	8003386 <_printf_i+0xbe>
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	4854      	ldr	r0, [pc, #336]	; (80034e4 <_printf_i+0x21c>)
 8003392:	296f      	cmp	r1, #111	; 0x6f
 8003394:	bf14      	ite	ne
 8003396:	220a      	movne	r2, #10
 8003398:	2208      	moveq	r2, #8
 800339a:	2100      	movs	r1, #0
 800339c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033a0:	6865      	ldr	r5, [r4, #4]
 80033a2:	60a5      	str	r5, [r4, #8]
 80033a4:	2d00      	cmp	r5, #0
 80033a6:	f2c0 8095 	blt.w	80034d4 <_printf_i+0x20c>
 80033aa:	6821      	ldr	r1, [r4, #0]
 80033ac:	f021 0104 	bic.w	r1, r1, #4
 80033b0:	6021      	str	r1, [r4, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d13d      	bne.n	8003432 <_printf_i+0x16a>
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	f040 808e 	bne.w	80034d8 <_printf_i+0x210>
 80033bc:	4665      	mov	r5, ip
 80033be:	2a08      	cmp	r2, #8
 80033c0:	d10b      	bne.n	80033da <_printf_i+0x112>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	07db      	lsls	r3, r3, #31
 80033c6:	d508      	bpl.n	80033da <_printf_i+0x112>
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	6862      	ldr	r2, [r4, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	bfde      	ittt	le
 80033d0:	2330      	movle	r3, #48	; 0x30
 80033d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033da:	ebac 0305 	sub.w	r3, ip, r5
 80033de:	6123      	str	r3, [r4, #16]
 80033e0:	f8cd 8000 	str.w	r8, [sp]
 80033e4:	463b      	mov	r3, r7
 80033e6:	aa03      	add	r2, sp, #12
 80033e8:	4621      	mov	r1, r4
 80033ea:	4630      	mov	r0, r6
 80033ec:	f7ff fef6 	bl	80031dc <_printf_common>
 80033f0:	3001      	adds	r0, #1
 80033f2:	d14d      	bne.n	8003490 <_printf_i+0x1c8>
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	b005      	add	sp, #20
 80033fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033fe:	4839      	ldr	r0, [pc, #228]	; (80034e4 <_printf_i+0x21c>)
 8003400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	6821      	ldr	r1, [r4, #0]
 8003408:	1d1d      	adds	r5, r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6015      	str	r5, [r2, #0]
 800340e:	060a      	lsls	r2, r1, #24
 8003410:	d50b      	bpl.n	800342a <_printf_i+0x162>
 8003412:	07ca      	lsls	r2, r1, #31
 8003414:	bf44      	itt	mi
 8003416:	f041 0120 	orrmi.w	r1, r1, #32
 800341a:	6021      	strmi	r1, [r4, #0]
 800341c:	b91b      	cbnz	r3, 8003426 <_printf_i+0x15e>
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	f022 0220 	bic.w	r2, r2, #32
 8003424:	6022      	str	r2, [r4, #0]
 8003426:	2210      	movs	r2, #16
 8003428:	e7b7      	b.n	800339a <_printf_i+0xd2>
 800342a:	064d      	lsls	r5, r1, #25
 800342c:	bf48      	it	mi
 800342e:	b29b      	uxthmi	r3, r3
 8003430:	e7ef      	b.n	8003412 <_printf_i+0x14a>
 8003432:	4665      	mov	r5, ip
 8003434:	fbb3 f1f2 	udiv	r1, r3, r2
 8003438:	fb02 3311 	mls	r3, r2, r1, r3
 800343c:	5cc3      	ldrb	r3, [r0, r3]
 800343e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003442:	460b      	mov	r3, r1
 8003444:	2900      	cmp	r1, #0
 8003446:	d1f5      	bne.n	8003434 <_printf_i+0x16c>
 8003448:	e7b9      	b.n	80033be <_printf_i+0xf6>
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	6825      	ldr	r5, [r4, #0]
 800344e:	6961      	ldr	r1, [r4, #20]
 8003450:	1d18      	adds	r0, r3, #4
 8003452:	6010      	str	r0, [r2, #0]
 8003454:	0628      	lsls	r0, r5, #24
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	d501      	bpl.n	800345e <_printf_i+0x196>
 800345a:	6019      	str	r1, [r3, #0]
 800345c:	e002      	b.n	8003464 <_printf_i+0x19c>
 800345e:	066a      	lsls	r2, r5, #25
 8003460:	d5fb      	bpl.n	800345a <_printf_i+0x192>
 8003462:	8019      	strh	r1, [r3, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	6123      	str	r3, [r4, #16]
 8003468:	4665      	mov	r5, ip
 800346a:	e7b9      	b.n	80033e0 <_printf_i+0x118>
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	1d19      	adds	r1, r3, #4
 8003470:	6011      	str	r1, [r2, #0]
 8003472:	681d      	ldr	r5, [r3, #0]
 8003474:	6862      	ldr	r2, [r4, #4]
 8003476:	2100      	movs	r1, #0
 8003478:	4628      	mov	r0, r5
 800347a:	f7fc feb9 	bl	80001f0 <memchr>
 800347e:	b108      	cbz	r0, 8003484 <_printf_i+0x1bc>
 8003480:	1b40      	subs	r0, r0, r5
 8003482:	6060      	str	r0, [r4, #4]
 8003484:	6863      	ldr	r3, [r4, #4]
 8003486:	6123      	str	r3, [r4, #16]
 8003488:	2300      	movs	r3, #0
 800348a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800348e:	e7a7      	b.n	80033e0 <_printf_i+0x118>
 8003490:	6923      	ldr	r3, [r4, #16]
 8003492:	462a      	mov	r2, r5
 8003494:	4639      	mov	r1, r7
 8003496:	4630      	mov	r0, r6
 8003498:	47c0      	blx	r8
 800349a:	3001      	adds	r0, #1
 800349c:	d0aa      	beq.n	80033f4 <_printf_i+0x12c>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	079b      	lsls	r3, r3, #30
 80034a2:	d413      	bmi.n	80034cc <_printf_i+0x204>
 80034a4:	68e0      	ldr	r0, [r4, #12]
 80034a6:	9b03      	ldr	r3, [sp, #12]
 80034a8:	4298      	cmp	r0, r3
 80034aa:	bfb8      	it	lt
 80034ac:	4618      	movlt	r0, r3
 80034ae:	e7a3      	b.n	80033f8 <_printf_i+0x130>
 80034b0:	2301      	movs	r3, #1
 80034b2:	464a      	mov	r2, r9
 80034b4:	4639      	mov	r1, r7
 80034b6:	4630      	mov	r0, r6
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d09a      	beq.n	80033f4 <_printf_i+0x12c>
 80034be:	3501      	adds	r5, #1
 80034c0:	68e3      	ldr	r3, [r4, #12]
 80034c2:	9a03      	ldr	r2, [sp, #12]
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	42ab      	cmp	r3, r5
 80034c8:	dcf2      	bgt.n	80034b0 <_printf_i+0x1e8>
 80034ca:	e7eb      	b.n	80034a4 <_printf_i+0x1dc>
 80034cc:	2500      	movs	r5, #0
 80034ce:	f104 0919 	add.w	r9, r4, #25
 80034d2:	e7f5      	b.n	80034c0 <_printf_i+0x1f8>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ac      	bne.n	8003432 <_printf_i+0x16a>
 80034d8:	7803      	ldrb	r3, [r0, #0]
 80034da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e2:	e76c      	b.n	80033be <_printf_i+0xf6>
 80034e4:	0800374d 	.word	0x0800374d
 80034e8:	0800375e 	.word	0x0800375e

080034ec <memcpy>:
 80034ec:	b510      	push	{r4, lr}
 80034ee:	1e43      	subs	r3, r0, #1
 80034f0:	440a      	add	r2, r1
 80034f2:	4291      	cmp	r1, r2
 80034f4:	d100      	bne.n	80034f8 <memcpy+0xc>
 80034f6:	bd10      	pop	{r4, pc}
 80034f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003500:	e7f7      	b.n	80034f2 <memcpy+0x6>

08003502 <memmove>:
 8003502:	4288      	cmp	r0, r1
 8003504:	b510      	push	{r4, lr}
 8003506:	eb01 0302 	add.w	r3, r1, r2
 800350a:	d807      	bhi.n	800351c <memmove+0x1a>
 800350c:	1e42      	subs	r2, r0, #1
 800350e:	4299      	cmp	r1, r3
 8003510:	d00a      	beq.n	8003528 <memmove+0x26>
 8003512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003516:	f802 4f01 	strb.w	r4, [r2, #1]!
 800351a:	e7f8      	b.n	800350e <memmove+0xc>
 800351c:	4283      	cmp	r3, r0
 800351e:	d9f5      	bls.n	800350c <memmove+0xa>
 8003520:	1881      	adds	r1, r0, r2
 8003522:	1ad2      	subs	r2, r2, r3
 8003524:	42d3      	cmn	r3, r2
 8003526:	d100      	bne.n	800352a <memmove+0x28>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800352e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003532:	e7f7      	b.n	8003524 <memmove+0x22>

08003534 <_free_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4605      	mov	r5, r0
 8003538:	2900      	cmp	r1, #0
 800353a:	d045      	beq.n	80035c8 <_free_r+0x94>
 800353c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003540:	1f0c      	subs	r4, r1, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	bfb8      	it	lt
 8003546:	18e4      	addlt	r4, r4, r3
 8003548:	f000 f8d2 	bl	80036f0 <__malloc_lock>
 800354c:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <_free_r+0x98>)
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	4610      	mov	r0, r2
 8003552:	b933      	cbnz	r3, 8003562 <_free_r+0x2e>
 8003554:	6063      	str	r3, [r4, #4]
 8003556:	6014      	str	r4, [r2, #0]
 8003558:	4628      	mov	r0, r5
 800355a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800355e:	f000 b8c8 	b.w	80036f2 <__malloc_unlock>
 8003562:	42a3      	cmp	r3, r4
 8003564:	d90c      	bls.n	8003580 <_free_r+0x4c>
 8003566:	6821      	ldr	r1, [r4, #0]
 8003568:	1862      	adds	r2, r4, r1
 800356a:	4293      	cmp	r3, r2
 800356c:	bf04      	itt	eq
 800356e:	681a      	ldreq	r2, [r3, #0]
 8003570:	685b      	ldreq	r3, [r3, #4]
 8003572:	6063      	str	r3, [r4, #4]
 8003574:	bf04      	itt	eq
 8003576:	1852      	addeq	r2, r2, r1
 8003578:	6022      	streq	r2, [r4, #0]
 800357a:	6004      	str	r4, [r0, #0]
 800357c:	e7ec      	b.n	8003558 <_free_r+0x24>
 800357e:	4613      	mov	r3, r2
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	b10a      	cbz	r2, 8003588 <_free_r+0x54>
 8003584:	42a2      	cmp	r2, r4
 8003586:	d9fa      	bls.n	800357e <_free_r+0x4a>
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	1858      	adds	r0, r3, r1
 800358c:	42a0      	cmp	r0, r4
 800358e:	d10b      	bne.n	80035a8 <_free_r+0x74>
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	4401      	add	r1, r0
 8003594:	1858      	adds	r0, r3, r1
 8003596:	4282      	cmp	r2, r0
 8003598:	6019      	str	r1, [r3, #0]
 800359a:	d1dd      	bne.n	8003558 <_free_r+0x24>
 800359c:	6810      	ldr	r0, [r2, #0]
 800359e:	6852      	ldr	r2, [r2, #4]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	4401      	add	r1, r0
 80035a4:	6019      	str	r1, [r3, #0]
 80035a6:	e7d7      	b.n	8003558 <_free_r+0x24>
 80035a8:	d902      	bls.n	80035b0 <_free_r+0x7c>
 80035aa:	230c      	movs	r3, #12
 80035ac:	602b      	str	r3, [r5, #0]
 80035ae:	e7d3      	b.n	8003558 <_free_r+0x24>
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	1821      	adds	r1, r4, r0
 80035b4:	428a      	cmp	r2, r1
 80035b6:	bf04      	itt	eq
 80035b8:	6811      	ldreq	r1, [r2, #0]
 80035ba:	6852      	ldreq	r2, [r2, #4]
 80035bc:	6062      	str	r2, [r4, #4]
 80035be:	bf04      	itt	eq
 80035c0:	1809      	addeq	r1, r1, r0
 80035c2:	6021      	streq	r1, [r4, #0]
 80035c4:	605c      	str	r4, [r3, #4]
 80035c6:	e7c7      	b.n	8003558 <_free_r+0x24>
 80035c8:	bd38      	pop	{r3, r4, r5, pc}
 80035ca:	bf00      	nop
 80035cc:	20000098 	.word	0x20000098

080035d0 <_malloc_r>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	1ccd      	adds	r5, r1, #3
 80035d4:	f025 0503 	bic.w	r5, r5, #3
 80035d8:	3508      	adds	r5, #8
 80035da:	2d0c      	cmp	r5, #12
 80035dc:	bf38      	it	cc
 80035de:	250c      	movcc	r5, #12
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	4606      	mov	r6, r0
 80035e4:	db01      	blt.n	80035ea <_malloc_r+0x1a>
 80035e6:	42a9      	cmp	r1, r5
 80035e8:	d903      	bls.n	80035f2 <_malloc_r+0x22>
 80035ea:	230c      	movs	r3, #12
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	2000      	movs	r0, #0
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
 80035f2:	f000 f87d 	bl	80036f0 <__malloc_lock>
 80035f6:	4a21      	ldr	r2, [pc, #132]	; (800367c <_malloc_r+0xac>)
 80035f8:	6814      	ldr	r4, [r2, #0]
 80035fa:	4621      	mov	r1, r4
 80035fc:	b991      	cbnz	r1, 8003624 <_malloc_r+0x54>
 80035fe:	4c20      	ldr	r4, [pc, #128]	; (8003680 <_malloc_r+0xb0>)
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	b91b      	cbnz	r3, 800360c <_malloc_r+0x3c>
 8003604:	4630      	mov	r0, r6
 8003606:	f000 f863 	bl	80036d0 <_sbrk_r>
 800360a:	6020      	str	r0, [r4, #0]
 800360c:	4629      	mov	r1, r5
 800360e:	4630      	mov	r0, r6
 8003610:	f000 f85e 	bl	80036d0 <_sbrk_r>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d124      	bne.n	8003662 <_malloc_r+0x92>
 8003618:	230c      	movs	r3, #12
 800361a:	6033      	str	r3, [r6, #0]
 800361c:	4630      	mov	r0, r6
 800361e:	f000 f868 	bl	80036f2 <__malloc_unlock>
 8003622:	e7e4      	b.n	80035ee <_malloc_r+0x1e>
 8003624:	680b      	ldr	r3, [r1, #0]
 8003626:	1b5b      	subs	r3, r3, r5
 8003628:	d418      	bmi.n	800365c <_malloc_r+0x8c>
 800362a:	2b0b      	cmp	r3, #11
 800362c:	d90f      	bls.n	800364e <_malloc_r+0x7e>
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	50cd      	str	r5, [r1, r3]
 8003632:	18cc      	adds	r4, r1, r3
 8003634:	4630      	mov	r0, r6
 8003636:	f000 f85c 	bl	80036f2 <__malloc_unlock>
 800363a:	f104 000b 	add.w	r0, r4, #11
 800363e:	1d23      	adds	r3, r4, #4
 8003640:	f020 0007 	bic.w	r0, r0, #7
 8003644:	1ac3      	subs	r3, r0, r3
 8003646:	d0d3      	beq.n	80035f0 <_malloc_r+0x20>
 8003648:	425a      	negs	r2, r3
 800364a:	50e2      	str	r2, [r4, r3]
 800364c:	e7d0      	b.n	80035f0 <_malloc_r+0x20>
 800364e:	428c      	cmp	r4, r1
 8003650:	684b      	ldr	r3, [r1, #4]
 8003652:	bf16      	itet	ne
 8003654:	6063      	strne	r3, [r4, #4]
 8003656:	6013      	streq	r3, [r2, #0]
 8003658:	460c      	movne	r4, r1
 800365a:	e7eb      	b.n	8003634 <_malloc_r+0x64>
 800365c:	460c      	mov	r4, r1
 800365e:	6849      	ldr	r1, [r1, #4]
 8003660:	e7cc      	b.n	80035fc <_malloc_r+0x2c>
 8003662:	1cc4      	adds	r4, r0, #3
 8003664:	f024 0403 	bic.w	r4, r4, #3
 8003668:	42a0      	cmp	r0, r4
 800366a:	d005      	beq.n	8003678 <_malloc_r+0xa8>
 800366c:	1a21      	subs	r1, r4, r0
 800366e:	4630      	mov	r0, r6
 8003670:	f000 f82e 	bl	80036d0 <_sbrk_r>
 8003674:	3001      	adds	r0, #1
 8003676:	d0cf      	beq.n	8003618 <_malloc_r+0x48>
 8003678:	6025      	str	r5, [r4, #0]
 800367a:	e7db      	b.n	8003634 <_malloc_r+0x64>
 800367c:	20000098 	.word	0x20000098
 8003680:	2000009c 	.word	0x2000009c

08003684 <_realloc_r>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	4607      	mov	r7, r0
 8003688:	4614      	mov	r4, r2
 800368a:	460e      	mov	r6, r1
 800368c:	b921      	cbnz	r1, 8003698 <_realloc_r+0x14>
 800368e:	4611      	mov	r1, r2
 8003690:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003694:	f7ff bf9c 	b.w	80035d0 <_malloc_r>
 8003698:	b922      	cbnz	r2, 80036a4 <_realloc_r+0x20>
 800369a:	f7ff ff4b 	bl	8003534 <_free_r>
 800369e:	4625      	mov	r5, r4
 80036a0:	4628      	mov	r0, r5
 80036a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a4:	f000 f826 	bl	80036f4 <_malloc_usable_size_r>
 80036a8:	42a0      	cmp	r0, r4
 80036aa:	d20f      	bcs.n	80036cc <_realloc_r+0x48>
 80036ac:	4621      	mov	r1, r4
 80036ae:	4638      	mov	r0, r7
 80036b0:	f7ff ff8e 	bl	80035d0 <_malloc_r>
 80036b4:	4605      	mov	r5, r0
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d0f2      	beq.n	80036a0 <_realloc_r+0x1c>
 80036ba:	4631      	mov	r1, r6
 80036bc:	4622      	mov	r2, r4
 80036be:	f7ff ff15 	bl	80034ec <memcpy>
 80036c2:	4631      	mov	r1, r6
 80036c4:	4638      	mov	r0, r7
 80036c6:	f7ff ff35 	bl	8003534 <_free_r>
 80036ca:	e7e9      	b.n	80036a0 <_realloc_r+0x1c>
 80036cc:	4635      	mov	r5, r6
 80036ce:	e7e7      	b.n	80036a0 <_realloc_r+0x1c>

080036d0 <_sbrk_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4c06      	ldr	r4, [pc, #24]	; (80036ec <_sbrk_r+0x1c>)
 80036d4:	2300      	movs	r3, #0
 80036d6:	4605      	mov	r5, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	f7fd fb64 	bl	8000da8 <_sbrk>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d102      	bne.n	80036ea <_sbrk_r+0x1a>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	b103      	cbz	r3, 80036ea <_sbrk_r+0x1a>
 80036e8:	602b      	str	r3, [r5, #0]
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
 80036ec:	200001ac 	.word	0x200001ac

080036f0 <__malloc_lock>:
 80036f0:	4770      	bx	lr

080036f2 <__malloc_unlock>:
 80036f2:	4770      	bx	lr

080036f4 <_malloc_usable_size_r>:
 80036f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f8:	1f18      	subs	r0, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bfbc      	itt	lt
 80036fe:	580b      	ldrlt	r3, [r1, r0]
 8003700:	18c0      	addlt	r0, r0, r3
 8003702:	4770      	bx	lr

08003704 <_init>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr

08003710 <_fini>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr
||||||| 7f56823
080030a4 <_printf_i>:
 80030a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80030ac:	460c      	mov	r4, r1
 80030ae:	7e09      	ldrb	r1, [r1, #24]
 80030b0:	b085      	sub	sp, #20
 80030b2:	296e      	cmp	r1, #110	; 0x6e
 80030b4:	4617      	mov	r7, r2
 80030b6:	4606      	mov	r6, r0
 80030b8:	4698      	mov	r8, r3
 80030ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030bc:	f000 80b3 	beq.w	8003226 <_printf_i+0x182>
 80030c0:	d822      	bhi.n	8003108 <_printf_i+0x64>
 80030c2:	2963      	cmp	r1, #99	; 0x63
 80030c4:	d036      	beq.n	8003134 <_printf_i+0x90>
 80030c6:	d80a      	bhi.n	80030de <_printf_i+0x3a>
 80030c8:	2900      	cmp	r1, #0
 80030ca:	f000 80b9 	beq.w	8003240 <_printf_i+0x19c>
 80030ce:	2958      	cmp	r1, #88	; 0x58
 80030d0:	f000 8083 	beq.w	80031da <_printf_i+0x136>
 80030d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80030dc:	e032      	b.n	8003144 <_printf_i+0xa0>
 80030de:	2964      	cmp	r1, #100	; 0x64
 80030e0:	d001      	beq.n	80030e6 <_printf_i+0x42>
 80030e2:	2969      	cmp	r1, #105	; 0x69
 80030e4:	d1f6      	bne.n	80030d4 <_printf_i+0x30>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	0605      	lsls	r5, r0, #24
 80030ec:	f103 0104 	add.w	r1, r3, #4
 80030f0:	d52a      	bpl.n	8003148 <_printf_i+0xa4>
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6011      	str	r1, [r2, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	da03      	bge.n	8003102 <_printf_i+0x5e>
 80030fa:	222d      	movs	r2, #45	; 0x2d
 80030fc:	425b      	negs	r3, r3
 80030fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003102:	486f      	ldr	r0, [pc, #444]	; (80032c0 <_printf_i+0x21c>)
 8003104:	220a      	movs	r2, #10
 8003106:	e039      	b.n	800317c <_printf_i+0xd8>
 8003108:	2973      	cmp	r1, #115	; 0x73
 800310a:	f000 809d 	beq.w	8003248 <_printf_i+0x1a4>
 800310e:	d808      	bhi.n	8003122 <_printf_i+0x7e>
 8003110:	296f      	cmp	r1, #111	; 0x6f
 8003112:	d020      	beq.n	8003156 <_printf_i+0xb2>
 8003114:	2970      	cmp	r1, #112	; 0x70
 8003116:	d1dd      	bne.n	80030d4 <_printf_i+0x30>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	f043 0320 	orr.w	r3, r3, #32
 800311e:	6023      	str	r3, [r4, #0]
 8003120:	e003      	b.n	800312a <_printf_i+0x86>
 8003122:	2975      	cmp	r1, #117	; 0x75
 8003124:	d017      	beq.n	8003156 <_printf_i+0xb2>
 8003126:	2978      	cmp	r1, #120	; 0x78
 8003128:	d1d4      	bne.n	80030d4 <_printf_i+0x30>
 800312a:	2378      	movs	r3, #120	; 0x78
 800312c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003130:	4864      	ldr	r0, [pc, #400]	; (80032c4 <_printf_i+0x220>)
 8003132:	e055      	b.n	80031e0 <_printf_i+0x13c>
 8003134:	6813      	ldr	r3, [r2, #0]
 8003136:	1d19      	adds	r1, r3, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6011      	str	r1, [r2, #0]
 800313c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003144:	2301      	movs	r3, #1
 8003146:	e08c      	b.n	8003262 <_printf_i+0x1be>
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6011      	str	r1, [r2, #0]
 800314c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003150:	bf18      	it	ne
 8003152:	b21b      	sxthne	r3, r3
 8003154:	e7cf      	b.n	80030f6 <_printf_i+0x52>
 8003156:	6813      	ldr	r3, [r2, #0]
 8003158:	6825      	ldr	r5, [r4, #0]
 800315a:	1d18      	adds	r0, r3, #4
 800315c:	6010      	str	r0, [r2, #0]
 800315e:	0628      	lsls	r0, r5, #24
 8003160:	d501      	bpl.n	8003166 <_printf_i+0xc2>
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e002      	b.n	800316c <_printf_i+0xc8>
 8003166:	0668      	lsls	r0, r5, #25
 8003168:	d5fb      	bpl.n	8003162 <_printf_i+0xbe>
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	4854      	ldr	r0, [pc, #336]	; (80032c0 <_printf_i+0x21c>)
 800316e:	296f      	cmp	r1, #111	; 0x6f
 8003170:	bf14      	ite	ne
 8003172:	220a      	movne	r2, #10
 8003174:	2208      	moveq	r2, #8
 8003176:	2100      	movs	r1, #0
 8003178:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800317c:	6865      	ldr	r5, [r4, #4]
 800317e:	60a5      	str	r5, [r4, #8]
 8003180:	2d00      	cmp	r5, #0
 8003182:	f2c0 8095 	blt.w	80032b0 <_printf_i+0x20c>
 8003186:	6821      	ldr	r1, [r4, #0]
 8003188:	f021 0104 	bic.w	r1, r1, #4
 800318c:	6021      	str	r1, [r4, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d13d      	bne.n	800320e <_printf_i+0x16a>
 8003192:	2d00      	cmp	r5, #0
 8003194:	f040 808e 	bne.w	80032b4 <_printf_i+0x210>
 8003198:	4665      	mov	r5, ip
 800319a:	2a08      	cmp	r2, #8
 800319c:	d10b      	bne.n	80031b6 <_printf_i+0x112>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	07db      	lsls	r3, r3, #31
 80031a2:	d508      	bpl.n	80031b6 <_printf_i+0x112>
 80031a4:	6923      	ldr	r3, [r4, #16]
 80031a6:	6862      	ldr	r2, [r4, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	bfde      	ittt	le
 80031ac:	2330      	movle	r3, #48	; 0x30
 80031ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031b6:	ebac 0305 	sub.w	r3, ip, r5
 80031ba:	6123      	str	r3, [r4, #16]
 80031bc:	f8cd 8000 	str.w	r8, [sp]
 80031c0:	463b      	mov	r3, r7
 80031c2:	aa03      	add	r2, sp, #12
 80031c4:	4621      	mov	r1, r4
 80031c6:	4630      	mov	r0, r6
 80031c8:	f7ff fef6 	bl	8002fb8 <_printf_common>
 80031cc:	3001      	adds	r0, #1
 80031ce:	d14d      	bne.n	800326c <_printf_i+0x1c8>
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	b005      	add	sp, #20
 80031d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031da:	4839      	ldr	r0, [pc, #228]	; (80032c0 <_printf_i+0x21c>)
 80031dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	6821      	ldr	r1, [r4, #0]
 80031e4:	1d1d      	adds	r5, r3, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6015      	str	r5, [r2, #0]
 80031ea:	060a      	lsls	r2, r1, #24
 80031ec:	d50b      	bpl.n	8003206 <_printf_i+0x162>
 80031ee:	07ca      	lsls	r2, r1, #31
 80031f0:	bf44      	itt	mi
 80031f2:	f041 0120 	orrmi.w	r1, r1, #32
 80031f6:	6021      	strmi	r1, [r4, #0]
 80031f8:	b91b      	cbnz	r3, 8003202 <_printf_i+0x15e>
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	f022 0220 	bic.w	r2, r2, #32
 8003200:	6022      	str	r2, [r4, #0]
 8003202:	2210      	movs	r2, #16
 8003204:	e7b7      	b.n	8003176 <_printf_i+0xd2>
 8003206:	064d      	lsls	r5, r1, #25
 8003208:	bf48      	it	mi
 800320a:	b29b      	uxthmi	r3, r3
 800320c:	e7ef      	b.n	80031ee <_printf_i+0x14a>
 800320e:	4665      	mov	r5, ip
 8003210:	fbb3 f1f2 	udiv	r1, r3, r2
 8003214:	fb02 3311 	mls	r3, r2, r1, r3
 8003218:	5cc3      	ldrb	r3, [r0, r3]
 800321a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800321e:	460b      	mov	r3, r1
 8003220:	2900      	cmp	r1, #0
 8003222:	d1f5      	bne.n	8003210 <_printf_i+0x16c>
 8003224:	e7b9      	b.n	800319a <_printf_i+0xf6>
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	6825      	ldr	r5, [r4, #0]
 800322a:	6961      	ldr	r1, [r4, #20]
 800322c:	1d18      	adds	r0, r3, #4
 800322e:	6010      	str	r0, [r2, #0]
 8003230:	0628      	lsls	r0, r5, #24
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	d501      	bpl.n	800323a <_printf_i+0x196>
 8003236:	6019      	str	r1, [r3, #0]
 8003238:	e002      	b.n	8003240 <_printf_i+0x19c>
 800323a:	066a      	lsls	r2, r5, #25
 800323c:	d5fb      	bpl.n	8003236 <_printf_i+0x192>
 800323e:	8019      	strh	r1, [r3, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	6123      	str	r3, [r4, #16]
 8003244:	4665      	mov	r5, ip
 8003246:	e7b9      	b.n	80031bc <_printf_i+0x118>
 8003248:	6813      	ldr	r3, [r2, #0]
 800324a:	1d19      	adds	r1, r3, #4
 800324c:	6011      	str	r1, [r2, #0]
 800324e:	681d      	ldr	r5, [r3, #0]
 8003250:	6862      	ldr	r2, [r4, #4]
 8003252:	2100      	movs	r1, #0
 8003254:	4628      	mov	r0, r5
 8003256:	f7fc ffcb 	bl	80001f0 <memchr>
 800325a:	b108      	cbz	r0, 8003260 <_printf_i+0x1bc>
 800325c:	1b40      	subs	r0, r0, r5
 800325e:	6060      	str	r0, [r4, #4]
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	6123      	str	r3, [r4, #16]
 8003264:	2300      	movs	r3, #0
 8003266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800326a:	e7a7      	b.n	80031bc <_printf_i+0x118>
 800326c:	6923      	ldr	r3, [r4, #16]
 800326e:	462a      	mov	r2, r5
 8003270:	4639      	mov	r1, r7
 8003272:	4630      	mov	r0, r6
 8003274:	47c0      	blx	r8
 8003276:	3001      	adds	r0, #1
 8003278:	d0aa      	beq.n	80031d0 <_printf_i+0x12c>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	079b      	lsls	r3, r3, #30
 800327e:	d413      	bmi.n	80032a8 <_printf_i+0x204>
 8003280:	68e0      	ldr	r0, [r4, #12]
 8003282:	9b03      	ldr	r3, [sp, #12]
 8003284:	4298      	cmp	r0, r3
 8003286:	bfb8      	it	lt
 8003288:	4618      	movlt	r0, r3
 800328a:	e7a3      	b.n	80031d4 <_printf_i+0x130>
 800328c:	2301      	movs	r3, #1
 800328e:	464a      	mov	r2, r9
 8003290:	4639      	mov	r1, r7
 8003292:	4630      	mov	r0, r6
 8003294:	47c0      	blx	r8
 8003296:	3001      	adds	r0, #1
 8003298:	d09a      	beq.n	80031d0 <_printf_i+0x12c>
 800329a:	3501      	adds	r5, #1
 800329c:	68e3      	ldr	r3, [r4, #12]
 800329e:	9a03      	ldr	r2, [sp, #12]
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	42ab      	cmp	r3, r5
 80032a4:	dcf2      	bgt.n	800328c <_printf_i+0x1e8>
 80032a6:	e7eb      	b.n	8003280 <_printf_i+0x1dc>
 80032a8:	2500      	movs	r5, #0
 80032aa:	f104 0919 	add.w	r9, r4, #25
 80032ae:	e7f5      	b.n	800329c <_printf_i+0x1f8>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ac      	bne.n	800320e <_printf_i+0x16a>
 80032b4:	7803      	ldrb	r3, [r0, #0]
 80032b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032be:	e76c      	b.n	800319a <_printf_i+0xf6>
 80032c0:	08003529 	.word	0x08003529
 80032c4:	0800353a 	.word	0x0800353a

080032c8 <memcpy>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	1e43      	subs	r3, r0, #1
 80032cc:	440a      	add	r2, r1
 80032ce:	4291      	cmp	r1, r2
 80032d0:	d100      	bne.n	80032d4 <memcpy+0xc>
 80032d2:	bd10      	pop	{r4, pc}
 80032d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032dc:	e7f7      	b.n	80032ce <memcpy+0x6>

080032de <memmove>:
 80032de:	4288      	cmp	r0, r1
 80032e0:	b510      	push	{r4, lr}
 80032e2:	eb01 0302 	add.w	r3, r1, r2
 80032e6:	d807      	bhi.n	80032f8 <memmove+0x1a>
 80032e8:	1e42      	subs	r2, r0, #1
 80032ea:	4299      	cmp	r1, r3
 80032ec:	d00a      	beq.n	8003304 <memmove+0x26>
 80032ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80032f6:	e7f8      	b.n	80032ea <memmove+0xc>
 80032f8:	4283      	cmp	r3, r0
 80032fa:	d9f5      	bls.n	80032e8 <memmove+0xa>
 80032fc:	1881      	adds	r1, r0, r2
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	42d3      	cmn	r3, r2
 8003302:	d100      	bne.n	8003306 <memmove+0x28>
 8003304:	bd10      	pop	{r4, pc}
 8003306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800330a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800330e:	e7f7      	b.n	8003300 <memmove+0x22>

08003310 <_free_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4605      	mov	r5, r0
 8003314:	2900      	cmp	r1, #0
 8003316:	d045      	beq.n	80033a4 <_free_r+0x94>
 8003318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800331c:	1f0c      	subs	r4, r1, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfb8      	it	lt
 8003322:	18e4      	addlt	r4, r4, r3
 8003324:	f000 f8d2 	bl	80034cc <__malloc_lock>
 8003328:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <_free_r+0x98>)
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	4610      	mov	r0, r2
 800332e:	b933      	cbnz	r3, 800333e <_free_r+0x2e>
 8003330:	6063      	str	r3, [r4, #4]
 8003332:	6014      	str	r4, [r2, #0]
 8003334:	4628      	mov	r0, r5
 8003336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800333a:	f000 b8c8 	b.w	80034ce <__malloc_unlock>
 800333e:	42a3      	cmp	r3, r4
 8003340:	d90c      	bls.n	800335c <_free_r+0x4c>
 8003342:	6821      	ldr	r1, [r4, #0]
 8003344:	1862      	adds	r2, r4, r1
 8003346:	4293      	cmp	r3, r2
 8003348:	bf04      	itt	eq
 800334a:	681a      	ldreq	r2, [r3, #0]
 800334c:	685b      	ldreq	r3, [r3, #4]
 800334e:	6063      	str	r3, [r4, #4]
 8003350:	bf04      	itt	eq
 8003352:	1852      	addeq	r2, r2, r1
 8003354:	6022      	streq	r2, [r4, #0]
 8003356:	6004      	str	r4, [r0, #0]
 8003358:	e7ec      	b.n	8003334 <_free_r+0x24>
 800335a:	4613      	mov	r3, r2
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	b10a      	cbz	r2, 8003364 <_free_r+0x54>
 8003360:	42a2      	cmp	r2, r4
 8003362:	d9fa      	bls.n	800335a <_free_r+0x4a>
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	1858      	adds	r0, r3, r1
 8003368:	42a0      	cmp	r0, r4
 800336a:	d10b      	bne.n	8003384 <_free_r+0x74>
 800336c:	6820      	ldr	r0, [r4, #0]
 800336e:	4401      	add	r1, r0
 8003370:	1858      	adds	r0, r3, r1
 8003372:	4282      	cmp	r2, r0
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	d1dd      	bne.n	8003334 <_free_r+0x24>
 8003378:	6810      	ldr	r0, [r2, #0]
 800337a:	6852      	ldr	r2, [r2, #4]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	4401      	add	r1, r0
 8003380:	6019      	str	r1, [r3, #0]
 8003382:	e7d7      	b.n	8003334 <_free_r+0x24>
 8003384:	d902      	bls.n	800338c <_free_r+0x7c>
 8003386:	230c      	movs	r3, #12
 8003388:	602b      	str	r3, [r5, #0]
 800338a:	e7d3      	b.n	8003334 <_free_r+0x24>
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	1821      	adds	r1, r4, r0
 8003390:	428a      	cmp	r2, r1
 8003392:	bf04      	itt	eq
 8003394:	6811      	ldreq	r1, [r2, #0]
 8003396:	6852      	ldreq	r2, [r2, #4]
 8003398:	6062      	str	r2, [r4, #4]
 800339a:	bf04      	itt	eq
 800339c:	1809      	addeq	r1, r1, r0
 800339e:	6021      	streq	r1, [r4, #0]
 80033a0:	605c      	str	r4, [r3, #4]
 80033a2:	e7c7      	b.n	8003334 <_free_r+0x24>
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
 80033a6:	bf00      	nop
 80033a8:	20000098 	.word	0x20000098

080033ac <_malloc_r>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	1ccd      	adds	r5, r1, #3
 80033b0:	f025 0503 	bic.w	r5, r5, #3
 80033b4:	3508      	adds	r5, #8
 80033b6:	2d0c      	cmp	r5, #12
 80033b8:	bf38      	it	cc
 80033ba:	250c      	movcc	r5, #12
 80033bc:	2d00      	cmp	r5, #0
 80033be:	4606      	mov	r6, r0
 80033c0:	db01      	blt.n	80033c6 <_malloc_r+0x1a>
 80033c2:	42a9      	cmp	r1, r5
 80033c4:	d903      	bls.n	80033ce <_malloc_r+0x22>
 80033c6:	230c      	movs	r3, #12
 80033c8:	6033      	str	r3, [r6, #0]
 80033ca:	2000      	movs	r0, #0
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	f000 f87d 	bl	80034cc <__malloc_lock>
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <_malloc_r+0xac>)
 80033d4:	6814      	ldr	r4, [r2, #0]
 80033d6:	4621      	mov	r1, r4
 80033d8:	b991      	cbnz	r1, 8003400 <_malloc_r+0x54>
 80033da:	4c20      	ldr	r4, [pc, #128]	; (800345c <_malloc_r+0xb0>)
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	b91b      	cbnz	r3, 80033e8 <_malloc_r+0x3c>
 80033e0:	4630      	mov	r0, r6
 80033e2:	f000 f863 	bl	80034ac <_sbrk_r>
 80033e6:	6020      	str	r0, [r4, #0]
 80033e8:	4629      	mov	r1, r5
 80033ea:	4630      	mov	r0, r6
 80033ec:	f000 f85e 	bl	80034ac <_sbrk_r>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d124      	bne.n	800343e <_malloc_r+0x92>
 80033f4:	230c      	movs	r3, #12
 80033f6:	6033      	str	r3, [r6, #0]
 80033f8:	4630      	mov	r0, r6
 80033fa:	f000 f868 	bl	80034ce <__malloc_unlock>
 80033fe:	e7e4      	b.n	80033ca <_malloc_r+0x1e>
 8003400:	680b      	ldr	r3, [r1, #0]
 8003402:	1b5b      	subs	r3, r3, r5
 8003404:	d418      	bmi.n	8003438 <_malloc_r+0x8c>
 8003406:	2b0b      	cmp	r3, #11
 8003408:	d90f      	bls.n	800342a <_malloc_r+0x7e>
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	50cd      	str	r5, [r1, r3]
 800340e:	18cc      	adds	r4, r1, r3
 8003410:	4630      	mov	r0, r6
 8003412:	f000 f85c 	bl	80034ce <__malloc_unlock>
 8003416:	f104 000b 	add.w	r0, r4, #11
 800341a:	1d23      	adds	r3, r4, #4
 800341c:	f020 0007 	bic.w	r0, r0, #7
 8003420:	1ac3      	subs	r3, r0, r3
 8003422:	d0d3      	beq.n	80033cc <_malloc_r+0x20>
 8003424:	425a      	negs	r2, r3
 8003426:	50e2      	str	r2, [r4, r3]
 8003428:	e7d0      	b.n	80033cc <_malloc_r+0x20>
 800342a:	428c      	cmp	r4, r1
 800342c:	684b      	ldr	r3, [r1, #4]
 800342e:	bf16      	itet	ne
 8003430:	6063      	strne	r3, [r4, #4]
 8003432:	6013      	streq	r3, [r2, #0]
 8003434:	460c      	movne	r4, r1
 8003436:	e7eb      	b.n	8003410 <_malloc_r+0x64>
 8003438:	460c      	mov	r4, r1
 800343a:	6849      	ldr	r1, [r1, #4]
 800343c:	e7cc      	b.n	80033d8 <_malloc_r+0x2c>
 800343e:	1cc4      	adds	r4, r0, #3
 8003440:	f024 0403 	bic.w	r4, r4, #3
 8003444:	42a0      	cmp	r0, r4
 8003446:	d005      	beq.n	8003454 <_malloc_r+0xa8>
 8003448:	1a21      	subs	r1, r4, r0
 800344a:	4630      	mov	r0, r6
 800344c:	f000 f82e 	bl	80034ac <_sbrk_r>
 8003450:	3001      	adds	r0, #1
 8003452:	d0cf      	beq.n	80033f4 <_malloc_r+0x48>
 8003454:	6025      	str	r5, [r4, #0]
 8003456:	e7db      	b.n	8003410 <_malloc_r+0x64>
 8003458:	20000098 	.word	0x20000098
 800345c:	2000009c 	.word	0x2000009c

08003460 <_realloc_r>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	4607      	mov	r7, r0
 8003464:	4614      	mov	r4, r2
 8003466:	460e      	mov	r6, r1
 8003468:	b921      	cbnz	r1, 8003474 <_realloc_r+0x14>
 800346a:	4611      	mov	r1, r2
 800346c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003470:	f7ff bf9c 	b.w	80033ac <_malloc_r>
 8003474:	b922      	cbnz	r2, 8003480 <_realloc_r+0x20>
 8003476:	f7ff ff4b 	bl	8003310 <_free_r>
 800347a:	4625      	mov	r5, r4
 800347c:	4628      	mov	r0, r5
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003480:	f000 f826 	bl	80034d0 <_malloc_usable_size_r>
 8003484:	42a0      	cmp	r0, r4
 8003486:	d20f      	bcs.n	80034a8 <_realloc_r+0x48>
 8003488:	4621      	mov	r1, r4
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff ff8e 	bl	80033ac <_malloc_r>
 8003490:	4605      	mov	r5, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	d0f2      	beq.n	800347c <_realloc_r+0x1c>
 8003496:	4631      	mov	r1, r6
 8003498:	4622      	mov	r2, r4
 800349a:	f7ff ff15 	bl	80032c8 <memcpy>
 800349e:	4631      	mov	r1, r6
 80034a0:	4638      	mov	r0, r7
 80034a2:	f7ff ff35 	bl	8003310 <_free_r>
 80034a6:	e7e9      	b.n	800347c <_realloc_r+0x1c>
 80034a8:	4635      	mov	r5, r6
 80034aa:	e7e7      	b.n	800347c <_realloc_r+0x1c>

080034ac <_sbrk_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4c06      	ldr	r4, [pc, #24]	; (80034c8 <_sbrk_r+0x1c>)
 80034b0:	2300      	movs	r3, #0
 80034b2:	4605      	mov	r5, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	f7fd fb64 	bl	8000b84 <_sbrk>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_sbrk_r+0x1a>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_sbrk_r+0x1a>
 80034c4:	602b      	str	r3, [r5, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	2000012c 	.word	0x2000012c

080034cc <__malloc_lock>:
 80034cc:	4770      	bx	lr

080034ce <__malloc_unlock>:
 80034ce:	4770      	bx	lr

080034d0 <_malloc_usable_size_r>:
 80034d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d4:	1f18      	subs	r0, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bfbc      	itt	lt
 80034da:	580b      	ldrlt	r3, [r1, r0]
 80034dc:	18c0      	addlt	r0, r0, r3
 80034de:	4770      	bx	lr

080034e0 <_init>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	bf00      	nop
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr

080034ec <_fini>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr
=======
080039c0 <_printf_i>:
 80039c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80039c8:	460c      	mov	r4, r1
 80039ca:	7e09      	ldrb	r1, [r1, #24]
 80039cc:	b085      	sub	sp, #20
 80039ce:	296e      	cmp	r1, #110	; 0x6e
 80039d0:	4617      	mov	r7, r2
 80039d2:	4606      	mov	r6, r0
 80039d4:	4698      	mov	r8, r3
 80039d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039d8:	f000 80b3 	beq.w	8003b42 <_printf_i+0x182>
 80039dc:	d822      	bhi.n	8003a24 <_printf_i+0x64>
 80039de:	2963      	cmp	r1, #99	; 0x63
 80039e0:	d036      	beq.n	8003a50 <_printf_i+0x90>
 80039e2:	d80a      	bhi.n	80039fa <_printf_i+0x3a>
 80039e4:	2900      	cmp	r1, #0
 80039e6:	f000 80b9 	beq.w	8003b5c <_printf_i+0x19c>
 80039ea:	2958      	cmp	r1, #88	; 0x58
 80039ec:	f000 8083 	beq.w	8003af6 <_printf_i+0x136>
 80039f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039f8:	e032      	b.n	8003a60 <_printf_i+0xa0>
 80039fa:	2964      	cmp	r1, #100	; 0x64
 80039fc:	d001      	beq.n	8003a02 <_printf_i+0x42>
 80039fe:	2969      	cmp	r1, #105	; 0x69
 8003a00:	d1f6      	bne.n	80039f0 <_printf_i+0x30>
 8003a02:	6820      	ldr	r0, [r4, #0]
 8003a04:	6813      	ldr	r3, [r2, #0]
 8003a06:	0605      	lsls	r5, r0, #24
 8003a08:	f103 0104 	add.w	r1, r3, #4
 8003a0c:	d52a      	bpl.n	8003a64 <_printf_i+0xa4>
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6011      	str	r1, [r2, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da03      	bge.n	8003a1e <_printf_i+0x5e>
 8003a16:	222d      	movs	r2, #45	; 0x2d
 8003a18:	425b      	negs	r3, r3
 8003a1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a1e:	486f      	ldr	r0, [pc, #444]	; (8003bdc <_printf_i+0x21c>)
 8003a20:	220a      	movs	r2, #10
 8003a22:	e039      	b.n	8003a98 <_printf_i+0xd8>
 8003a24:	2973      	cmp	r1, #115	; 0x73
 8003a26:	f000 809d 	beq.w	8003b64 <_printf_i+0x1a4>
 8003a2a:	d808      	bhi.n	8003a3e <_printf_i+0x7e>
 8003a2c:	296f      	cmp	r1, #111	; 0x6f
 8003a2e:	d020      	beq.n	8003a72 <_printf_i+0xb2>
 8003a30:	2970      	cmp	r1, #112	; 0x70
 8003a32:	d1dd      	bne.n	80039f0 <_printf_i+0x30>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	e003      	b.n	8003a46 <_printf_i+0x86>
 8003a3e:	2975      	cmp	r1, #117	; 0x75
 8003a40:	d017      	beq.n	8003a72 <_printf_i+0xb2>
 8003a42:	2978      	cmp	r1, #120	; 0x78
 8003a44:	d1d4      	bne.n	80039f0 <_printf_i+0x30>
 8003a46:	2378      	movs	r3, #120	; 0x78
 8003a48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a4c:	4864      	ldr	r0, [pc, #400]	; (8003be0 <_printf_i+0x220>)
 8003a4e:	e055      	b.n	8003afc <_printf_i+0x13c>
 8003a50:	6813      	ldr	r3, [r2, #0]
 8003a52:	1d19      	adds	r1, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6011      	str	r1, [r2, #0]
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a60:	2301      	movs	r3, #1
 8003a62:	e08c      	b.n	8003b7e <_printf_i+0x1be>
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6011      	str	r1, [r2, #0]
 8003a68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a6c:	bf18      	it	ne
 8003a6e:	b21b      	sxthne	r3, r3
 8003a70:	e7cf      	b.n	8003a12 <_printf_i+0x52>
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	6825      	ldr	r5, [r4, #0]
 8003a76:	1d18      	adds	r0, r3, #4
 8003a78:	6010      	str	r0, [r2, #0]
 8003a7a:	0628      	lsls	r0, r5, #24
 8003a7c:	d501      	bpl.n	8003a82 <_printf_i+0xc2>
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e002      	b.n	8003a88 <_printf_i+0xc8>
 8003a82:	0668      	lsls	r0, r5, #25
 8003a84:	d5fb      	bpl.n	8003a7e <_printf_i+0xbe>
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	4854      	ldr	r0, [pc, #336]	; (8003bdc <_printf_i+0x21c>)
 8003a8a:	296f      	cmp	r1, #111	; 0x6f
 8003a8c:	bf14      	ite	ne
 8003a8e:	220a      	movne	r2, #10
 8003a90:	2208      	moveq	r2, #8
 8003a92:	2100      	movs	r1, #0
 8003a94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a98:	6865      	ldr	r5, [r4, #4]
 8003a9a:	60a5      	str	r5, [r4, #8]
 8003a9c:	2d00      	cmp	r5, #0
 8003a9e:	f2c0 8095 	blt.w	8003bcc <_printf_i+0x20c>
 8003aa2:	6821      	ldr	r1, [r4, #0]
 8003aa4:	f021 0104 	bic.w	r1, r1, #4
 8003aa8:	6021      	str	r1, [r4, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d13d      	bne.n	8003b2a <_printf_i+0x16a>
 8003aae:	2d00      	cmp	r5, #0
 8003ab0:	f040 808e 	bne.w	8003bd0 <_printf_i+0x210>
 8003ab4:	4665      	mov	r5, ip
 8003ab6:	2a08      	cmp	r2, #8
 8003ab8:	d10b      	bne.n	8003ad2 <_printf_i+0x112>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	07db      	lsls	r3, r3, #31
 8003abe:	d508      	bpl.n	8003ad2 <_printf_i+0x112>
 8003ac0:	6923      	ldr	r3, [r4, #16]
 8003ac2:	6862      	ldr	r2, [r4, #4]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bfde      	ittt	le
 8003ac8:	2330      	movle	r3, #48	; 0x30
 8003aca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ace:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ad2:	ebac 0305 	sub.w	r3, ip, r5
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	f8cd 8000 	str.w	r8, [sp]
 8003adc:	463b      	mov	r3, r7
 8003ade:	aa03      	add	r2, sp, #12
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f7ff fef6 	bl	80038d4 <_printf_common>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d14d      	bne.n	8003b88 <_printf_i+0x1c8>
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	b005      	add	sp, #20
 8003af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003af6:	4839      	ldr	r0, [pc, #228]	; (8003bdc <_printf_i+0x21c>)
 8003af8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003afc:	6813      	ldr	r3, [r2, #0]
 8003afe:	6821      	ldr	r1, [r4, #0]
 8003b00:	1d1d      	adds	r5, r3, #4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6015      	str	r5, [r2, #0]
 8003b06:	060a      	lsls	r2, r1, #24
 8003b08:	d50b      	bpl.n	8003b22 <_printf_i+0x162>
 8003b0a:	07ca      	lsls	r2, r1, #31
 8003b0c:	bf44      	itt	mi
 8003b0e:	f041 0120 	orrmi.w	r1, r1, #32
 8003b12:	6021      	strmi	r1, [r4, #0]
 8003b14:	b91b      	cbnz	r3, 8003b1e <_printf_i+0x15e>
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	f022 0220 	bic.w	r2, r2, #32
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	2210      	movs	r2, #16
 8003b20:	e7b7      	b.n	8003a92 <_printf_i+0xd2>
 8003b22:	064d      	lsls	r5, r1, #25
 8003b24:	bf48      	it	mi
 8003b26:	b29b      	uxthmi	r3, r3
 8003b28:	e7ef      	b.n	8003b0a <_printf_i+0x14a>
 8003b2a:	4665      	mov	r5, ip
 8003b2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b30:	fb02 3311 	mls	r3, r2, r1, r3
 8003b34:	5cc3      	ldrb	r3, [r0, r3]
 8003b36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	2900      	cmp	r1, #0
 8003b3e:	d1f5      	bne.n	8003b2c <_printf_i+0x16c>
 8003b40:	e7b9      	b.n	8003ab6 <_printf_i+0xf6>
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	6825      	ldr	r5, [r4, #0]
 8003b46:	6961      	ldr	r1, [r4, #20]
 8003b48:	1d18      	adds	r0, r3, #4
 8003b4a:	6010      	str	r0, [r2, #0]
 8003b4c:	0628      	lsls	r0, r5, #24
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	d501      	bpl.n	8003b56 <_printf_i+0x196>
 8003b52:	6019      	str	r1, [r3, #0]
 8003b54:	e002      	b.n	8003b5c <_printf_i+0x19c>
 8003b56:	066a      	lsls	r2, r5, #25
 8003b58:	d5fb      	bpl.n	8003b52 <_printf_i+0x192>
 8003b5a:	8019      	strh	r1, [r3, #0]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	6123      	str	r3, [r4, #16]
 8003b60:	4665      	mov	r5, ip
 8003b62:	e7b9      	b.n	8003ad8 <_printf_i+0x118>
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	1d19      	adds	r1, r3, #4
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	681d      	ldr	r5, [r3, #0]
 8003b6c:	6862      	ldr	r2, [r4, #4]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4628      	mov	r0, r5
 8003b72:	f7fc fb3d 	bl	80001f0 <memchr>
 8003b76:	b108      	cbz	r0, 8003b7c <_printf_i+0x1bc>
 8003b78:	1b40      	subs	r0, r0, r5
 8003b7a:	6060      	str	r0, [r4, #4]
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	6123      	str	r3, [r4, #16]
 8003b80:	2300      	movs	r3, #0
 8003b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b86:	e7a7      	b.n	8003ad8 <_printf_i+0x118>
 8003b88:	6923      	ldr	r3, [r4, #16]
 8003b8a:	462a      	mov	r2, r5
 8003b8c:	4639      	mov	r1, r7
 8003b8e:	4630      	mov	r0, r6
 8003b90:	47c0      	blx	r8
 8003b92:	3001      	adds	r0, #1
 8003b94:	d0aa      	beq.n	8003aec <_printf_i+0x12c>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	079b      	lsls	r3, r3, #30
 8003b9a:	d413      	bmi.n	8003bc4 <_printf_i+0x204>
 8003b9c:	68e0      	ldr	r0, [r4, #12]
 8003b9e:	9b03      	ldr	r3, [sp, #12]
 8003ba0:	4298      	cmp	r0, r3
 8003ba2:	bfb8      	it	lt
 8003ba4:	4618      	movlt	r0, r3
 8003ba6:	e7a3      	b.n	8003af0 <_printf_i+0x130>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	464a      	mov	r2, r9
 8003bac:	4639      	mov	r1, r7
 8003bae:	4630      	mov	r0, r6
 8003bb0:	47c0      	blx	r8
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d09a      	beq.n	8003aec <_printf_i+0x12c>
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	68e3      	ldr	r3, [r4, #12]
 8003bba:	9a03      	ldr	r2, [sp, #12]
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	42ab      	cmp	r3, r5
 8003bc0:	dcf2      	bgt.n	8003ba8 <_printf_i+0x1e8>
 8003bc2:	e7eb      	b.n	8003b9c <_printf_i+0x1dc>
 8003bc4:	2500      	movs	r5, #0
 8003bc6:	f104 0919 	add.w	r9, r4, #25
 8003bca:	e7f5      	b.n	8003bb8 <_printf_i+0x1f8>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ac      	bne.n	8003b2a <_printf_i+0x16a>
 8003bd0:	7803      	ldrb	r3, [r0, #0]
 8003bd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bda:	e76c      	b.n	8003ab6 <_printf_i+0xf6>
 8003bdc:	08003e45 	.word	0x08003e45
 8003be0:	08003e56 	.word	0x08003e56

08003be4 <memcpy>:
 8003be4:	b510      	push	{r4, lr}
 8003be6:	1e43      	subs	r3, r0, #1
 8003be8:	440a      	add	r2, r1
 8003bea:	4291      	cmp	r1, r2
 8003bec:	d100      	bne.n	8003bf0 <memcpy+0xc>
 8003bee:	bd10      	pop	{r4, pc}
 8003bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bf8:	e7f7      	b.n	8003bea <memcpy+0x6>

08003bfa <memmove>:
 8003bfa:	4288      	cmp	r0, r1
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	eb01 0302 	add.w	r3, r1, r2
 8003c02:	d807      	bhi.n	8003c14 <memmove+0x1a>
 8003c04:	1e42      	subs	r2, r0, #1
 8003c06:	4299      	cmp	r1, r3
 8003c08:	d00a      	beq.n	8003c20 <memmove+0x26>
 8003c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c12:	e7f8      	b.n	8003c06 <memmove+0xc>
 8003c14:	4283      	cmp	r3, r0
 8003c16:	d9f5      	bls.n	8003c04 <memmove+0xa>
 8003c18:	1881      	adds	r1, r0, r2
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	42d3      	cmn	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memmove+0x28>
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c2a:	e7f7      	b.n	8003c1c <memmove+0x22>

08003c2c <_free_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4605      	mov	r5, r0
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d045      	beq.n	8003cc0 <_free_r+0x94>
 8003c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c38:	1f0c      	subs	r4, r1, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bfb8      	it	lt
 8003c3e:	18e4      	addlt	r4, r4, r3
 8003c40:	f000 f8d2 	bl	8003de8 <__malloc_lock>
 8003c44:	4a1f      	ldr	r2, [pc, #124]	; (8003cc4 <_free_r+0x98>)
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	4610      	mov	r0, r2
 8003c4a:	b933      	cbnz	r3, 8003c5a <_free_r+0x2e>
 8003c4c:	6063      	str	r3, [r4, #4]
 8003c4e:	6014      	str	r4, [r2, #0]
 8003c50:	4628      	mov	r0, r5
 8003c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c56:	f000 b8c8 	b.w	8003dea <__malloc_unlock>
 8003c5a:	42a3      	cmp	r3, r4
 8003c5c:	d90c      	bls.n	8003c78 <_free_r+0x4c>
 8003c5e:	6821      	ldr	r1, [r4, #0]
 8003c60:	1862      	adds	r2, r4, r1
 8003c62:	4293      	cmp	r3, r2
 8003c64:	bf04      	itt	eq
 8003c66:	681a      	ldreq	r2, [r3, #0]
 8003c68:	685b      	ldreq	r3, [r3, #4]
 8003c6a:	6063      	str	r3, [r4, #4]
 8003c6c:	bf04      	itt	eq
 8003c6e:	1852      	addeq	r2, r2, r1
 8003c70:	6022      	streq	r2, [r4, #0]
 8003c72:	6004      	str	r4, [r0, #0]
 8003c74:	e7ec      	b.n	8003c50 <_free_r+0x24>
 8003c76:	4613      	mov	r3, r2
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	b10a      	cbz	r2, 8003c80 <_free_r+0x54>
 8003c7c:	42a2      	cmp	r2, r4
 8003c7e:	d9fa      	bls.n	8003c76 <_free_r+0x4a>
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	1858      	adds	r0, r3, r1
 8003c84:	42a0      	cmp	r0, r4
 8003c86:	d10b      	bne.n	8003ca0 <_free_r+0x74>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	4401      	add	r1, r0
 8003c8c:	1858      	adds	r0, r3, r1
 8003c8e:	4282      	cmp	r2, r0
 8003c90:	6019      	str	r1, [r3, #0]
 8003c92:	d1dd      	bne.n	8003c50 <_free_r+0x24>
 8003c94:	6810      	ldr	r0, [r2, #0]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	4401      	add	r1, r0
 8003c9c:	6019      	str	r1, [r3, #0]
 8003c9e:	e7d7      	b.n	8003c50 <_free_r+0x24>
 8003ca0:	d902      	bls.n	8003ca8 <_free_r+0x7c>
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	602b      	str	r3, [r5, #0]
 8003ca6:	e7d3      	b.n	8003c50 <_free_r+0x24>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	1821      	adds	r1, r4, r0
 8003cac:	428a      	cmp	r2, r1
 8003cae:	bf04      	itt	eq
 8003cb0:	6811      	ldreq	r1, [r2, #0]
 8003cb2:	6852      	ldreq	r2, [r2, #4]
 8003cb4:	6062      	str	r2, [r4, #4]
 8003cb6:	bf04      	itt	eq
 8003cb8:	1809      	addeq	r1, r1, r0
 8003cba:	6021      	streq	r1, [r4, #0]
 8003cbc:	605c      	str	r4, [r3, #4]
 8003cbe:	e7c7      	b.n	8003c50 <_free_r+0x24>
 8003cc0:	bd38      	pop	{r3, r4, r5, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000098 	.word	0x20000098

08003cc8 <_malloc_r>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	1ccd      	adds	r5, r1, #3
 8003ccc:	f025 0503 	bic.w	r5, r5, #3
 8003cd0:	3508      	adds	r5, #8
 8003cd2:	2d0c      	cmp	r5, #12
 8003cd4:	bf38      	it	cc
 8003cd6:	250c      	movcc	r5, #12
 8003cd8:	2d00      	cmp	r5, #0
 8003cda:	4606      	mov	r6, r0
 8003cdc:	db01      	blt.n	8003ce2 <_malloc_r+0x1a>
 8003cde:	42a9      	cmp	r1, r5
 8003ce0:	d903      	bls.n	8003cea <_malloc_r+0x22>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	6033      	str	r3, [r6, #0]
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	f000 f87d 	bl	8003de8 <__malloc_lock>
 8003cee:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <_malloc_r+0xac>)
 8003cf0:	6814      	ldr	r4, [r2, #0]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	b991      	cbnz	r1, 8003d1c <_malloc_r+0x54>
 8003cf6:	4c20      	ldr	r4, [pc, #128]	; (8003d78 <_malloc_r+0xb0>)
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	b91b      	cbnz	r3, 8003d04 <_malloc_r+0x3c>
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 f863 	bl	8003dc8 <_sbrk_r>
 8003d02:	6020      	str	r0, [r4, #0]
 8003d04:	4629      	mov	r1, r5
 8003d06:	4630      	mov	r0, r6
 8003d08:	f000 f85e 	bl	8003dc8 <_sbrk_r>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d124      	bne.n	8003d5a <_malloc_r+0x92>
 8003d10:	230c      	movs	r3, #12
 8003d12:	6033      	str	r3, [r6, #0]
 8003d14:	4630      	mov	r0, r6
 8003d16:	f000 f868 	bl	8003dea <__malloc_unlock>
 8003d1a:	e7e4      	b.n	8003ce6 <_malloc_r+0x1e>
 8003d1c:	680b      	ldr	r3, [r1, #0]
 8003d1e:	1b5b      	subs	r3, r3, r5
 8003d20:	d418      	bmi.n	8003d54 <_malloc_r+0x8c>
 8003d22:	2b0b      	cmp	r3, #11
 8003d24:	d90f      	bls.n	8003d46 <_malloc_r+0x7e>
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	50cd      	str	r5, [r1, r3]
 8003d2a:	18cc      	adds	r4, r1, r3
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f000 f85c 	bl	8003dea <__malloc_unlock>
 8003d32:	f104 000b 	add.w	r0, r4, #11
 8003d36:	1d23      	adds	r3, r4, #4
 8003d38:	f020 0007 	bic.w	r0, r0, #7
 8003d3c:	1ac3      	subs	r3, r0, r3
 8003d3e:	d0d3      	beq.n	8003ce8 <_malloc_r+0x20>
 8003d40:	425a      	negs	r2, r3
 8003d42:	50e2      	str	r2, [r4, r3]
 8003d44:	e7d0      	b.n	8003ce8 <_malloc_r+0x20>
 8003d46:	428c      	cmp	r4, r1
 8003d48:	684b      	ldr	r3, [r1, #4]
 8003d4a:	bf16      	itet	ne
 8003d4c:	6063      	strne	r3, [r4, #4]
 8003d4e:	6013      	streq	r3, [r2, #0]
 8003d50:	460c      	movne	r4, r1
 8003d52:	e7eb      	b.n	8003d2c <_malloc_r+0x64>
 8003d54:	460c      	mov	r4, r1
 8003d56:	6849      	ldr	r1, [r1, #4]
 8003d58:	e7cc      	b.n	8003cf4 <_malloc_r+0x2c>
 8003d5a:	1cc4      	adds	r4, r0, #3
 8003d5c:	f024 0403 	bic.w	r4, r4, #3
 8003d60:	42a0      	cmp	r0, r4
 8003d62:	d005      	beq.n	8003d70 <_malloc_r+0xa8>
 8003d64:	1a21      	subs	r1, r4, r0
 8003d66:	4630      	mov	r0, r6
 8003d68:	f000 f82e 	bl	8003dc8 <_sbrk_r>
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d0cf      	beq.n	8003d10 <_malloc_r+0x48>
 8003d70:	6025      	str	r5, [r4, #0]
 8003d72:	e7db      	b.n	8003d2c <_malloc_r+0x64>
 8003d74:	20000098 	.word	0x20000098
 8003d78:	2000009c 	.word	0x2000009c

08003d7c <_realloc_r>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	4607      	mov	r7, r0
 8003d80:	4614      	mov	r4, r2
 8003d82:	460e      	mov	r6, r1
 8003d84:	b921      	cbnz	r1, 8003d90 <_realloc_r+0x14>
 8003d86:	4611      	mov	r1, r2
 8003d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d8c:	f7ff bf9c 	b.w	8003cc8 <_malloc_r>
 8003d90:	b922      	cbnz	r2, 8003d9c <_realloc_r+0x20>
 8003d92:	f7ff ff4b 	bl	8003c2c <_free_r>
 8003d96:	4625      	mov	r5, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9c:	f000 f826 	bl	8003dec <_malloc_usable_size_r>
 8003da0:	42a0      	cmp	r0, r4
 8003da2:	d20f      	bcs.n	8003dc4 <_realloc_r+0x48>
 8003da4:	4621      	mov	r1, r4
 8003da6:	4638      	mov	r0, r7
 8003da8:	f7ff ff8e 	bl	8003cc8 <_malloc_r>
 8003dac:	4605      	mov	r5, r0
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d0f2      	beq.n	8003d98 <_realloc_r+0x1c>
 8003db2:	4631      	mov	r1, r6
 8003db4:	4622      	mov	r2, r4
 8003db6:	f7ff ff15 	bl	8003be4 <memcpy>
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	f7ff ff35 	bl	8003c2c <_free_r>
 8003dc2:	e7e9      	b.n	8003d98 <_realloc_r+0x1c>
 8003dc4:	4635      	mov	r5, r6
 8003dc6:	e7e7      	b.n	8003d98 <_realloc_r+0x1c>

08003dc8 <_sbrk_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4c06      	ldr	r4, [pc, #24]	; (8003de4 <_sbrk_r+0x1c>)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4605      	mov	r5, r0
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	f7fd f830 	bl	8000e38 <_sbrk>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_sbrk_r+0x1a>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_sbrk_r+0x1a>
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	200001ac 	.word	0x200001ac

08003de8 <__malloc_lock>:
 8003de8:	4770      	bx	lr

08003dea <__malloc_unlock>:
 8003dea:	4770      	bx	lr

08003dec <_malloc_usable_size_r>:
 8003dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df0:	1f18      	subs	r0, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bfbc      	itt	lt
 8003df6:	580b      	ldrlt	r3, [r1, r0]
 8003df8:	18c0      	addlt	r0, r0, r3
 8003dfa:	4770      	bx	lr

08003dfc <_init>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr

08003e08 <_fini>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr
>>>>>>> 6b7dab40fb31398b8a7315e70cab0275286bc738
